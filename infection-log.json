{"stats":{"totalMutantsCount":431,"killedCount":256,"notCoveredCount":114,"escapedCount":61,"errorCount":0,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":59.4,"mutationCodeCoverage":73.55,"coveredCodeMsi":80.76},"escaped":[{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        \n        return new Response('', 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AdminController.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n     public function grantAuthor(int $userId) : Response\n     {\n-        $this->roleService->grantAuthor($userId);\n+        \n         return new Response('', 201);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.58c212ba8feaa5e4725402a20ae62e57.infection.xml\n\n.                                                                   1 \/ 1 (100%)\n\nTime: 00:00.283, Memory: 26.00 MB\n\nOK (1 test, 2 assertions)\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 200);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AdminController.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     public function grantAuthor(int $userId) : Response\n     {\n         $this->roleService->grantAuthor($userId);\n-        return new Response('', 201);\n+        return new Response('', 200);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c2e4510992829c051982ed72fbb89ac1.infection.xml\n\n.                                                                   1 \/ 1 (100%)\n\nTime: 00:00.259, Memory: 26.00 MB\n\nOK (1 test, 2 assertions)\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 202);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AdminController.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     public function grantAuthor(int $userId) : Response\n     {\n         $this->roleService->grantAuthor($userId);\n-        return new Response('', 201);\n+        return new Response('', 202);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f7164a215f448ac1333abefe2bf48556.infection.xml\n\n.                                                                   1 \/ 1 (100%)\n\nTime: 00:00.260, Memory: 26.00 MB\n\nOK (1 test, 2 assertions)\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 0)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":58},"diff":"--- Original\n+++ New\n@@ @@\n     #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n     public function reviews(int $id, Request $request) : Response\n     {\n-        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n+        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 0)));\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b3c338b4eb8620258fc42ba7486d6cbf.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.346, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 2)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":58},"diff":"--- Original\n+++ New\n@@ @@\n     #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n     public function reviews(int $id, Request $request) : Response\n     {\n-        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n+        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 2)));\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a09e8dc2480f583ba7e18659e59b50cc.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.324, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        \n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n     public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n     {\n-        $this->subscriberService->subscribe($subscriberRequest);\n+        \n         return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0060074646ba651595b8f9b4c392e995.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.276, Memory: 26.00 MB\n\nOK (2 tests, 3 assertions)\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 200);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n     public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n     {\n         $this->subscriberService->subscribe($subscriberRequest);\n-        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n+        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 200);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7577e3c425ba3de2148996dc1f7a03ef.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.274, Memory: 28.00 MB\n\nOK (2 tests, 3 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 202);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n     public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n     {\n         $this->subscriberService->subscribe($subscriberRequest);\n-        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n+        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 202);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d732a6e058e8a0c9b23a933cf4f732d0.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.279, Memory: 28.00 MB\n\nOK (2 tests, 3 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    protected function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/RefreshToken.php","originalStartLine":90},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->user;\n     }\n-    public function setUser(UserInterface $user) : static\n+    protected function setUser(UserInterface $user) : static\n     {\n         $this->user = $user;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bf7cfc5b8ae5bf3cadd507acb32bfb85.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.837, Memory: 30.00 MB\n\nOK (2 tests, 4 assertions)\n\nRemaining indirect deprecation notices (5)\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    protected function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n     #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n     private Book $book;\n     #[ORM\\PrePersist]\n-    public function setCreatedAtValue() : void\n+    protected function setCreatedAtValue() : void\n     {\n         $this->createdAt = new DateTimeImmutable();\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.72eee41dc0f33bbec966f27d91fa885d.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.862, Memory: 30.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    protected function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":109},"diff":"--- Original\n+++ New\n@@ @@\n     public function eraseCredentials() : void\n     {\n     }\n-    public function getUsername() : string\n+    protected function getUsername() : string\n     {\n         return $this->email;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a842e4a6fc06ce6cd87f6db8c7e7ef12.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.346, Memory: 30.00 MB\n\nOK (2 tests, 4 assertions)\n\nRemaining indirect deprecation notices (5)\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass BookCategoryNotFoundException extends RuntimeException\n{\n    public function __construct(string $message = 'Book category not found')\n    {\n        parent::__construct($message);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass BookCategoryNotFoundException extends RuntimeException\n{\n    public function __construct(string $message = 'Book category not found')\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Exception\/BookCategoryNotFoundException.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = 'Book category not found')\n     {\n-        parent::__construct($message);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1e540a54bc629fadfce8688e78e15b84.infection.xml\n\n.....                                                               5 \/ 5 (100%)\n\nTime: 00:00.031, Memory: 12.00 MB\n\nOK (5 tests, 14 assertions)"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationAccessDeniedException extends Exception\n{\n    public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n    {\n        parent::__construct($message, 0, $previous);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationAccessDeniedException extends Exception\n{\n    public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n    {\n        parent::__construct($message, -1, $previous);\n    }\n}","originalFilePath":"\/app\/src\/Exception\/RecommendationAccessDeniedException.php","originalStartLine":12},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n     {\n-        parent::__construct($message, 0, $previous);\n+        parent::__construct($message, -1, $previous);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e742ded93cc5c96ec68a1cfc7687a36d.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.029, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationAccessDeniedException extends Exception\n{\n    public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n    {\n        parent::__construct($message, 0, $previous);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationAccessDeniedException extends Exception\n{\n    public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n    {\n        parent::__construct($message, 1, $previous);\n    }\n}","originalFilePath":"\/app\/src\/Exception\/RecommendationAccessDeniedException.php","originalStartLine":12},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n     {\n-        parent::__construct($message, 0, $previous);\n+        parent::__construct($message, 1, $previous);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a1994cec16523b98728487a4d8f977e2.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.024, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationAccessDeniedException extends Exception\n{\n    public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n    {\n        parent::__construct($message, 0, $previous);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationAccessDeniedException extends Exception\n{\n    public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Exception\/RecommendationAccessDeniedException.php","originalStartLine":12},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = 'Access Denied', Throwable $previous = null)\n     {\n-        parent::__construct($message, 0, $previous);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.babd45c49a1d291130433bb5fb89eb16.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.026, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationException extends Exception\n{\n    public function __construct(string $message = '', Throwable $previous = null)\n    {\n        parent::__construct($message, 0, $previous);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationException extends Exception\n{\n    public function __construct(string $message = '', Throwable $previous = null)\n    {\n        parent::__construct($message, -1, $previous);\n    }\n}","originalFilePath":"\/app\/src\/Exception\/RecommendationException.php","originalStartLine":12},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = '', Throwable $previous = null)\n     {\n-        parent::__construct($message, 0, $previous);\n+        parent::__construct($message, -1, $previous);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.652e8f8492e1ae1ca940df047bc426c5.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.032, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationException extends Exception\n{\n    public function __construct(string $message = '', Throwable $previous = null)\n    {\n        parent::__construct($message, 0, $previous);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationException extends Exception\n{\n    public function __construct(string $message = '', Throwable $previous = null)\n    {\n        parent::__construct($message, 1, $previous);\n    }\n}","originalFilePath":"\/app\/src\/Exception\/RecommendationException.php","originalStartLine":12},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = '', Throwable $previous = null)\n     {\n-        parent::__construct($message, 0, $previous);\n+        parent::__construct($message, 1, $previous);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.952db1e9899f890dc1cbae32902763fc.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.024, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationException extends Exception\n{\n    public function __construct(string $message = '', Throwable $previous = null)\n    {\n        parent::__construct($message, 0, $previous);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Exception;\nuse Throwable;\nclass RecommendationException extends Exception\n{\n    public function __construct(string $message = '', Throwable $previous = null)\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Exception\/RecommendationException.php","originalStartLine":12},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = '', Throwable $previous = null)\n     {\n-        parent::__construct($message, 0, $previous);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a51662701e787afc55b8e01b7b8aefc8.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.025, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Throwable;\nfinal class RecommendationRequestException extends RecommendationException\n{\n    public function __construct(string $message = '', Throwable $throwable = null)\n    {\n        parent::__construct($message, $throwable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse Throwable;\nfinal class RecommendationRequestException extends RecommendationException\n{\n    public function __construct(string $message = '', Throwable $throwable = null)\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Exception\/RecommendationRequestException.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = '', Throwable $throwable = null)\n     {\n-        parent::__construct($message, $throwable);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.595690797ad4bf8f193b48239256240e.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.027, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass SubscriberFoundException extends RuntimeException\n{\n    public function __construct(string $message = 'Subscriber already exist!')\n    {\n        parent::__construct($message);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass SubscriberFoundException extends RuntimeException\n{\n    public function __construct(string $message = 'Subscriber already exist!')\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Exception\/SubscriberFoundException.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = 'Subscriber already exist!')\n     {\n-        parent::__construct($message);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.318af4c445bf83b00781c44e46a9e7a1.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.030, Memory: 12.00 MB\n\nOK (2 tests, 4 assertions)"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass UserAlreadyExistException extends RuntimeException\n{\n    public function __construct(string $message = 'User already exist')\n    {\n        parent::__construct($message);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass UserAlreadyExistException extends RuntimeException\n{\n    public function __construct(string $message = 'User already exist')\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Exception\/UserAlreadyExistException.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = 'User already exist')\n     {\n-        parent::__construct($message);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9cb85a2174c3b9efd1efe778d2f6a3bd.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.047, Memory: 12.00 MB\n\nOK (2 tests, 7 assertions)"},{"mutator":{"mutatorName":"GreaterThanOrEqualTo","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() > Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$mapping) {\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n-        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n+        if ($mapping->getCode() > Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.baf7dfe3257d4c68bae0dce5a9becbff.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.304, Memory: 28.00 MB\n\nOK (3 tests, 10 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"GreaterThanOrEqualToNegotiation","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() < Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$mapping) {\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n-        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n+        if ($mapping->getCode() < Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a46f448d8bedf6c9b4ea04e7567416f7.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.292, Memory: 28.00 MB\n\nOK (3 tests, 10 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalOr","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR && $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$mapping) {\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n-        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n+        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR && $mapping->isLoggable()) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7cc2ae8f06fe42ee1a2fa8fd24b2d964.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.339, Memory: 28.00 MB\n\nOK (3 tests, 10 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalOrAllSubExprNegation","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if (!($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR) || !$mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$mapping) {\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n-        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n+        if (!($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR) || !$mapping->isLoggable()) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b474262a3264a2f19cff883071cd7deb.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.297, Memory: 28.00 MB\n\nOK (3 tests, 10 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalOrNegation","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if (!($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable())) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$mapping) {\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n-        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n+        if (!($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable())) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f3118dab2b053fd9ba55c074b31cfcf2.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.307, Memory: 28.00 MB\n\nOK (3 tests, 10 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalOrSingleSubExprNegation","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || !$mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$mapping) {\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n-        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n+        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || !$mapping->isLoggable()) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e117d077a695ed785965cac4c73831a0.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.281, Memory: 28.00 MB\n\nOK (3 tests, 10 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            \n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":43},"diff":"--- Original\n+++ New\n@@ @@\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n-            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n+            \n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n         $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7a61696833bd77fa256f76f330872a0e.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.279, Memory: 28.00 MB\n\nOK (2 tests, 3 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":45},"diff":"--- Original\n+++ New\n@@ @@\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n-            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n+            $this->logger->error($throwable->getMessage(), ['previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n         $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.694ed8f327df3e1e0aceca83e36bedf4.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.281, Memory: 28.00 MB\n\nOK (2 tests, 3 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' > $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n-            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n+            $this->logger->error($throwable->getMessage(), ['trace' > $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n         $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1fc66c3e1196ff39d74f70b4642d7cd7.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.282, Memory: 28.00 MB\n\nOK (2 tests, 3 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"NotIdentical","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null === $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":47},"diff":"--- Original\n+++ New\n@@ @@\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n-            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n+            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null === $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n         $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.dc8f0185a71f8cf0bd70c8db1e7392c9.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.279, Memory: 28.00 MB\n\nOK (2 tests, 3 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Ternary","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? '' : $throwable->getPrevious()->getMessage()]);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":47},"diff":"--- Original\n+++ New\n@@ @@\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n-            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n+            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? '' : $throwable->getPrevious()->getMessage()]);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n         $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2c1dd9257ffe3b788c5c10ecfff51c38.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.269, Memory: 28.00 MB\n\nOK (2 tests, 3 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalAndAllSubExprNegation","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = !$this->isDebug && $mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n-        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n+        $details = !$this->isDebug && $mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n         $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n         $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.481653e7b36e247b8235f35fcb02943d.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.319, Memory: 28.00 MB\n\nOK (3 tests, 10 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return false;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":62},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isSecurityException(Throwable $throwable) : bool\n     {\n-        return $throwable instanceof AuthenticationException;\n+        return false;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2583402330c3349b3f50fbbe119fbb9d.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.295, Memory: 28.00 MB\n\nOK (3 tests, 10 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MBString","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c855e7f78c4984cbf09c157a8bb03e05.infection.xml\n\n.........                                                           9 \/ 9 (100%)\n\nTime: 00:00.332, Memory: 34.50 MB\n\nOK (9 tests, 22 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"GreaterThan","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) >= 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) >= 150 ? mb_substr($description, 0, 150) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.715c6f5b8d788dd550dd0332171a50c7.infection.xml\n\n.........                                                           9 \/ 9 (100%)\n\nTime: 00:00.328, Memory: 34.50 MB\n\nOK (9 tests, 22 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MBString","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? substr($description, 0, 150) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3fb140062972ef756abbbe524bdd9d8c.infection.xml\n\n.........                                                           9 \/ 9 (100%)\n\nTime: 00:00.343, Memory: 34.50 MB\n\nOK (9 tests, 22 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookCategoryListItem\n{\n    public function __construct(public int $id, public string $title, public string $slug)\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookCategoryListItem\n{\n    public function __construct(public int $id, public string $title, public string $slug)\n    {\n    }\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookCategoryListItem.php","originalStartLine":14},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(public int $id, public string $title, public string $slug)\n     {\n     }\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.82a3f50607b4a0d6925df9a815cc3f6b.infection.xml\n\n.                                                                   1 \/ 1 (100%)\n\nTime: 00:00.234, Memory: 26.00 MB\n\nOK (1 test, 2 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookCategoryListItem\n{\n    public function __construct(public int $id, public string $title, public string $slug)\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookCategoryListItem\n{\n    public function __construct(public int $id, public string $title, public string $slug)\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    protected function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookCategoryListItem.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getTitle() : string\n+    protected function getTitle() : string\n     {\n         return $this->title;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.df15dbf30ea7b6f5edc8af58be48230e.infection.xml\n\n.                                                                   1 \/ 1 (100%)\n\nTime: 00:00.265, Memory: 26.00 MB\n\nOK (1 test, 2 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookCategoryListItem\n{\n    public function __construct(public int $id, public string $title, public string $slug)\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookCategoryListItem\n{\n    public function __construct(public int $id, public string $title, public string $slug)\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    protected function getSlug() : string\n    {\n        return $this->slug;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookCategoryListItem.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->title;\n     }\n-    public function getSlug() : string\n+    protected function getSlug() : string\n     {\n         return $this->slug;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.854220882958c825246e496facbbaf7c.infection.xml\n\n.                                                                   1 \/ 1 (100%)\n\nTime: 00:00.272, Memory: 26.00 MB\n\nOK (1 test, 2 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"OneZeroFloat","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 1.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n         \/** @var string[] *\/\n         private array $authors,\n         private string $publicationDate,\n-        private float $rating = 0.0,\n+        private float $rating = 1.0,\n         private int $review = 0,\n         \/** @var BookCategoryListItem[] *\/\n         private array $categories = [],","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.91fcbfe74b4a36a11029f703bed892ab.infection.xml\n\n..........                                                        10 \/ 10 (100%)\n\nTime: 00:00.335, Memory: 34.50 MB\n\nOK (10 tests, 23 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = -1,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n         private array $authors,\n         private string $publicationDate,\n         private float $rating = 0.0,\n-        private int $review = 0,\n+        private int $review = -1,\n         \/** @var BookCategoryListItem[] *\/\n         private array $categories = [],\n         \/** @var BookFormatListItem[] *\/","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bb7075db8b382207a0bcb24e6dcd1a9c.infection.xml\n\n..........                                                        10 \/ 10 (100%)\n\nTime: 00:00.357, Memory: 34.50 MB\n\nOK (10 tests, 23 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 1,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n         private array $authors,\n         private string $publicationDate,\n         private float $rating = 0.0,\n-        private int $review = 0,\n+        private int $review = 1,\n         \/** @var BookCategoryListItem[] *\/\n         private array $categories = [],\n         \/** @var BookFormatListItem[] *\/","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f6779d9b3036eb119068af052418f042.infection.xml\n\n..........                                                        10 \/ 10 (100%)\n\nTime: 00:00.329, Memory: 34.50 MB\n\nOK (10 tests, 23 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/RecommendedBook.php","originalStartLine":12},"diff":"--- Original\n+++ New\n@@ @@\n     private string $title;\n     private string $slug;\n     private string $description;\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f921744f109c4929393c810a27db6b19.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.321, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    protected function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/RecommendedBook.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n         $this->id = $id;\n         return $this;\n     }\n-    public function getTitle() : string\n+    protected function getTitle() : string\n     {\n         return $this->title;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b4f42d019b825e197061350f04d82617.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.351, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    protected function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/RecommendedBook.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n         $this->title = $title;\n         return $this;\n     }\n-    public function getSlug() : string\n+    protected function getSlug() : string\n     {\n         return $this->slug;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b09b1f483e70b6fa85fbaee4d8c1fc3c.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.328, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    protected function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/RecommendedBook.php","originalStartLine":48},"diff":"--- Original\n+++ New\n@@ @@\n         $this->slug = $slug;\n         return $this;\n     }\n-    public function getDescription() : string\n+    protected function getDescription() : string\n     {\n         return $this->description;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0b4d183100da82b091cc66ffba52d222.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.329, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy([]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/BookRepository.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function findBooksByIds(array $ids) : array\n     {\n-        return $this->findBy(['id' => $ids]);\n+        return $this->findBy([]);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9d50733138687daac3e14b17dca35e99.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.335, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"CastInt","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/ReviewRepository.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getBookTotalRatingSum(int $id) : int\n     {\n-        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n+        return $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n     }\n     public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.244f5cd264fe3eb5baeb299fdf02b5b3.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.338, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: true);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/ReviewRepository.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n     {\n         $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n-        return new Paginator(query: $query, fetchJoinCollection: false);\n+        return new Paginator(query: $query, fetchJoinCollection: true);\n     }\n     public function countByBook(int $id) : int\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1e5be5ac49faa1e79031039528f7c3ca.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.324, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    protected function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/ReviewRepository.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n         $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n         return new Paginator(query: $query, fetchJoinCollection: false);\n     }\n-    public function countByBook(int $id) : int\n+    protected function countByBook(int $id) : int\n     {\n         return $this->count(['book' => $id]);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.887415d2c1978d065081ddb9461ccbcf.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.317, Memory: 34.50 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count([]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/ReviewRepository.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function countByBook(int $id) : int\n     {\n-        return $this->count(['book' => $id]);\n+        return $this->count([]);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.68ee1618814e964fa276bb5a2e34608a.infection.xml\n\n....                                                                4 \/ 4 (100%)\n\nTime: 00:00.326, Memory: 32.00 MB\n\nOK (4 tests, 8 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Coalesce","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: false ?? $mapping['hidden'], loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n             if (empty($mapping['code'])) {\n                 throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n             }\n-            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n+            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: false ?? $mapping['hidden'], loggable: $mapping['loggable'] ?? false);\n         }\n     }\n     public function resolve(string $throwableClass) : ?ExceptionMapping","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b91f831207f90461c9dd95164c830c7b.infection.xml\n\n.............                                                     13 \/ 13 (100%)\n\nTime: 00:00.412, Memory: 36.50 MB\n\nOK (13 tests, 23 assertions)\n\nRemaining indirect deprecation notices (16)\n\n  9x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    ...\n\n  7x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    3x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Break_","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                continue;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n         foreach ($this->mappings as $classKey => $mapping) {\n             if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                 $foundMapping = $mapping;\n-                break;\n+                continue;\n             }\n         }\n         return $foundMapping;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6e73c04ceb4e2e513800daf9d7f9501d.infection.xml\n\n......                                                              6 \/ 6 (100%)\n\nTime: 00:00.261, Memory: 28.00 MB\n\nOK (6 tests, 9 assertions)\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if (true && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();\n-            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n+            if (true && Response::HTTP_FORBIDDEN === $statusCode) {\n                 throw new RecommendationAccessDeniedException();\n             }\n             throw new RecommendationRequestException($exception->getMessage(), $exception);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4160a227df80f3275b687fd5181486cc.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.025, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"LogicalAnd","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException || Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();\n-            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n+            if ($exception instanceof ClientException || Response::HTTP_FORBIDDEN === $statusCode) {\n                 throw new RecommendationAccessDeniedException();\n             }\n             throw new RecommendationRequestException($exception->getMessage(), $exception);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3478c20f58e9e29e8149725b9e93e07f.infection.xml\n\n..                                                                  2 \/ 2 (100%)\n\nTime: 00:00.025, Memory: 12.00 MB\n\nOK (2 tests, 2 assertions)"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 2, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n     {\n-        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n+        $offset = max($page - 2, 0) * self::PAGE_LIMIT;\n         $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n         $total = count($paginator);\n         $items = [];","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.33c0b2834a39b4b0239e67b2ae5c82f2.infection.xml\n\n..........                                                        10 \/ 10 (100%)\n\nTime: 00:00.323, Memory: 34.50 MB\n\nOK (10 tests, 26 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Multiplication","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) \/ self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n     {\n-        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n+        $offset = max($page - 1, 0) \/ self::PAGE_LIMIT;\n         $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n         $total = count($paginator);\n         $items = [];","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f8300110d9769f8c2b721b8d977cb859.infection.xml\n\n..........                                                        10 \/ 10 (100%)\n\nTime: 00:00.338, Memory: 34.50 MB\n\nOK (10 tests, 26 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"CastInt","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages(ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n         foreach ($paginator as $item) {\n             $items[] = $this->map($item);\n         }\n-        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n+        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages(ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n     }\n     public function map(Review $review) : ReviewModel\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.929538b16bcea61319189bada85f2374.infection.xml\n\n..........                                                        10 \/ 10 (100%)\n\nTime: 00:00.338, Memory: 34.50 MB\n\nOK (10 tests, 26 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    protected function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n     }\n-    public function map(Review $review) : ReviewModel\n+    protected function map(Review $review) : ReviewModel\n     {\n         return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.21bc1a24dac49535a5ffeb4fe2c4b2f2.infection.xml\n\n..........                                                        10 \/ 10 (100%)\n\nTime: 00:00.331, Memory: 34.50 MB\n\nOK (10 tests, 26 assertions)\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        \n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/RoleService.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $user = $this->userRepository->getUser($userId);\n         $user->setRoles([$role]);\n-        $this->entityManager->persist($user);\n+        \n         $this->entityManager->flush();\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ba9bab1c9e32d97f820110f33ecfd789.infection.xml\n\n...                                                                 3 \/ 3 (100%)\n\nTime: 00:00.314, Memory: 28.00 MB\n\nOK (3 tests, 8 assertions)\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"}],"timeouted":[],"killed":[{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    protected function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AdminController.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n     #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n     #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n-    public function grantAuthor(int $userId) : Response\n+    protected function grantAuthor(int $userId) : Response\n     {\n         $this->roleService->grantAuthor($userId);\n         return new Response('', 201);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3f7b7e81f0239ed7e87050d901427396.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.283, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:04 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/TraceableControllerResolver.php(36): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(164): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\TraceableControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(20): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AdminControllerTest.php:22\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    protected function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AuthController.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n-    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n+    protected function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n     {\n         return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a6e51dabb62bbcd2936854613ca4d9fd.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.214, Memory: 24.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:04 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/TraceableControllerResolver.php(36): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(164): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\TraceableControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Service\\BookCategoryService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookCategoryController extends AbstractController\n{\n    public function __construct(private readonly BookCategoryService $bookCategoryService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n    #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n    public function index() : Response\n    {\n        return $this->json($this->bookCategoryService->findAll());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Service\\BookCategoryService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookCategoryController extends AbstractController\n{\n    public function __construct(private readonly BookCategoryService $bookCategoryService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n    #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n    protected function index() : Response\n    {\n        return $this->json($this->bookCategoryService->findAll());\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookCategoryController.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     #[OA\\Response(response: 200, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n     #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n-    public function index() : Response\n+    protected function index() : Response\n     {\n         return $this->json($this->bookCategoryService->findAll());\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d04ded58ff92e2abf60e07a9176a549e.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.224, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:05 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/TraceableControllerResolver.php(36): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(164): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\TraceableControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookCategoryControllerTest.php(15): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest->testIndex()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    protected function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n     #[OA\\Response(response: 404, description: 'Book category not found')]\n     #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n-    public function booksByCategory(int $id) : Response\n+    protected function booksByCategory(int $id) : Response\n     {\n         return $this->json($this->bookCategoryService->findBooksByCategory($id));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.330c17a7bc7042b094d99f6a08774cde.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.344, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:05 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/TraceableControllerResolver.php(36): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(164): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\TraceableControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(17): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByCategory()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:20\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    protected function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n     #[OA\\Response(response: 403, description: 'Access Denied')]\n     #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n-    public function booksByRecommendations(int $id) : Response\n+    protected function booksByRecommendations(int $id) : Response\n     {\n         return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f1b8d115b1f4c9f1f44f98bf4b4e32b8.infection.xml\n\n..F\n\nTime: 00:00.286, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:06 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/TraceableControllerResolver.php(36): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(164): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\TraceableControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    protected function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n     #[OA\\Response(response: 404, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n-    public function booksById(int $id) : Response\n+    protected function booksById(int $id) : Response\n     {\n         return $this->json($this->bookCategoryService->getBookById($id));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e34736d31a35e69651edeb3a36a2030a.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.329, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:06 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/TraceableControllerResolver.php(36): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(164): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\TraceableControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    protected function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":50},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n     #[OA\\Response(response: 404, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n-    public function reviews(int $id, Request $request) : Response\n+    protected function reviews(int $id, Request $request) : Response\n     {\n         return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.85742698d450bab5d6d5936e874eb390.infection.xml\n\n.F\n\nTime: 00:00.279, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:08 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/TraceableControllerResolver.php(36): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(164): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\TraceableControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    protected function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n-    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n+    protected function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n     {\n         $this->subscriberService->subscribe($subscriberRequest);\n         return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.cb9c06184603178991a39459cd8e2424.infection.xml\n\nF\n\nTime: 00:00.316, Memory: 24.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that the Response status code is 422.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:09 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/TraceableControllerResolver.php(36): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(164): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\TraceableControllerResolver->getController(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/SubscriberControllerTest.php(23): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\SubscriberControllerTest->testSubscribeNotAgreed()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\SubscriberControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:38\n\/app\/tests\/Controller\/SubscriberControllerTest.php:31\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    protected function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":67},"diff":"--- Original\n+++ New\n@@ @@\n         $this->reviews = new ArrayCollection();\n         $this->formats = new ArrayCollection();\n     }\n-    public function getId() : ?int\n+    protected function getId() : ?int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d2a94618bf4e5d0ec1698f91ec8e22ef.infection.xml\n\nEE.EEEEEF\n\nTime: 00:00.293, Memory: 30.00 MB\n\nThere were 7 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::getId() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:16\n\/app\/tests\/Mapper\/BookMapperTest.php:27\n\n2) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::getId() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::getId() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:16\n\/app\/src\/Service\/BookService.php:47\n\/app\/src\/Service\/BookService.php:45\n\/app\/tests\/Service\/BookServiceTest.php:104\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::getId() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:31\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::getId() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:31\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n6) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::getId() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:94\n\n7) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::getId() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:181\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:10 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(47): App\\\\Mapper\\\\BookMapper::map(Object(App\\\\Entity\\\\Book), 'App\\\\\\\\Model\\\\\\\\BookL...')\\n#1 [internal function]: App\\\\Service\\\\BookService->App\\\\Service\\\\{closure}(Object(App\\\\Entity\\\\Book))\\n#2 \\\/app\\\/src\\\/Service\\\/BookService.php(45): array_map(Object(Closure), Array)\\n#3 \\\/app\\\/src\\\/Controller\\\/BookController.php(31): App\\\\Service\\\\BookService->findBooksByCategory(297)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByCategory(297)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(17): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByCategory()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:20\n\nERRORS!\nTests: 9, Assertions: 3, Errors: 7, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    4x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    protected function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":72},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getTitle() : string\n+    protected function getTitle() : string\n     {\n         return $this->title;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7edb0bc6da9a067686661d09256c8f84.infection.xml\n\nEEE.EEF\n\nTime: 00:00.329, Memory: 30.00 MB\n\nThere were 5 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::getTitle() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:17\n\/app\/tests\/Mapper\/BookMapperTest.php:27\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::getTitle() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:17\n\/app\/src\/Service\/BookService.php:47\n\/app\/src\/Service\/BookService.php:45\n\/app\/tests\/Service\/BookServiceTest.php:104\n\n3) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::getTitle() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:17\n\/app\/src\/Service\/BookService.php:100\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::getTitle() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:32\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::getTitle() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:32\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:10 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Mapper\\\\BookMapper::mapRecommendations(Object(App\\\\Entity\\\\Book))\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(63): array_map(Array, Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(851)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(851)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 7, Assertions: 3, Errors: 5, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    protected function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":77},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->title;\n     }\n-    public function setTitle(string $title) : static\n+    protected function setTitle(string $title) : static\n     {\n         $this->title = $title;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bae327f1daeb87b16c9b4059094a2856.infection.xml\n\nEEE.EEEEEEE                                                       11 \/ 11 (100%)\n\nTime: 00:00.227, Memory: 22.00 MB\n\nThere were 10 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Mapper\\BookMapperTest\n\n\/app\/tests\/Mapper\/BookMapperTest.php:16\n\n2) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:129\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:57\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:213\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:213\n\n6) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:48\n\/app\/tests\/Repository\/BookRepositoryTest.php:32\n\n7) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:70\n\n8) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:50\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\n9) App\\Tests\\Controller\\BookControllerTest::testBookById\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:128\n\n10) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::setTitle() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:167\n\nERRORS!\nTests: 11, Assertions: 2, Errors: 10.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    protected function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":84},"diff":"--- Original\n+++ New\n@@ @@\n         $this->title = $title;\n         return $this;\n     }\n-    public function getSlug() : string\n+    protected function getSlug() : string\n     {\n         return $this->slug;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c6659070d65e9fa2af370e5f0d0b5ad9.infection.xml\n\nEEE.EEF\n\nTime: 00:00.344, Memory: 30.00 MB\n\nThere were 5 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::getSlug() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:18\n\/app\/tests\/Mapper\/BookMapperTest.php:27\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::getSlug() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:18\n\/app\/src\/Service\/BookService.php:47\n\/app\/src\/Service\/BookService.php:45\n\/app\/tests\/Service\/BookServiceTest.php:104\n\n3) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::getSlug() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:18\n\/app\/src\/Service\/BookService.php:100\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::getSlug() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:33\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::getSlug() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:33\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:11 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(47): App\\\\Mapper\\\\BookMapper::map(Object(App\\\\Entity\\\\Book), 'App\\\\\\\\Model\\\\\\\\BookL...')\\n#1 [internal function]: App\\\\Service\\\\BookService->App\\\\Service\\\\{closure}(Object(App\\\\Entity\\\\Book))\\n#2 \\\/app\\\/src\\\/Service\\\/BookService.php(45): array_map(Object(Closure), Array)\\n#3 \\\/app\\\/src\\\/Controller\\\/BookController.php(31): App\\\\Service\\\\BookService->findBooksByCategory(300)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByCategory(300)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(17): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByCategory()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:20\n\nERRORS!\nTests: 7, Assertions: 3, Errors: 5, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    protected function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":89},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->slug;\n     }\n-    public function setSlug(string $slug) : static\n+    protected function setSlug(string $slug) : static\n     {\n         $this->slug = $slug;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3046605230ca4c458c0d21a2ef5a2ffd.infection.xml\n\nEEE.EEEEEEE                                                       11 \/ 11 (100%)\n\nTime: 00:00.201, Memory: 22.00 MB\n\nThere were 10 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Mapper\\BookMapperTest\n\n\/app\/tests\/Mapper\/BookMapperTest.php:17\n\n2) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:130\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:58\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:214\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:214\n\n6) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:46\n\/app\/tests\/Repository\/BookRepositoryTest.php:32\n\n7) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:71\n\n8) App\\Tests\\Controller\\BookControllerTest::testBookById\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:129\n\n9) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:168\n\n10) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\Book::setSlug() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:51\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\nERRORS!\nTests: 11, Assertions: 2, Errors: 10.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    protected function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":96},"diff":"--- Original\n+++ New\n@@ @@\n         $this->slug = $slug;\n         return $this;\n     }\n-    public function getImage() : ?string\n+    protected function getImage() : ?string\n     {\n         return $this->image;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1c61b21d4d45779b2319a5159ab32cc4.infection.xml\n\nEEE...F\n\nTime: 00:00.307, Memory: 30.00 MB\n\nThere were 3 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::getImage() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:19\n\/app\/tests\/Mapper\/BookMapperTest.php:27\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::getImage() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:19\n\/app\/src\/Service\/BookService.php:47\n\/app\/src\/Service\/BookService.php:45\n\/app\/tests\/Service\/BookServiceTest.php:104\n\n3) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::getImage() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:19\n\/app\/src\/Service\/BookService.php:100\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:12 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(47): App\\\\Mapper\\\\BookMapper::map(Object(App\\\\Entity\\\\Book), 'App\\\\\\\\Model\\\\\\\\BookL...')\\n#1 [internal function]: App\\\\Service\\\\BookService->App\\\\Service\\\\{closure}(Object(App\\\\Entity\\\\Book))\\n#2 \\\/app\\\/src\\\/Service\\\/BookService.php(45): array_map(Object(Closure), Array)\\n#3 \\\/app\\\/src\\\/Controller\\\/BookController.php(31): App\\\\Service\\\\BookService->findBooksByCategory(303)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByCategory(303)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(17): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByCategory()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:20\n\nERRORS!\nTests: 7, Assertions: 9, Errors: 3, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    protected function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":101},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->image;\n     }\n-    public function setImage(?string $image) : static\n+    protected function setImage(?string $image) : static\n     {\n         $this->image = $image;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7068e0e6a288ba4a434635e4b28f7a69.infection.xml\n\nEEE.EEEEEEE                                                       11 \/ 11 (100%)\n\nTime: 00:00.202, Memory: 22.00 MB\n\nThere were 10 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Mapper\\BookMapperTest\n\n\/app\/tests\/Mapper\/BookMapperTest.php:19\n\n2) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:134\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:61\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:218\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:218\n\n6) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:47\n\/app\/tests\/Repository\/BookRepositoryTest.php:32\n\n7) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:74\n\n8) App\\Tests\\Controller\\BookControllerTest::testBookById\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:132\n\n9) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:171\n\n10) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\Book::setImage() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:54\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\nERRORS!\nTests: 11, Assertions: 2, Errors: 10.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    protected function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":111},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return string[]|null\n      *\/\n-    public function getAuthors() : ?array\n+    protected function getAuthors() : ?array\n     {\n         return $this->authors;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ac26bfe250507e24eedc07f75d16a1a2.infection.xml\n\nEEE...F\n\nTime: 00:00.288, Memory: 30.00 MB\n\nThere were 3 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::getAuthors() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:20\n\/app\/tests\/Mapper\/BookMapperTest.php:27\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::getAuthors() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:20\n\/app\/src\/Service\/BookService.php:47\n\/app\/src\/Service\/BookService.php:45\n\/app\/tests\/Service\/BookServiceTest.php:104\n\n3) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::getAuthors() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:20\n\/app\/src\/Service\/BookService.php:100\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:13 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(47): App\\\\Mapper\\\\BookMapper::map(Object(App\\\\Entity\\\\Book), 'App\\\\\\\\Model\\\\\\\\BookL...')\\n#1 [internal function]: App\\\\Service\\\\BookService->App\\\\Service\\\\{closure}(Object(App\\\\Entity\\\\Book))\\n#2 \\\/app\\\/src\\\/Service\\\/BookService.php(45): array_map(Object(Closure), Array)\\n#3 \\\/app\\\/src\\\/Controller\\\/BookController.php(31): App\\\\Service\\\\BookService->findBooksByCategory(306)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByCategory(306)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(17): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByCategory()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:20\n\nERRORS!\nTests: 7, Assertions: 9, Errors: 3, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    protected function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":119},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param string[] $authors\n      *\/\n-    public function setAuthors(?array $authors) : static\n+    protected function setAuthors(?array $authors) : static\n     {\n         $this->authors = $authors;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a92a43c28fd78cae825c4490cb329eb6.infection.xml\n\nEEE.EEEEEEE                                                       11 \/ 11 (100%)\n\nTime: 00:00.242, Memory: 22.00 MB\n\nThere were 10 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Mapper\\BookMapperTest\n\n\/app\/tests\/Mapper\/BookMapperTest.php:18\n\n2) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:133\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:60\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:217\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:217\n\n6) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:45\n\/app\/tests\/Repository\/BookRepositoryTest.php:32\n\n7) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:73\n\n8) App\\Tests\\Controller\\BookControllerTest::testBookById\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:131\n\n9) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:170\n\n10) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\Book::setAuthors() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:53\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\nERRORS!\nTests: 11, Assertions: 2, Errors: 10.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    protected function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":126},"diff":"--- Original\n+++ New\n@@ @@\n         $this->authors = $authors;\n         return $this;\n     }\n-    public function getPublicationDate() : ?DateTimeInterface\n+    protected function getPublicationDate() : ?DateTimeInterface\n     {\n         return $this->publicationDate;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.daed96f793da68490cf68541b515f7f6.infection.xml\n\nEEE....F\n\nTime: 00:00.311, Memory: 30.00 MB\n\nThere were 3 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::getPublicationDate() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:21\n\/app\/tests\/Mapper\/BookMapperTest.php:27\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::getPublicationDate() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:21\n\/app\/src\/Service\/BookService.php:47\n\/app\/src\/Service\/BookService.php:45\n\/app\/tests\/Service\/BookServiceTest.php:104\n\n3) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::getPublicationDate() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:21\n\/app\/src\/Service\/BookService.php:100\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:14 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(100): App\\\\Mapper\\\\BookMapper::map(Object(App\\\\Entity\\\\Book), 'App\\\\\\\\Model\\\\\\\\BookD...')\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(856)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(856)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 8, Assertions: 11, Errors: 3, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    protected function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":131},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->publicationDate;\n     }\n-    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n+    protected function setPublicationDate(?DateTimeInterface $publicationDate) : static\n     {\n         $this->publicationDate = $publicationDate;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c67fe36daacc8bb7c0747e326f2165c5.infection.xml\n\nEEE.EEEEEEE                                                       11 \/ 11 (100%)\n\nTime: 00:00.203, Memory: 22.00 MB\n\nThere were 10 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Mapper\\BookMapperTest\n\n\/app\/tests\/Mapper\/BookMapperTest.php:22\n\n2) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:137\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:64\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:221\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:221\n\n6) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:44\n\/app\/tests\/Repository\/BookRepositoryTest.php:32\n\n7) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:174\n\n8) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:57\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\n9) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:77\n\n10) App\\Tests\\Controller\\BookControllerTest::testBookById\nError: Call to protected method App\\Entity\\Book::setPublicationDate() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:135\n\nERRORS!\nTests: 11, Assertions: 2, Errors: 10.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    protected function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":141},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return Collection<BookCategory>\n      *\/\n-    public function getCategories() : Collection\n+    protected function getCategories() : Collection\n     {\n         return $this->categories;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.57a4e428764578b0160638e22e880fe0.infection.xml\n\n.E....F\n\nTime: 00:00.332, Memory: 30.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::getCategories() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:92\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:15 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(858)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(858)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 7, Assertions: 14, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    protected function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":149},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return $this\n      *\/\n-    public function setCategories(Collection $categories) : static\n+    protected function setCategories(Collection $categories) : static\n     {\n         $this->categories = $categories;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2c7798e645ee66eecf75eb5ee5251864.infection.xml\n\nEE.EEEEEEE                                                        10 \/ 10 (100%)\n\nTime: 00:00.197, Memory: 22.00 MB\n\nThere were 9 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:131\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:59\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:215\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:215\n\n5) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:51\n\/app\/tests\/Repository\/BookRepositoryTest.php:32\n\n6) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:169\n\n7) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:52\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\n8) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:72\n\n9) App\\Tests\\Controller\\BookControllerTest::testBookById\nError: Call to protected method App\\Entity\\Book::setCategories() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:130\n\nERRORS!\nTests: 10, Assertions: 2, Errors: 9.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    protected function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":161},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->isbn;\n     }\n-    public function setIsbn(?string $isbn) : static\n+    protected function setIsbn(?string $isbn) : static\n     {\n         $this->isbn = $isbn;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.8e5b6ecbcd26f4fe43915503e90980b6.infection.xml\n\nEEE.EEEEEEE                                                       11 \/ 11 (100%)\n\nTime: 00:00.198, Memory: 22.00 MB\n\nThere were 10 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Mapper\\BookMapperTest\n\n\/app\/tests\/Mapper\/BookMapperTest.php:20\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:62\n\n3) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:135\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:219\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:219\n\n6) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:50\n\/app\/tests\/Repository\/BookRepositoryTest.php:32\n\n7) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:55\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\n8) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:75\n\n9) App\\Tests\\Controller\\BookControllerTest::testBookById\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:133\n\n10) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::setIsbn() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:172\n\nERRORS!\nTests: 11, Assertions: 2, Errors: 10.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    protected function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":168},"diff":"--- Original\n+++ New\n@@ @@\n         $this->isbn = $isbn;\n         return $this;\n     }\n-    public function getDescription() : ?string\n+    protected function getDescription() : ?string\n     {\n         return $this->description;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7fe64b5332ee13c13b4cf0bb75210fa9.infection.xml\n\n...EE..F\n\nTime: 00:00.347, Memory: 32.50 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::getDescription() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:27\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::getDescription() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:27\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:16 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Mapper\\\\BookMapper::mapRecommendations(Object(App\\\\Entity\\\\Book))\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(63): array_map(Array, Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(861)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(861)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 8, Assertions: 13, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    protected function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":173},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->description;\n     }\n-    public function setDescription(?string $description) : static\n+    protected function setDescription(?string $description) : static\n     {\n         $this->description = $description;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3fdd4324d646831a2cd4ef4c38a80ce9.infection.xml\n\nEEE.EEEEEEE                                                       11 \/ 11 (100%)\n\nTime: 00:00.203, Memory: 22.00 MB\n\nThere were 10 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Mapper\\BookMapperTest\n\n\/app\/tests\/Mapper\/BookMapperTest.php:21\n\n2) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:136\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:63\n\n4) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:220\n\n5) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:220\n\n6) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:49\n\/app\/tests\/Repository\/BookRepositoryTest.php:32\n\n7) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:56\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\n8) App\\Tests\\Controller\\BookControllerTest::testBookById\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:134\n\n9) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:76\n\n10) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nError: Call to protected method App\\Entity\\Book::setDescription() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:173\n\nERRORS!\nTests: 11, Assertions: 2, Errors: 10.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    protected function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":180},"diff":"--- Original\n+++ New\n@@ @@\n         $this->description = $description;\n         return $this;\n     }\n-    public function getFormats() : Collection\n+    protected function getFormats() : Collection\n     {\n         return $this->formats;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.41c6cc127245db5ad1bc3299fa690344.infection.xml\n\n.E....F\n\nTime: 00:00.296, Memory: 30.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::getFormats() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:81\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:17 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(863)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(863)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 7, Assertions: 14, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    protected function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":185},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->formats;\n     }\n-    public function setFormats(Collection $formats) : static\n+    protected function setFormats(Collection $formats) : static\n     {\n         $this->formats = $formats;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c458a33119e70923a4ffd2e92117c916.infection.xml\n\nE..EE                                                               5 \/ 5 (100%)\n\nTime: 00:00.073, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\Book::setFormats() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:132\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Entity\\Book::setFormats() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:216\n\n3) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Entity\\Book::setFormats() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:216\n\nERRORS!\nTests: 5, Assertions: 5, Errors: 3."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    protected function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookCategory.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     private ?string $title = null;\n     #[ORM\\Column(length: 125)]\n     private ?string $slug = null;\n-    public function getId() : ?int\n+    protected function getId() : ?int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d837df9a5c6bde301329394d194d5847.infection.xml\n\nEE.E..F                                                             7 \/ 7 (100%)\n\nTime: 00:00.904, Memory: 34.50 MB\n\nThere were 3 errors:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nError: Call to protected method App\\Entity\\BookCategory::getId() from scope App\\Service\\BookCategoryService\n\n\/app\/src\/Service\/BookCategoryService.php:23\n\/app\/src\/Service\/BookCategoryService.php:21\n\/app\/tests\/Service\/BookCategoryServiceTest.php:34\n\n2) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\BookCategory::getId() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:38\n\n3) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\BookCategory::getId() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:64\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:18 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Service\\\\BookCategoryService->App\\\\Service\\\\{closure}(Object(App\\\\Entity\\\\BookCategory))\\n#1 \\\/app\\\/src\\\/Service\\\/BookCategoryService.php(21): array_map(Object(Closure), Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookCategoryController.php(24): App\\\\Service\\\\BookCategoryService->findAll()\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookCategoryController->index()\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookCategoryControllerTest.php(15): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest->testIndex()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:18\n\nERRORS!\nTests: 7, Assertions: 7, Errors: 3, Failures: 1.\n\nRemaining indirect deprecation notices (11)\n\n  6x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    ...\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    3x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    protected function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookCategory.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getTitle() : ?string\n+    protected function getTitle() : ?string\n     {\n         return $this->title;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6cfac6d67016711c42db6063515b2527.infection.xml\n\nEF                                                                  2 \/ 2 (100%)\n\nTime: 00:00.909, Memory: 26.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nError: Call to protected method App\\Entity\\BookCategory::getTitle() from scope App\\Service\\BookCategoryService\n\n\/app\/src\/Service\/BookCategoryService.php:24\n\/app\/src\/Service\/BookCategoryService.php:21\n\/app\/tests\/Service\/BookCategoryServiceTest.php:34\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:20 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Service\\\\BookCategoryService->App\\\\Service\\\\{closure}(Object(App\\\\Entity\\\\BookCategory))\\n#1 \\\/app\\\/src\\\/Service\\\/BookCategoryService.php(21): array_map(Object(Closure), Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookCategoryController.php(24): App\\\\Service\\\\BookCategoryService->findAll()\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookCategoryController->index()\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookCategoryControllerTest.php(15): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest->testIndex()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:18\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    protected function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookCategory.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->title;\n     }\n-    public function setTitle(string $title) : static\n+    protected function setTitle(string $title) : static\n     {\n         $this->title = $title;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f9d8c76ac328ac27c656e3bb3601be5b.infection.xml\n\nEEE...E                                                             7 \/ 7 (100%)\n\nTime: 00:00.918, Memory: 32.50 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nError: Call to protected method App\\Entity\\BookCategory::setTitle() from scope App\\Tests\\Service\\BookCategoryServiceTest\n\n\/app\/tests\/Service\/BookCategoryServiceTest.php:23\n\n2) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\BookCategory::setTitle() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:28\n\n3) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\BookCategory::setTitle() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:46\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\n4) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nError: Call to protected method App\\Entity\\BookCategory::setTitle() from scope App\\Tests\\Controller\\BookCategoryControllerTest\n\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:12\n\nERRORS!\nTests: 7, Assertions: 6, Errors: 4.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    4x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    protected function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookCategory.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n         $this->title = $title;\n         return $this;\n     }\n-    public function getSlug() : ?string\n+    protected function getSlug() : ?string\n     {\n         return $this->slug;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4ceee3b7fbd8868bcd8cf5cf8641a435.infection.xml\n\nEF                                                                  2 \/ 2 (100%)\n\nTime: 00:00.708, Memory: 26.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nError: Call to protected method App\\Entity\\BookCategory::getSlug() from scope App\\Service\\BookCategoryService\n\n\/app\/src\/Service\/BookCategoryService.php:25\n\/app\/src\/Service\/BookCategoryService.php:21\n\/app\/tests\/Service\/BookCategoryServiceTest.php:34\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:22 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Service\\\\BookCategoryService->App\\\\Service\\\\{closure}(Object(App\\\\Entity\\\\BookCategory))\\n#1 \\\/app\\\/src\\\/Service\\\/BookCategoryService.php(21): array_map(Object(Closure), Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookCategoryController.php(24): App\\\\Service\\\\BookCategoryService->findAll()\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookCategoryController->index()\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookCategoryControllerTest.php(15): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest->testIndex()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:18\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookCategoryRepository::class)]\nclass BookCategory\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(length: 125)]\n    private ?string $slug = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : ?string\n    {\n        return $this->slug;\n    }\n    protected function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookCategory.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->slug;\n     }\n-    public function setSlug(string $slug) : static\n+    protected function setSlug(string $slug) : static\n     {\n         $this->slug = $slug;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6689e717383ffb20fdbf348ca90f7fb5.infection.xml\n\nEEE...E                                                             7 \/ 7 (100%)\n\nTime: 00:00.912, Memory: 32.50 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nError: Call to protected method App\\Entity\\BookCategory::setSlug() from scope App\\Tests\\Service\\BookCategoryServiceTest\n\n\/app\/tests\/Service\/BookCategoryServiceTest.php:23\n\n2) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to protected method App\\Entity\\BookCategory::setSlug() from scope App\\Tests\\Repository\\BookRepositoryTest\n\n\/app\/tests\/Repository\/BookRepositoryTest.php:28\n\n3) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nError: Call to protected method App\\Entity\\BookCategory::setSlug() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:46\n\/app\/tests\/Controller\/BookControllerTest.php:16\n\n4) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nError: Call to protected method App\\Entity\\BookCategory::setSlug() from scope App\\Tests\\Controller\\BookCategoryControllerTest\n\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:12\n\nERRORS!\nTests: 7, Assertions: 6, Errors: 4.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    4x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    protected function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookFormat.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     private ?string $description = null;\n     #[ORM\\Column(type: Types::STRING, length: 255)]\n     private ?string $comment = null;\n-    public function getId() : ?int\n+    protected function getId() : ?int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.43678ccfea167043daccc5a8284c51d6.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.136, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookFormat::getId() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:84\n\/app\/vendor\/doctrine\/collections\/src\/ArrayCollection.php:361\n\/app\/src\/Service\/BookService.php:82\n\/app\/tests\/Service\/BookServiceTest.php:177\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    protected function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookFormat.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getTitle() : ?string\n+    protected function getTitle() : ?string\n     {\n         return $this->title;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.03967b2f295110b5f304a4ce15ec7a72.infection.xml\n\n.E...                                                               5 \/ 5 (100%)\n\nTime: 00:00.068, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookFormat::getTitle() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:85\n\/app\/vendor\/doctrine\/collections\/src\/ArrayCollection.php:361\n\/app\/src\/Service\/BookService.php:82\n\/app\/tests\/Service\/BookServiceTest.php:177\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    protected function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookFormat.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->title;\n     }\n-    public function setTitle(string $title) : static\n+    protected function setTitle(string $title) : static\n     {\n         $this->title = $title;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.050881e8cdf0b4f5efcd4f8a8db4164a.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.066, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookFormat::setTitle() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:120\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    protected function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookFormat.php","originalStartLine":43},"diff":"--- Original\n+++ New\n@@ @@\n         $this->title = $title;\n         return $this;\n     }\n-    public function getDescription() : ?string\n+    protected function getDescription() : ?string\n     {\n         return $this->description;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.612cc90c9ebdcfcfce50ed1daa117257.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.061, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookFormat::getDescription() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:86\n\/app\/vendor\/doctrine\/collections\/src\/ArrayCollection.php:361\n\/app\/src\/Service\/BookService.php:82\n\/app\/tests\/Service\/BookServiceTest.php:177\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    protected function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookFormat.php","originalStartLine":48},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->description;\n     }\n-    public function setDescription(string $description) : static\n+    protected function setDescription(string $description) : static\n     {\n         $this->description = $description;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5a041347887cdb0a16107885eac103ed.infection.xml\n\n.E...                                                               5 \/ 5 (100%)\n\nTime: 00:00.075, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookFormat::setDescription() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:121\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    protected function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookFormat.php","originalStartLine":55},"diff":"--- Original\n+++ New\n@@ @@\n         $this->description = $description;\n         return $this;\n     }\n-    public function getComment() : ?string\n+    protected function getComment() : ?string\n     {\n         return $this->comment;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bd2a4624f69ac7b9f0e65391d6e51779.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.068, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookFormat::getComment() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:87\n\/app\/vendor\/doctrine\/collections\/src\/ArrayCollection.php:361\n\/app\/src\/Service\/BookService.php:82\n\/app\/tests\/Service\/BookServiceTest.php:177\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookFormatRepository::class)]\nclass BookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $title = null;\n    #[ORM\\Column(type: Types::TEXT)]\n    private ?string $description = null;\n    #[ORM\\Column(type: Types::STRING, length: 255)]\n    private ?string $comment = null;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : ?string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    protected function setComment(string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookFormat.php","originalStartLine":60},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->comment;\n     }\n-    public function setComment(string $comment) : static\n+    protected function setComment(string $comment) : static\n     {\n         $this->comment = $comment;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.30703cf0b36dbd192937810d9f767b47.infection.xml\n\n.E...                                                               5 \/ 5 (100%)\n\nTime: 00:00.087, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookFormat::setComment() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:122\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    protected function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getPrice() : ?float\n+    protected function getPrice() : ?float\n     {\n         return $this->price;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bcef5f9ed02318280e4bcc666f6b1383.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.109, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookRelationToBookFormat::getPrice() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:88\n\/app\/vendor\/doctrine\/collections\/src\/ArrayCollection.php:361\n\/app\/src\/Service\/BookService.php:82\n\/app\/tests\/Service\/BookServiceTest.php:177\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    protected function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->price;\n     }\n-    public function setPrice(float $price) : static\n+    protected function setPrice(float $price) : static\n     {\n         $this->price = $price;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.145935827165f47045e75e69f075bda7.infection.xml\n\n.E...                                                               5 \/ 5 (100%)\n\nTime: 00:00.076, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookRelationToBookFormat::setPrice() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:125\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    protected function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":48},"diff":"--- Original\n+++ New\n@@ @@\n         $this->price = $price;\n         return $this;\n     }\n-    public function getDiscountPercent() : ?int\n+    protected function getDiscountPercent() : ?int\n     {\n         return $this->discountPercent;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a0c39ea32b74a445cf6039b362f64f94.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.074, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookRelationToBookFormat::getDiscountPercent() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:89\n\/app\/vendor\/doctrine\/collections\/src\/ArrayCollection.php:361\n\/app\/src\/Service\/BookService.php:82\n\/app\/tests\/Service\/BookServiceTest.php:177\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    protected function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->discountPercent;\n     }\n-    public function setDiscountPercent(int $discountPercent) : static\n+    protected function setDiscountPercent(int $discountPercent) : static\n     {\n         $this->discountPercent = $discountPercent;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0c9c794eb309b8c2eae9f0173ef6d8aa.infection.xml\n\n.E...                                                               5 \/ 5 (100%)\n\nTime: 00:00.080, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookRelationToBookFormat::setDiscountPercent() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:125\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    protected function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":72},"diff":"--- Original\n+++ New\n@@ @@\n         $this->book = $book;\n         return $this;\n     }\n-    public function getFormat() : BookFormat\n+    protected function getFormat() : BookFormat\n     {\n         return $this->format;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.19d42ea2dc960dbba3757289f35489ad.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.088, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookRelationToBookFormat::getFormat() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:84\n\/app\/vendor\/doctrine\/collections\/src\/ArrayCollection.php:361\n\/app\/src\/Service\/BookService.php:82\n\/app\/tests\/Service\/BookServiceTest.php:177\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    protected function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":77},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->format;\n     }\n-    public function setFormat(BookFormat $format) : static\n+    protected function setFormat(BookFormat $format) : static\n     {\n         $this->format = $format;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6264ba15908b10af7cfd8edaa68cdcba.infection.xml\n\n.E...                                                               5 \/ 5 (100%)\n\nTime: 00:00.117, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Entity\\BookRelationToBookFormat::setFormat() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:125\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    protected function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/RefreshToken.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n     #[ORM\\Column(type: 'date_immutable')]\n     private DateTimeImmutable $createdAt;\n     #[ORM\\PrePersist]\n-    public function setCreatedAtValue() : void\n+    protected function setCreatedAtValue() : void\n     {\n         $this->createdAt = new DateTimeImmutable();\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ae52faf7a657e1bcfbcfa643dd076c1c.infection.xml\n\nF\n\nTime: 00:00.774, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:30 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Connection.php(1938): Doctrine\\\\DBAL\\\\Driver\\\\API\\\\PostgreSQL\\\\ExceptionConverter->convert(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), Object(Doctrine\\\\DBAL\\\\Query))\\n#1 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Connection.php(1880): Doctrine\\\\DBAL\\\\Connection->handleDriverException(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), Object(Doctrine\\\\DBAL\\\\Query))\\n#2 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Statement.php(194): Doctrine\\\\DBAL\\\\Connection->convertExceptionDuringQuery(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), 'INSERT INTO ref...', Array, Array)\\n#3 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Statement.php(249): Doctrine\\\\DBAL\\\\Statement->execute(NULL)\\n#4 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/Persisters\\\/Entity\\\/BasicEntityPersister.php(280): Doctrine\\\\DBAL\\\\Statement->executeStatement()\\n#5 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/UnitOfWork.php(1182): Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister->executeInserts()\\n#6 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/UnitOfWork.php(446): Doctrine\\\\ORM\\\\UnitOfWork->executeInserts()\\n#7 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/EntityManager.php(403): Doctrine\\\\ORM\\\\UnitOfWork->commit(NULL)\\n#8 \\\/app\\\/vendor\\\/gesdinet\\\/jwt-refresh-token-bundle\\\/Doctrine\\\/RefreshTokenManager.php(103): Doctrine\\\\ORM\\\\EntityManager->flush()\\n#9 \\\/app\\\/vendor\\\/gesdinet\\\/jwt-refresh-token-bundle\\\/EventListener\\\/AttachRefreshTokenOnSuccessListener.php(142): Gesdinet\\\\JWTRefreshTokenBundle\\\\Doctrine\\\\RefreshTokenManager->save(Object(App\\\\Entity\\\\RefreshToken))\\n#10 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Gesdinet\\\\JWTRefreshTokenBundle\\\\EventListener\\\\AttachRefreshTokenOnSuccessListener->attachRefreshToken(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent), 'lexik_jwt_authe...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#11 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent), 'lexik_jwt_authe...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#12 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'lexik_jwt_authe...', Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent))\\n#13 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent), 'lexik_jwt_authe...')\\n#14 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Http\\\/Authentication\\\/AuthenticationSuccessHandler.php(69): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent), 'lexik_jwt_authe...')\\n#15 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Http\\\/Authentication\\\/AuthenticationSuccessHandler.php(49): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Http\\\\Authentication\\\\AuthenticationSuccessHandler->handleAuthenticationSuccess(Object(App\\\\Entity\\\\User))\\n#16 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/CustomAuthenticationSuccessHandler.php(42): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Http\\\\Authentication\\\\AuthenticationSuccessHandler->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken))\\n#17 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/JsonLoginAuthenticator.php(117): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\CustomAuthenticationSuccessHandler->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken))\\n#18 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticator.php(73): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\JsonLoginAuthenticator->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), 'api')\\n#19 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(235): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), 'api')\\n#20 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(221): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->handleAuthenticationSuccess(Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Passport), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), NULL)\\n#21 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(158): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticator(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#22 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(140): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticators(Array, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#23 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AuthenticatorManagerListener.php(40): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->authenticateRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#24 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticatorManagerListener.php(66): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#25 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/WrappedLazyListener.php(46): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#26 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AbstractListener.php(26): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\WrappedLazyListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#27 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/TraceableFirewallListener.php(83): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AbstractListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#28 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall.php(95): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\TraceableFirewallListener->callListeners(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), Object(Generator))\\n#29 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall->onKernelRequest(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#30 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#31 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#32 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#33 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(157): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#34 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#35 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#36 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#37 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#38 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#39 \\\/app\\\/tests\\\/AbstractControllerTestCase.php(56): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array, Array, Array, '{\\\"username\\\":\\\"te...')\\n#40 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(18): App\\\\Tests\\\\AbstractControllerTestCase->auth('test@gmail.com', 'testTest')\\n#41 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#42 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#43 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#44 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#45 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#46 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#47 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#48 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#49 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#50 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#51 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#52 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/AbstractControllerTestCase.php:63\n\/app\/tests\/Controller\/AdminControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        \n        return $model;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/RefreshToken.php","originalStartLine":113},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         \/** @var RefreshToken $model *\/\n         $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n-        $model->setUser($user);\n+        \n         return $model;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b2ee1eb8892268a3ec9da81d8bf15394.infection.xml\n\nF\n\nTime: 00:00.678, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:33 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Connection.php(1938): Doctrine\\\\DBAL\\\\Driver\\\\API\\\\PostgreSQL\\\\ExceptionConverter->convert(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), Object(Doctrine\\\\DBAL\\\\Query))\\n#1 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Connection.php(1880): Doctrine\\\\DBAL\\\\Connection->handleDriverException(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), Object(Doctrine\\\\DBAL\\\\Query))\\n#2 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Statement.php(194): Doctrine\\\\DBAL\\\\Connection->convertExceptionDuringQuery(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), 'INSERT INTO ref...', Array, Array)\\n#3 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Statement.php(249): Doctrine\\\\DBAL\\\\Statement->execute(NULL)\\n#4 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/Persisters\\\/Entity\\\/BasicEntityPersister.php(280): Doctrine\\\\DBAL\\\\Statement->executeStatement()\\n#5 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/UnitOfWork.php(1182): Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister->executeInserts()\\n#6 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/UnitOfWork.php(446): Doctrine\\\\ORM\\\\UnitOfWork->executeInserts()\\n#7 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/EntityManager.php(403): Doctrine\\\\ORM\\\\UnitOfWork->commit(NULL)\\n#8 \\\/app\\\/vendor\\\/gesdinet\\\/jwt-refresh-token-bundle\\\/Doctrine\\\/RefreshTokenManager.php(103): Doctrine\\\\ORM\\\\EntityManager->flush()\\n#9 \\\/app\\\/vendor\\\/gesdinet\\\/jwt-refresh-token-bundle\\\/EventListener\\\/AttachRefreshTokenOnSuccessListener.php(142): Gesdinet\\\\JWTRefreshTokenBundle\\\\Doctrine\\\\RefreshTokenManager->save(Object(App\\\\Entity\\\\RefreshToken))\\n#10 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Gesdinet\\\\JWTRefreshTokenBundle\\\\EventListener\\\\AttachRefreshTokenOnSuccessListener->attachRefreshToken(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent), 'lexik_jwt_authe...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#11 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent), 'lexik_jwt_authe...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#12 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'lexik_jwt_authe...', Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent))\\n#13 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent), 'lexik_jwt_authe...')\\n#14 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Http\\\/Authentication\\\/AuthenticationSuccessHandler.php(69): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\AuthenticationSuccessEvent), 'lexik_jwt_authe...')\\n#15 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Http\\\/Authentication\\\/AuthenticationSuccessHandler.php(49): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Http\\\\Authentication\\\\AuthenticationSuccessHandler->handleAuthenticationSuccess(Object(App\\\\Entity\\\\User))\\n#16 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/CustomAuthenticationSuccessHandler.php(42): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Http\\\\Authentication\\\\AuthenticationSuccessHandler->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken))\\n#17 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/JsonLoginAuthenticator.php(117): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\CustomAuthenticationSuccessHandler->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken))\\n#18 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticator.php(73): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\JsonLoginAuthenticator->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), 'api')\\n#19 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(235): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), 'api')\\n#20 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(221): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->handleAuthenticationSuccess(Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Passport), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), NULL)\\n#21 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(158): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticator(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#22 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(140): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticators(Array, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#23 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AuthenticatorManagerListener.php(40): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->authenticateRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#24 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticatorManagerListener.php(66): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#25 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/WrappedLazyListener.php(46): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#26 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AbstractListener.php(26): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\WrappedLazyListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#27 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/TraceableFirewallListener.php(83): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AbstractListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#28 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall.php(95): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\TraceableFirewallListener->callListeners(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), Object(Generator))\\n#29 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall->onKernelRequest(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#30 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#31 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#32 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#33 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(157): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#34 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#35 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#36 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#37 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#38 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#39 \\\/app\\\/tests\\\/AbstractControllerTestCase.php(56): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array, Array, Array, '{\\\"username\\\":\\\"te...')\\n#40 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(18): App\\\\Tests\\\\AbstractControllerTestCase->auth('test@gmail.com', 'testTest')\\n#41 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#42 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#43 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#44 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#45 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#46 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#47 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#48 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#49 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#50 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#51 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#52 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/AbstractControllerTestCase.php:63\n\/app\/tests\/Controller\/AdminControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    protected function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $this->createdAt = new DateTimeImmutable();\n     }\n-    public function getId() : ?int\n+    protected function getId() : ?int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.255a221e78337388782d4791a32057b9.infection.xml\n\nF\n\nTime: 00:00.739, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:35 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(883, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(883, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    protected function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getRating() : int\n+    protected function getRating() : int\n     {\n         return $this->rating;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3e0317f94f7fc5f7d449fee22c801fe3.infection.xml\n\n...F\n\nTime: 00:00.880, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:36 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(887, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(887, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    protected function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->rating;\n     }\n-    public function setRating(int $rating) : static\n+    protected function setRating(int $rating) : static\n     {\n         $this->rating = $rating;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.59e5a02dfc04e3a1a6271701e1bcce0d.infection.xml\n\n...E...EEE                                                        10 \/ 10 (100%)\n\nTime: 00:00.805, Memory: 32.50 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Review::setRating() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:85\n\n2) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nError: Call to protected method App\\Entity\\Review::setRating() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:75\n\n3) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #1\nError: Call to protected method App\\Entity\\Review::setRating() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:75\n\n4) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #2\nError: Call to protected method App\\Entity\\Review::setRating() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:75\n\nERRORS!\nTests: 10, Assertions: 15, Errors: 4.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    protected function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":58},"diff":"--- Original\n+++ New\n@@ @@\n         $this->rating = $rating;\n         return $this;\n     }\n-    public function getContent() : string\n+    protected function getContent() : string\n     {\n         return $this->content;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5900b8fc6aec67eb5b1735ab0b43c357.infection.xml\n\nF\n\nTime: 00:00.695, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:39 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(892, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(892, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    protected function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":63},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->content;\n     }\n-    public function setContent(string $content) : static\n+    protected function setContent(string $content) : static\n     {\n         $this->content = $content;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.35faa6fa32abc03f74662b7bcf659940.infection.xml\n\n...E...EEE                                                        10 \/ 10 (100%)\n\nTime: 00:00.526, Memory: 32.50 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Review::setContent() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:86\n\n2) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nError: Call to protected method App\\Entity\\Review::setContent() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:76\n\n3) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #1\nError: Call to protected method App\\Entity\\Review::setContent() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:76\n\n4) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #2\nError: Call to protected method App\\Entity\\Review::setContent() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:76\n\nERRORS!\nTests: 10, Assertions: 15, Errors: 4.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    protected function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":70},"diff":"--- Original\n+++ New\n@@ @@\n         $this->content = $content;\n         return $this;\n     }\n-    public function getAuthor() : string\n+    protected function getAuthor() : string\n     {\n         return $this->author;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7f148f25737ae8ff24e6d7807c4a46df.infection.xml\n\nF\n\nTime: 00:00.345, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:40 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(897, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(897, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    protected function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":75},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->author;\n     }\n-    public function setAuthor(string $author) : static\n+    protected function setAuthor(string $author) : static\n     {\n         $this->author = $author;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.40e02ffc52f5c6868ffa1759dfb27097.infection.xml\n\n...E...EEE                                                        10 \/ 10 (100%)\n\nTime: 00:00.377, Memory: 32.50 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Review::setAuthor() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:87\n\n2) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nError: Call to protected method App\\Entity\\Review::setAuthor() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:74\n\n3) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #1\nError: Call to protected method App\\Entity\\Review::setAuthor() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:74\n\n4) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #2\nError: Call to protected method App\\Entity\\Review::setAuthor() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:74\n\nERRORS!\nTests: 10, Assertions: 15, Errors: 4.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    protected function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":82},"diff":"--- Original\n+++ New\n@@ @@\n         $this->author = $author;\n         return $this;\n     }\n-    public function getCreatedAt() : DateTimeInterface\n+    protected function getCreatedAt() : DateTimeInterface\n     {\n         return $this->createdAt;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.24ed2e876aef4fef1693c58df29e588d.infection.xml\n\nF\n\nTime: 00:00.322, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:41 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(902, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(902, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    protected function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":87},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->createdAt;\n     }\n-    public function setCreatedAt(DateTimeInterface $createdAt) : static\n+    protected function setCreatedAt(DateTimeInterface $createdAt) : static\n     {\n         $this->createdAt = $createdAt;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.683ad284518695fc3b3ddaaf0960f4fb.infection.xml\n\n...E...EEE                                                        10 \/ 10 (100%)\n\nTime: 00:00.345, Memory: 32.50 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Review::setCreatedAt() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:88\n\n2) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nError: Call to protected method App\\Entity\\Review::setCreatedAt() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:77\n\n3) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #1\nError: Call to protected method App\\Entity\\Review::setCreatedAt() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:77\n\n4) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #2\nError: Call to protected method App\\Entity\\Review::setCreatedAt() from scope App\\Tests\\Service\\ReviewServiceTest\n\n\/app\/tests\/Service\/ReviewServiceTest.php:77\n\nERRORS!\nTests: 10, Assertions: 15, Errors: 4.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    protected function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":99},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->book;\n     }\n-    public function setBook(Book $book) : static\n+    protected function setBook(Book $book) : static\n     {\n         $this->book = $book;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.89110576ac96ecf9c3fc56572234ad0b.infection.xml\n\nE...                                                                4 \/ 4 (100%)\n\nTime: 00:00.317, Memory: 32.50 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nError: Call to protected method App\\Entity\\Review::setBook() from scope App\\Tests\\Controller\\BookControllerTest\n\n\/app\/tests\/Controller\/BookControllerTest.php:84\n\nERRORS!\nTests: 4, Assertions: 6, Errors: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    4x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    protected function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Subscriber.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     #[ORM\\Column(type: 'datetime_immutable')]\n     private DateTimeInterface $createdAt;\n     #[ORM\\PrePersist]\n-    public function setCreatedAtValue() : static\n+    protected function setCreatedAtValue() : static\n     {\n         $this->createdAt = new DateTimeImmutable();\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.883fa815af2bbf39236f5026c34e2384.infection.xml\n\nF\n\nTime: 00:00.313, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribe\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:43 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Connection.php(1938): Doctrine\\\\DBAL\\\\Driver\\\\API\\\\PostgreSQL\\\\ExceptionConverter->convert(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), Object(Doctrine\\\\DBAL\\\\Query))\\n#1 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Connection.php(1880): Doctrine\\\\DBAL\\\\Connection->handleDriverException(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), Object(Doctrine\\\\DBAL\\\\Query))\\n#2 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Statement.php(194): Doctrine\\\\DBAL\\\\Connection->convertExceptionDuringQuery(Object(Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Exception), 'INSERT INTO sub...', Array, Array)\\n#3 \\\/app\\\/vendor\\\/doctrine\\\/dbal\\\/src\\\/Statement.php(249): Doctrine\\\\DBAL\\\\Statement->execute(NULL)\\n#4 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/Persisters\\\/Entity\\\/BasicEntityPersister.php(280): Doctrine\\\\DBAL\\\\Statement->executeStatement()\\n#5 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/UnitOfWork.php(1182): Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister->executeInserts()\\n#6 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/UnitOfWork.php(446): Doctrine\\\\ORM\\\\UnitOfWork->executeInserts()\\n#7 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/EntityManager.php(403): Doctrine\\\\ORM\\\\UnitOfWork->commit(NULL)\\n#8 \\\/app\\\/src\\\/Service\\\/SubscriberService.php(28): Doctrine\\\\ORM\\\\EntityManager->flush()\\n#9 \\\/app\\\/src\\\/Controller\\\/SubscriberController.php(28): App\\\\Service\\\\SubscriberService->subscribe(Object(App\\\\Model\\\\SubscriberRequest))\\n#10 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\SubscriberController->subscribe(Object(App\\\\Model\\\\SubscriberRequest))\\n#11 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#12 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#13 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#14 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#15 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#16 \\\/app\\\/tests\\\/Controller\\\/SubscriberControllerTest.php(12): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\SubscriberControllerTest->testSubscribe()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\SubscriberControllerTest))\\n#21 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#22 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#23 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#24 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#25 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#26 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#27 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#28 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/SubscriberControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    protected function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Subscriber.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function setId(int $id) : static\n+    protected function setId(int $id) : static\n     {\n         $this->id = $id;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5fa0f322d2403c06f02351b5a3358508.infection.xml\n\nF\n\nTime: 00:00.032, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribeAlreadyExist\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\SubscriberFoundException\". Message was: \"Call to protected method App\\Entity\\Subscriber::setId() from scope App\\Tests\\Service\\SubscriberServiceTest\" at\n\/app\/tests\/Service\/SubscriberServiceTest.php:38\n.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    protected function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Subscriber.php","originalStartLine":50},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->email;\n     }\n-    public function setEmail(string $email) : static\n+    protected function setEmail(string $email) : static\n     {\n         $this->email = $email;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.092225a5076e011acc48ae6d3ba6ee57.infection.xml\n\nEF\n\nTime: 00:00.033, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribe\nError: Call to protected method App\\Entity\\Subscriber::setEmail() from scope App\\Tests\\Service\\SubscriberServiceTest\n\n\/app\/tests\/Service\/SubscriberServiceTest.php:52\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribeAlreadyExist\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\SubscriberFoundException\". Message was: \"Call to protected method App\\Entity\\Subscriber::setEmail() from scope App\\Tests\\Service\\SubscriberServiceTest\" at\n\/app\/tests\/Service\/SubscriberServiceTest.php:38\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    protected function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n     #[ORM\\Column(type: 'simple_array')]\n     private array $roles;\n     \/** @phpstan-ignore-line *\/\n-    public function getId() : ?int\n+    protected function getId() : ?int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6b4de20d63f6bea2bcff1ee60ff3b718.infection.xml\n\nF\n\nTime: 00:00.254, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:43 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): App\\\\Listener\\\\JWTCreatedListener->__invoke(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\JWTCreatedEvent), 'lexik_jwt_authe...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\JWTCreatedEvent), 'lexik_jwt_authe...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'lexik_jwt_authe...', Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\JWTCreatedEvent))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\JWTCreatedEvent), 'lexik_jwt_authe...')\\n#4 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Services\\\/JWTManager.php(87): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Event\\\\JWTCreatedEvent), 'lexik_jwt_authe...')\\n#5 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Services\\\/JWTManager.php(67): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Services\\\\JWTManager->generateJwtStringAndDispatchEvents(Object(App\\\\Entity\\\\User), Array)\\n#6 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Http\\\/Authentication\\\/AuthenticationSuccessHandler.php(58): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Services\\\\JWTManager->create(Object(App\\\\Entity\\\\User))\\n#7 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Http\\\/Authentication\\\/AuthenticationSuccessHandler.php(49): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Http\\\\Authentication\\\\AuthenticationSuccessHandler->handleAuthenticationSuccess(Object(App\\\\Entity\\\\User))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/CustomAuthenticationSuccessHandler.php(42): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Http\\\\Authentication\\\\AuthenticationSuccessHandler->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/JsonLoginAuthenticator.php(117): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\CustomAuthenticationSuccessHandler->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken))\\n#10 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticator.php(73): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\JsonLoginAuthenticator->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), 'api')\\n#11 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(235): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator->onAuthenticationSuccess(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), 'api')\\n#12 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(221): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->handleAuthenticationSuccess(Object(Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken), Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Passport), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), NULL)\\n#13 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(158): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticator(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#14 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(140): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticators(Array, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#15 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AuthenticatorManagerListener.php(40): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->authenticateRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#16 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticatorManagerListener.php(66): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#17 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/WrappedLazyListener.php(46): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#18 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AbstractListener.php(26): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\WrappedLazyListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#19 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/TraceableFirewallListener.php(83): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AbstractListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#20 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall.php(95): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\TraceableFirewallListener->callListeners(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), Object(Generator))\\n#21 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall->onKernelRequest(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#22 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#23 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#24 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#25 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(157): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#26 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#27 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#28 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#29 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#30 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#31 \\\/app\\\/tests\\\/AbstractControllerTestCase.php(56): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array, Array, Array, '{\\\"username\\\":\\\"te...')\\n#32 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(18): App\\\\Tests\\\\AbstractControllerTestCase->auth('test@gmail.com', 'testTest')\\n#33 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#34 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#35 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#36 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#37 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#38 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#39 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#40 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#41 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#42 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#43 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#44 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/AbstractControllerTestCase.php:63\n\/app\/tests\/Controller\/AdminControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    protected function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->email;\n     }\n-    public function setEmail(string $email) : static\n+    protected function setEmail(string $email) : static\n     {\n         $this->email = $email;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5dfa3d062bee8a88863b7041a65e29d4.infection.xml\n\nE.EF                                                                4 \/ 4 (100%)\n\nTime: 00:00.304, Memory: 28.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Entity\\User::setEmail() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:57\n\n2) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nError: Call to protected method App\\Entity\\User::setEmail() from scope App\\Tests\\AbstractControllerTestCase\n\n\/app\/tests\/AbstractControllerTestCase.php:42\n\/app\/tests\/Controller\/AdminControllerTest.php:14\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:44 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 4, Assertions: 3, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    protected function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":56},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->firstName;\n     }\n-    public function setFirstName(?string $firstName) : static\n+    protected function setFirstName(?string $firstName) : static\n     {\n         $this->firstName = $firstName;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.55c697a5906b8ce9e62b9943c8acbc97.infection.xml\n\nE.EF                                                                4 \/ 4 (100%)\n\nTime: 00:00.290, Memory: 28.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Entity\\User::setFirstName() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:59\n\n2) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nError: Call to protected method App\\Entity\\User::setFirstName() from scope App\\Tests\\AbstractControllerTestCase\n\n\/app\/tests\/AbstractControllerTestCase.php:41\n\/app\/tests\/Controller\/AdminControllerTest.php:14\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:44 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 4, Assertions: 3, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    protected function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":68},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->lastname;\n     }\n-    public function setLastname(?string $lastname) : static\n+    protected function setLastname(?string $lastname) : static\n     {\n         $this->lastname = $lastname;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.34b5cc39037de802f09979c189724eb7.infection.xml\n\nE.EF                                                                4 \/ 4 (100%)\n\nTime: 00:00.317, Memory: 28.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Entity\\User::setLastname() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:58\n\n2) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nError: Call to protected method App\\Entity\\User::setLastname() from scope App\\Tests\\AbstractControllerTestCase\n\n\/app\/tests\/AbstractControllerTestCase.php:40\n\/app\/tests\/Controller\/AdminControllerTest.php:14\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:45 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 4, Assertions: 3, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    protected function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":75},"diff":"--- Original\n+++ New\n@@ @@\n         $this->lastname = $lastname;\n         return $this;\n     }\n-    public function setPassword(string $password) : static\n+    protected function setPassword(string $password) : static\n     {\n         $this->password = $password;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.11560b8d4db1c9e10f597faff01c8b1f.infection.xml\n\nE.EF                                                                4 \/ 4 (100%)\n\nTime: 00:00.300, Memory: 28.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Entity\\User::setPassword() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:62\n\n2) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nError: Call to protected method App\\Entity\\User::setPassword() from scope App\\Tests\\AbstractControllerTestCase\n\n\/app\/tests\/AbstractControllerTestCase.php:43\n\/app\/tests\/Controller\/AdminControllerTest.php:14\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:45 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 4, Assertions: 3, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    protected function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":98},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param string[] $roles\n      *\/\n-    public function setRoles(array $roles) : static\n+    protected function setRoles(array $roles) : static\n     {\n         $this->roles = $roles;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c6a7e90e8806ce52a40714b37e48a1b0.infection.xml\n\nEEE.EF                                                              6 \/ 6 (100%)\n\nTime: 00:00.299, Memory: 30.00 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Service\\RoleServiceTest::testGrantAdmin\nError: Call to protected method App\\Entity\\User::setRoles() from scope App\\Service\\RoleService\n\n\/app\/src\/Service\/RoleService.php:29\n\/app\/src\/Service\/RoleService.php:18\n\/app\/tests\/Service\/RoleServiceTest.php:34\n\n2) App\\Tests\\Service\\RoleServiceTest::testGrantAuthor\nError: Call to protected method App\\Entity\\User::setRoles() from scope App\\Service\\RoleService\n\n\/app\/src\/Service\/RoleService.php:29\n\/app\/src\/Service\/RoleService.php:23\n\/app\/tests\/Service\/RoleServiceTest.php:41\n\n3) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Entity\\User::setRoles() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:56\n\n4) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nError: Call to protected method App\\Entity\\User::setRoles() from scope App\\Tests\\AbstractControllerTestCase\n\n\/app\/tests\/AbstractControllerTestCase.php:44\n\/app\/tests\/Controller\/AdminControllerTest.php:14\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:46 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 6, Assertions: 3, Errors: 4, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"IfNegation","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if (!$this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     public function __invoke(ExceptionEvent $exceptionEvent) : void\n     {\n         $throwable = $exceptionEvent->getThrowable();\n-        if ($this->isSecurityException($throwable)) {\n+        if (!$this->isSecurityException($throwable)) {\n             return;\n         }\n         $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b382f6f994bda02f51400e732aba0c72.infection.xml\n\nEF\n\nTime: 00:00.454, Memory: 34.50 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nError: Call to a member function getStatusCode() on null\n\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:52\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that null matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to <text> at JSON path '$.message'\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nERRORS!\nTests: 2, Assertions: 2, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if ($mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n             return;\n         }\n         $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n-        if (!$mapping) {\n+        if ($mapping) {\n             $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n         }\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.aa243c059e0fdb472bd6e672d85334dd.infection.xml\n\nF\n\nTime: 00:00.041, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nExpectation failed for method name is \"serialize\" when invoked 1 time\nParameter 0 for invocation Symfony\\Component\\Serializer\\SerializerInterface::serialize(App\\Model\\ErrorResponse Object (...), 'json', []): string does not match expected value.\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n App\\Model\\ErrorResponse Object (\n-    'message' => 'Not Found'\n+    'message' => 'Internal Server Error'\n     'details' => null\n )\n\n\/app\/src\/Listener\/ApiExceptionListener.php:37\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:48\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nThis test did not perform any assertions\n\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:26\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1, Risky: 1."},{"mutator":{"mutatorName":"Ternary","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? $throwable->getMessage() : Response::$statusTexts[$mapping->getCode()];\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n-        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n+        $message = $mapping->isHidden() ? $throwable->getMessage() : Response::$statusTexts[$mapping->getCode()];\n         $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n         $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n         $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.32025eb589c9828e6599805cc7da0bac.infection.xml\n\nF\n\nTime: 00:00.245, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that stdClass Object #1192 (\n    'message' => 'Unprocessable Content',\n    'details' => null,\n) matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to <text> at JSON path '$.message'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && $mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n-        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n+        $details = $this->isDebug && $mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n         $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n         $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6565b0548d10c4c920ca453f06a022cf.infection.xml\n\nF\n\nTime: 00:00.242, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that stdClass Object #1196 (\n    'message' => 'This value should be of type unknown.\\n\nThis value should not be blank.\\n\nThis value should not be blank.',\n    'details' => stdClass Object #1197 (\n        'trace' => '#0 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php(116): Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#1 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(220): Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener->__invoke(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#2 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(56): Symfony\\Component\\EventDispatcher\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent))\\n\n#3 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php(139): Symfony\\Component\\EventDispatcher\\EventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#4 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(176): Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#5 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(76): Symfony\\Component\\HttpKernel\\HttpKernel->handleRaw(Object(Symfony\\Component\\HttpFoundation\\Request), 1)\\n\n#6 \/app\/vendor\/symfony\/http-kernel\/Kernel.php(197): Symfony\\Component\\HttpKernel\\HttpKernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#7 \/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php(65): Symfony\\Component\\HttpKernel\\Kernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#8 \/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php(171): Symfony\\Component\\HttpKernel\\HttpKernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#9 \/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php(403): Symfony\\Bundle\\FrameworkBundle\\KernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#10 \/app\/tests\/Controller\/SubscriberControllerTest.php(23): Symfony\\Component\\BrowserKit\\AbstractBrowser->request('POST', 'http:\/\/localhos...', Array)\\n\n#11 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(1114): App\\Tests\\Controller\\SubscriberControllerTest->testSubscribeNotAgreed()\\n\n#12 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(653): PHPUnit\\Framework\\TestCase->runTest()\\n\n#13 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestRunner.php(103): PHPUnit\\Framework\\TestCase->runBare()\\n\n#14 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(489): PHPUnit\\Framework\\TestRunner->run(Object(App\\Tests\\Controller\\SubscriberControllerTest))\\n\n#15 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestCase->run()\\n\n#16 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#17 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#18 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/TestRunner.php(63): PHPUnit\\Framework\\TestSuite->run()\\n\n#19 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/Application.php(189): PHPUnit\\TextUI\\TestRunner->run(Object(PHPUnit\\TextUI\\Configuration\\Configuration), Object(PHPUnit\\Runner\\ResultCache\\DefaultResultCache), Object(PHPUnit\\Framework\\TestSuite))\\n\n#20 \/app\/vendor\/phpunit\/phpunit\/phpunit(99): PHPUnit\\TextUI\\Application->run(Array)\\n\n#21 \/app\/vendor\/bin\/phpunit(122): include('\/app\/vendor\/php...')\\n\n#22 {main}',\n    ),\n) matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalAnd","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug || !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n-        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n+        $details = $this->isDebug || !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n         $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n         $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9ab57fa26a380c7784e3547ada9dc283.infection.xml\n\nF\n\nTime: 00:00.262, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that stdClass Object #1196 (\n    'message' => 'This value should be of type unknown.\\n\nThis value should not be blank.\\n\nThis value should not be blank.',\n    'details' => stdClass Object #1197 (\n        'trace' => '#0 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php(116): Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#1 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(220): Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener->__invoke(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#2 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(56): Symfony\\Component\\EventDispatcher\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent))\\n\n#3 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php(139): Symfony\\Component\\EventDispatcher\\EventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#4 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(176): Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#5 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(76): Symfony\\Component\\HttpKernel\\HttpKernel->handleRaw(Object(Symfony\\Component\\HttpFoundation\\Request), 1)\\n\n#6 \/app\/vendor\/symfony\/http-kernel\/Kernel.php(197): Symfony\\Component\\HttpKernel\\HttpKernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#7 \/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php(65): Symfony\\Component\\HttpKernel\\Kernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#8 \/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php(171): Symfony\\Component\\HttpKernel\\HttpKernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#9 \/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php(403): Symfony\\Bundle\\FrameworkBundle\\KernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#10 \/app\/tests\/Controller\/SubscriberControllerTest.php(23): Symfony\\Component\\BrowserKit\\AbstractBrowser->request('POST', 'http:\/\/localhos...', Array)\\n\n#11 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(1114): App\\Tests\\Controller\\SubscriberControllerTest->testSubscribeNotAgreed()\\n\n#12 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(653): PHPUnit\\Framework\\TestCase->runTest()\\n\n#13 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestRunner.php(103): PHPUnit\\Framework\\TestCase->runBare()\\n\n#14 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(489): PHPUnit\\Framework\\TestRunner->run(Object(App\\Tests\\Controller\\SubscriberControllerTest))\\n\n#15 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestCase->run()\\n\n#16 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#17 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#18 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/TestRunner.php(63): PHPUnit\\Framework\\TestSuite->run()\\n\n#19 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/Application.php(189): PHPUnit\\TextUI\\TestRunner->run(Object(PHPUnit\\TextUI\\Configuration\\Configuration), Object(PHPUnit\\Runner\\ResultCache\\DefaultResultCache), Object(PHPUnit\\Framework\\TestSuite))\\n\n#20 \/app\/vendor\/phpunit\/phpunit\/phpunit(99): PHPUnit\\TextUI\\Application->run(Array)\\n\n#21 \/app\/vendor\/bin\/phpunit(122): include('\/app\/vendor\/php...')\\n\n#22 {main}',\n    ),\n) matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalAndNegation","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = !($this->isDebug && !$mapping->isLoggable()) ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n-        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n+        $details = !($this->isDebug && !$mapping->isLoggable()) ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n         $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n         $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.98b0e52f5198330e734a31b30c66d1cd.infection.xml\n\n.F\n\nTime: 00:00.274, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that stdClass Object #1557 (\n    'message' => 'This value should be of type unknown.\\n\nThis value should not be blank.\\n\nThis value should not be blank.',\n    'details' => stdClass Object #1558 (\n        'trace' => '#0 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php(116): Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#1 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(220): Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener->__invoke(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#2 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(56): Symfony\\Component\\EventDispatcher\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent))\\n\n#3 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php(139): Symfony\\Component\\EventDispatcher\\EventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#4 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(176): Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#5 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(76): Symfony\\Component\\HttpKernel\\HttpKernel->handleRaw(Object(Symfony\\Component\\HttpFoundation\\Request), 1)\\n\n#6 \/app\/vendor\/symfony\/http-kernel\/Kernel.php(197): Symfony\\Component\\HttpKernel\\HttpKernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#7 \/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php(65): Symfony\\Component\\HttpKernel\\Kernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#8 \/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php(171): Symfony\\Component\\HttpKernel\\HttpKernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#9 \/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php(403): Symfony\\Bundle\\FrameworkBundle\\KernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#10 \/app\/tests\/Controller\/SubscriberControllerTest.php(23): Symfony\\Component\\BrowserKit\\AbstractBrowser->request('POST', 'http:\/\/localhos...', Array)\\n\n#11 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(1114): App\\Tests\\Controller\\SubscriberControllerTest->testSubscribeNotAgreed()\\n\n#12 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(653): PHPUnit\\Framework\\TestCase->runTest()\\n\n#13 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestRunner.php(103): PHPUnit\\Framework\\TestCase->runBare()\\n\n#14 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(489): PHPUnit\\Framework\\TestRunner->run(Object(App\\Tests\\Controller\\SubscriberControllerTest))\\n\n#15 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestCase->run()\\n\n#16 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#17 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#18 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/TestRunner.php(63): PHPUnit\\Framework\\TestSuite->run()\\n\n#19 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/Application.php(189): PHPUnit\\TextUI\\TestRunner->run(Object(PHPUnit\\TextUI\\Configuration\\Configuration), Object(PHPUnit\\Runner\\ResultCache\\DefaultResultCache), Object(PHPUnit\\Framework\\TestSuite))\\n\n#20 \/app\/vendor\/phpunit\/phpunit\/phpunit(99): PHPUnit\\TextUI\\Application->run(Array)\\n\n#21 \/app\/vendor\/bin\/phpunit(122): include('\/app\/vendor\/php...')\\n\n#22 {main}',\n    ),\n) matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Ternary","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? null : new ErrorDebugDetails($throwable->getTraceAsString());\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n         }\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n-        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n+        $details = $this->isDebug && !$mapping->isLoggable() ? null : new ErrorDebugDetails($throwable->getTraceAsString());\n         $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n         $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1dc847a79d9a2f215fad2289b2d695da.infection.xml\n\nF\n\nTime: 00:00.282, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that stdClass Object #1196 (\n    'message' => 'This value should be of type unknown.\\n\nThis value should not be blank.\\n\nThis value should not be blank.',\n    'details' => stdClass Object #1197 (\n        'trace' => '#0 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php(116): Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#1 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(220): Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener->__invoke(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#2 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(56): Symfony\\Component\\EventDispatcher\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent))\\n\n#3 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php(139): Symfony\\Component\\EventDispatcher\\EventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#4 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(176): Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#5 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(76): Symfony\\Component\\HttpKernel\\HttpKernel->handleRaw(Object(Symfony\\Component\\HttpFoundation\\Request), 1)\\n\n#6 \/app\/vendor\/symfony\/http-kernel\/Kernel.php(197): Symfony\\Component\\HttpKernel\\HttpKernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#7 \/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php(65): Symfony\\Component\\HttpKernel\\Kernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#8 \/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php(171): Symfony\\Component\\HttpKernel\\HttpKernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#9 \/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php(403): Symfony\\Bundle\\FrameworkBundle\\KernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#10 \/app\/tests\/Controller\/SubscriberControllerTest.php(23): Symfony\\Component\\BrowserKit\\AbstractBrowser->request('POST', 'http:\/\/localhos...', Array)\\n\n#11 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(1114): App\\Tests\\Controller\\SubscriberControllerTest->testSubscribeNotAgreed()\\n\n#12 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(653): PHPUnit\\Framework\\TestCase->runTest()\\n\n#13 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestRunner.php(103): PHPUnit\\Framework\\TestCase->runBare()\\n\n#14 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(489): PHPUnit\\Framework\\TestRunner->run(Object(App\\Tests\\Controller\\SubscriberControllerTest))\\n\n#15 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestCase->run()\\n\n#16 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#17 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#18 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/TestRunner.php(63): PHPUnit\\Framework\\TestSuite->run()\\n\n#19 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/Application.php(189): PHPUnit\\TextUI\\TestRunner->run(Object(PHPUnit\\TextUI\\Configuration\\Configuration), Object(PHPUnit\\Runner\\ResultCache\\DefaultResultCache), Object(PHPUnit\\Framework\\TestSuite))\\n\n#20 \/app\/vendor\/phpunit\/phpunit\/phpunit(99): PHPUnit\\TextUI\\Application->run(Array)\\n\n#21 \/app\/vendor\/bin\/phpunit(122): include('\/app\/vendor\/php...')\\n\n#22 {main}',\n    ),\n) matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"TrueValue","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: false));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n         $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n         $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n-        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n+        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: false));\n     }\n     private function isSecurityException(Throwable $throwable) : bool\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.dab9c5a879a2789185784217650e484b.infection.xml\n\n..F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.288, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nFailed asserting that '\"{\\u0022error\\u0022:\\u0022Not Found\\u0022}\"' matches JSON string \"{\"error\":\"Not Found\"}\".\n--- Expected\n+++ Actual\n@@ @@\n-{\n-    \"error\": \"Not Found\"\n-}\n+\"{\\\"error\\\":\\\"Not Found\\\"}\"\n\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:54\n\nFAILURES!\nTests: 3, Assertions: 8, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        \n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n         $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n         $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n         $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n-        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n+        \n     }\n     private function isSecurityException(Throwable $throwable) : bool\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.015413d46e9ce1e7003e195ace8833d0.infection.xml\n\nEF\n\nTime: 00:00.420, Memory: 34.50 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nError: Call to a member function getStatusCode() on null\n\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:52\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that null matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to <text> at JSON path '$.message'\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nERRORS!\nTests: 2, Assertions: 2, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return true;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":62},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isSecurityException(Throwable $throwable) : bool\n     {\n-        return $throwable instanceof AuthenticationException;\n+        return true;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b344fc5619716199a3945bea050afd7a.infection.xml\n\nE.F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.450, Memory: 34.50 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nError: Call to a member function getStatusCode() on null\n\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:52\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that null matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to <text> at JSON path '$.message'\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Entity\\User;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Event\\JWTCreatedEvent;\nclass JWTCreatedListener\n{\n    public function __invoke(JWTCreatedEvent $createdEvent) : void\n    {\n        \/** @var User $user *\/\n        $user = $createdEvent->getUser();\n        $payload = $createdEvent->getData();\n        $payload['id'] = $user->getId();\n        $createdEvent->setData($payload);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Entity\\User;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Event\\JWTCreatedEvent;\nclass JWTCreatedListener\n{\n    public function __invoke(JWTCreatedEvent $createdEvent) : void\n    {\n        \/** @var User $user *\/\n        $user = $createdEvent->getUser();\n        $payload = $createdEvent->getData();\n        $payload['id'] = $user->getId();\n        \n    }\n}","originalFilePath":"\/app\/src\/Listener\/JWTCreatedListener.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n         $user = $createdEvent->getUser();\n         $payload = $createdEvent->getData();\n         $payload['id'] = $user->getId();\n-        $createdEvent->setData($payload);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6fd35ab8ee319e9d10ca5e82cbb65599.infection.xml\n\n\nWarning: Undefined array key \"id\" in \/app\/src\/Security\/JWTUserProvider.php on line 45\nF\n\nTime: 00:00.270, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:59 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Security\\\/JWTUserProvider.php(45): App\\\\Security\\\\JWTUserProvider->getUser('id', NULL)\\n#1 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Authenticator\\\/JWTAuthenticator.php(215): App\\\\Security\\\\JWTUserProvider->loadUserByIdentifierAndPayload('test@gmail.com', Array)\\n#2 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Authenticator\\\/JWTAuthenticator.php(132): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Authenticator\\\\JWTAuthenticator->loadUser(Array, 'test@gmail.com')\\n#3 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Passport\\\/Badge\\\/UserBadge.php(87): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Authenticator\\\\JWTAuthenticator->Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Authenticator\\\\{closure}('test@gmail.com')\\n#4 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Passport\\\/Passport.php(56): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Badge\\\\UserBadge->getUser()\\n#5 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/EventListener\\\/UserCheckerListener.php(42): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Passport->getUser()\\n#6 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\EventListener\\\\UserCheckerListener->preCheckCredentials(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...')\\n#10 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(180): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent))\\n#11 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(158): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticator(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#12 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(140): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticators(Array, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#13 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AuthenticatorManagerListener.php(40): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->authenticateRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#14 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticatorManagerListener.php(66): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#15 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/WrappedLazyListener.php(46): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#16 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AbstractListener.php(26): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\WrappedLazyListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#17 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/TraceableFirewallListener.php(83): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AbstractListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#18 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall.php(95): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\TraceableFirewallListener->callListeners(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), Object(Generator))\\n#19 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall->onKernelRequest(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#20 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#21 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#22 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#23 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(157): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#24 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#25 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#26 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#27 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#28 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#29 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(20): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...')\\n#30 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#31 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#32 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#33 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#34 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#35 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#36 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#37 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#38 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#39 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#40 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#41 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AdminControllerTest.php:22\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    protected static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n use DateTimeInterface;\n class BookMapper\n {\n-    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n+    protected static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n     {\n         return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.269a462e1fbd048598ee82f395fc26b4.infection.xml\n\nEEE.....F\n\nTime: 00:00.337, Memory: 34.50 MB\n\nThere were 3 errors:\n\n1) App\\Tests\\Mapper\\BookMapperTest::testMap\nError: Call to protected method App\\Mapper\\BookMapper::map() from scope App\\Tests\\Mapper\\BookMapperTest\n\n\/app\/tests\/Mapper\/BookMapperTest.php:27\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nError: Call to protected method App\\Mapper\\BookMapper::map() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:47\n\/app\/src\/Service\/BookService.php:45\n\/app\/tests\/Service\/BookServiceTest.php:104\n\n3) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Mapper\\BookMapper::map() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:100\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:02:59 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Service\\\\BookService->App\\\\Service\\\\{closure}(Object(App\\\\Entity\\\\Book))\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(45): array_map(Object(Closure), Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(31): App\\\\Service\\\\BookService->findBooksByCategory(329)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByCategory(329)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(17): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByCategory()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:20\n\nERRORS!\nTests: 9, Assertions: 13, Errors: 3, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    protected static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n     }\n-    public static function mapRecommendations(Book $book) : RecommendedBook\n+    protected static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n         $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7e279c396768f1cdb19419c8e81bf17c.infection.xml\n\n...EE...F                                                           9 \/ 9 (100%)\n\nTime: 00:00.373, Memory: 34.50 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nTypeError: array_map(): Argument #1 ($callback) must be a valid callback or null, cannot access protected method App\\Mapper\\BookMapper::mapRecommendations()\n\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nTypeError: array_map(): Argument #1 ($callback) must be a valid callback or null, cannot access protected method App\\Mapper\\BookMapper::mapRecommendations()\n\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:03 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(63): array_map(Array, Array)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(931)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(931)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 9, Assertions: 15, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"CastString","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n-        $description = (string) $book->getDescription();\n+        $description = $book->getDescription();\n         $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d8adb13f5d7bbea3d3724d4e34a361fc.infection.xml\n\n......F\n\nTime: 00:00.340, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:00 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Mapper\\\/BookMapper.php(20): App\\\\Model\\\\RecommendedBook->setDescription(NULL)\\n#1 [internal function]: App\\\\Mapper\\\\BookMapper::mapRecommendations(Object(App\\\\Entity\\\\Book))\\n#2 \\\/app\\\/src\\\/Service\\\/BookService.php(63): array_map(Array, Array)\\n#3 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(915)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(915)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 7, Assertions: 17, Failures: 1.\n\nRemaining self deprecation notices (1)\n\n  1x: mb_strlen(): Passing null to parameter #1 ($string) of type string is deprecated\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"GreaterThanNegotiation","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) <= 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) <= 150 ? mb_substr($description, 0, 150) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0f4b8abe88e008425b8902520673845b.infection.xml\n\n...F\n\nTime: 00:00.042, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'id' => 5\n             'title' => 'test'\n             'slug' => 'test'\n-            'description' => 'short description'\n+            'description' => 'short description...'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 4, Assertions: 9, Failures: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, -1, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? mb_substr($description, -1, 150) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9ab7e6ba7b2ec0cd0381f7e1a8b0bc2a.infection.xml\n\n....F\n\nTime: 00:00.041, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'id' => 5\n             'title' => 'test'\n             'slug' => 'test'\n-            'description' => '   urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n-               Donec placerat pellentesque libero, non mollis justo egestas nec.\\n\n-               Aen...'\n+            'description' => 'e...'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 5, Assertions: 12, Failures: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 1, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? mb_substr($description, 1, 150) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.58974eaedcddeda3a59142b10f312c46.infection.xml\n\n....F\n\nTime: 00:00.040, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'id' => 5\n             'title' => 'test'\n             'slug' => 'test'\n-            'description' => '   urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n+            'description' => '  urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n                Donec placerat pellentesque libero, non mollis justo egestas nec.\\n\n-               Aen...'\n+               Aene...'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 5, Assertions: 12, Failures: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 149) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 149) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.334089330ea80bbc7272b249532182be.infection.xml\n\n....F\n\nTime: 00:00.040, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'slug' => 'test'\n             'description' => '   urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n                Donec placerat pellentesque libero, non mollis justo egestas nec.\\n\n-               Aen...'\n+               Ae...'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 5, Assertions: 12, Failures: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 151) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 151) . '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c809fbe8a49d729bef2f10e71b671f70.infection.xml\n\n....F\n\nTime: 00:00.040, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'slug' => 'test'\n             'description' => '   urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n                Donec placerat pellentesque libero, non mollis justo egestas nec.\\n\n-               Aen...'\n+               Aene...'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 5, Assertions: 12, Failures: 1."},{"mutator":{"mutatorName":"Concat","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? '...' . mb_substr($description, 0, 150) : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? '...' . mb_substr($description, 0, 150) : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c5dbb6f3bf48097ca27aaac3d57ed522.infection.xml\n\n....F\n\nTime: 00:00.043, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'id' => 5\n             'title' => 'test'\n             'slug' => 'test'\n-            'description' => '   urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n+            'description' => '...   urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n                Donec placerat pellentesque libero, non mollis justo egestas nec.\\n\n-               Aen...'\n+               Aen'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 5, Assertions: 12, Failures: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? '...' : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ba01b902ceddd53d5ea3e7723863daa7.infection.xml\n\n....F\n\nTime: 00:00.040, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'id' => 5\n             'title' => 'test'\n             'slug' => 'test'\n-            'description' => '   urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n-               Donec placerat pellentesque libero, non mollis justo egestas nec.\\n\n-               Aen...'\n+            'description' => '...'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 5, Assertions: 12, Failures: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) : $description;\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c8f88d98e9666ea3d9dfda6d6feb13fd.infection.xml\n\n....F\n\nTime: 00:00.042, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'slug' => 'test'\n             'description' => '   urabitur facilisis consequat quam, nec venenatis leo pellentesque eget.\\n\n                Donec placerat pellentesque libero, non mollis justo egestas nec.\\n\n-               Aen...'\n+               Aen'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 5, Assertions: 12, Failures: 1."},{"mutator":{"mutatorName":"Ternary","originalSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Mapper;\n\nuse App\\Entity\\Book;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListItem;\nuse App\\Model\\RecommendedBook;\nuse DateTimeInterface;\nclass BookMapper\n{\n    public static function map(Book $book, string $viewModel) : BookDetails|BookListItem\n    {\n        return new $viewModel(id: $book->getId(), title: $book->getTitle(), slug: $book->getSlug(), image: $book->getImage(), authors: $book->getAuthors(), publicationDate: $book->getPublicationDate()->format(DateTimeInterface::ATOM));\n    }\n    public static function mapRecommendations(Book $book) : RecommendedBook\n    {\n        $description = (string) $book->getDescription();\n        $description = mb_strlen($description) > 150 ? $description : mb_substr($description, 0, 150) . '...';\n        return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n    }\n}","originalFilePath":"\/app\/src\/Mapper\/BookMapper.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     public static function mapRecommendations(Book $book) : RecommendedBook\n     {\n         $description = (string) $book->getDescription();\n-        $description = mb_strlen($description) > 150 ? mb_substr($description, 0, 150) . '...' : $description;\n+        $description = mb_strlen($description) > 150 ? $description : mb_substr($description, 0, 150) . '...';\n         return (new RecommendedBook())->setId($book->getId())->setTitle($book->getTitle())->setSlug($book->getSlug())->setDescription($description);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9ebe38d007eb9b56faf245e81c307172.infection.xml\n\n...F\n\nTime: 00:00.040, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n             'id' => 5\n             'title' => 'test'\n             'slug' => 'test'\n-            'description' => 'short description'\n+            'description' => 'short description...'\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 4, Assertions: 9, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookCategoryListResponse\n{\n    \/**\n     * @param BookCategoryListItem[] $items\n     *\/\n    public function __construct(private array $items)\n    {\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookCategoryListResponse\n{\n    \/**\n     * @param BookCategoryListItem[] $items\n     *\/\n    public function __construct(private array $items)\n    {\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    protected function getItems() : array\n    {\n        return $this->items;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookCategoryListResponse.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return BookCategoryListItem[]\n      *\/\n-    public function getItems() : array\n+    protected function getItems() : array\n     {\n         return $this->items;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a7cd57d949ec84e2199a83e9b4d683fc.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.246, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nFailed asserting that Array &0 [] matches JSON schema.\n[] Array value found, but an object is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:19\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     )\n     {\n     }\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d2872f097775c49c9261e472b7c3a770.infection.xml\n\n.F\n\nTime: 00:00.280, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1653 (\n    'title' => 'test',\n    'slug' => 'test',\n    'image' => 'default.png',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'rating' => 0,\n    'review' => 0,\n    'categories' => Array &1 [],\n    'formats' => Array &2 [],\n) matches JSON schema.\n[id] The property id is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 2, Assertions: 4, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    protected function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n         $this->id = $id;\n         return $this;\n     }\n-    public function getTitle() : string\n+    protected function getTitle() : string\n     {\n         return $this->title;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9184ef3ba25d56240ac0f9794c2b7165.infection.xml\n\n..F\n\nTime: 00:00.296, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 956,\n    'slug' => 'test',\n    'image' => 'default.png',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'rating' => 0,\n    'review' => 0,\n    'categories' => Array &1 [],\n    'formats' => Array &2 [],\n) matches JSON schema.\n[title] The property title is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    protected function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":48},"diff":"--- Original\n+++ New\n@@ @@\n         $this->title = $title;\n         return $this;\n     }\n-    public function getSlug() : string\n+    protected function getSlug() : string\n     {\n         return $this->slug;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6ef8c52e9a7dc2aa72e77432e6a81e29.infection.xml\n\n..F\n\nTime: 00:00.279, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 959,\n    'title' => 'test',\n    'image' => 'default.png',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'rating' => 0,\n    'review' => 0,\n    'categories' => Array &1 [],\n    'formats' => Array &2 [],\n) matches JSON schema.\n[slug] The property slug is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    protected function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":60},"diff":"--- Original\n+++ New\n@@ @@\n         $this->slug = $slug;\n         return $this;\n     }\n-    public function getImage() : string\n+    protected function getImage() : string\n     {\n         return $this->image;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7f7fee3dace389b232b358d5f08caf08.infection.xml\n\n..F\n\nTime: 00:00.284, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 962,\n    'title' => 'test',\n    'slug' => 'test',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'rating' => 0,\n    'review' => 0,\n    'categories' => Array &1 [],\n    'formats' => Array &2 [],\n) matches JSON schema.\n[image] The property image is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    protected function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":75},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return string[]\n      *\/\n-    public function getAuthors() : array\n+    protected function getAuthors() : array\n     {\n         return $this->authors;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.dccc0af13541cf08bda88704d121f82d.infection.xml\n\n..F\n\nTime: 00:00.300, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 965,\n    'title' => 'test',\n    'slug' => 'test',\n    'image' => 'default.png',\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'rating' => 0,\n    'review' => 0,\n    'categories' => Array &0 [],\n    'formats' => Array &1 [],\n) matches JSON schema.\n[authors] The property authors is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    protected function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":90},"diff":"--- Original\n+++ New\n@@ @@\n         $this->authors = $authors;\n         return $this;\n     }\n-    public function getPublicationDate() : string\n+    protected function getPublicationDate() : string\n     {\n         return $this->publicationDate;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.79e44cbc0cec04609a247148bd68f5db.infection.xml\n\n..F\n\nTime: 00:00.284, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 968,\n    'title' => 'test',\n    'slug' => 'test',\n    'image' => 'default.png',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'rating' => 0,\n    'review' => 0,\n    'categories' => Array &1 [],\n    'formats' => Array &2 [],\n) matches JSON schema.\n[publicationDate] The property publicationDate is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    protected function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":102},"diff":"--- Original\n+++ New\n@@ @@\n         $this->publicationDate = $publicationDate;\n         return $this;\n     }\n-    public function getRating() : float\n+    protected function getRating() : float\n     {\n         return $this->rating;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ff48eeb23a8bc1a4fd8782986e78b27b.infection.xml\n\n..F\n\nTime: 00:00.285, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 971,\n    'title' => 'test',\n    'slug' => 'test',\n    'image' => 'default.png',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'review' => 0,\n    'categories' => Array &1 [],\n    'formats' => Array &2 [],\n) matches JSON schema.\n[rating] The property rating is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    protected function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":107},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->rating;\n     }\n-    public function setRating(float $rating) : static\n+    protected function setRating(float $rating) : static\n     {\n         $this->rating = $rating;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.20738f6afbd6cca9277ff42bc836a71e.infection.xml\n\n.E.....F\n\nTime: 00:00.330, Memory: 30.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookDetails::setRating() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:104\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:11 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(974)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(974)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 8, Assertions: 16, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    protected function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":114},"diff":"--- Original\n+++ New\n@@ @@\n         $this->rating = $rating;\n         return $this;\n     }\n-    public function getReview() : int\n+    protected function getReview() : int\n     {\n         return $this->review;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7b7b11f2a15a5620d41420702a58fb1d.infection.xml\n\n..F\n\nTime: 00:00.298, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 977,\n    'title' => 'test',\n    'slug' => 'test',\n    'image' => 'default.png',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'rating' => 0,\n    'categories' => Array &1 [],\n    'formats' => Array &2 [],\n) matches JSON schema.\n[review] The property review is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    protected function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":119},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->review;\n     }\n-    public function setReview(int $review) : static\n+    protected function setReview(int $review) : static\n     {\n         $this->review = $review;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ecacf3c21431a1355fcf70395ed5311c.infection.xml\n\nE......F\n\nTime: 00:00.308, Memory: 30.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookDetails::setReview() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:101\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:12 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(980)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(980)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 8, Assertions: 16, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    protected function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":129},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return BookCategoryListItem[]\n      *\/\n-    public function getCategories() : array\n+    protected function getCategories() : array\n     {\n         return $this->categories;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.027698898532741f51ebe8d7670b1133.infection.xml\n\n..F\n\nTime: 00:00.302, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 983,\n    'title' => 'test',\n    'slug' => 'test',\n    'image' => 'default.png',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'rating' => 0,\n    'review' => 0,\n    'formats' => Array &1 [],\n) matches JSON schema.\n[categories] The property categories is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    protected function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":137},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param BookCategoryListItem[] $categories\n      *\/\n-    public function setCategories(array $categories) : static\n+    protected function setCategories(array $categories) : static\n     {\n         $this->categories = $categories;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.78d346467d59a888b45febff13c1d85f.infection.xml\n\n.E.....F\n\nTime: 00:00.304, Memory: 30.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookDetails::setCategories() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:102\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:13 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(986)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(986)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 8, Assertions: 16, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    protected function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":147},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return BookFormatListItem[]\n      *\/\n-    public function getFormats() : array\n+    protected function getFormats() : array\n     {\n         return $this->formats;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c8c5c9a53af57e531efa1983da27bd4c.infection.xml\n\n..F\n\nTime: 00:00.291, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that stdClass Object #1982 (\n    'id' => 989,\n    'title' => 'test',\n    'slug' => 'test',\n    'image' => 'default.png',\n    'authors' => Array &0 [\n        0 => 'lorem',\n    ],\n    'publicationDate' => '2023-12-12T00:00:00+00:00',\n    'rating' => 0,\n    'review' => 0,\n    'categories' => Array &1 [],\n) matches JSON schema.\n[formats] The property formats is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:146\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    protected function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":155},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param BookFormatListItem[] $formats\n      *\/\n-    public function setFormats(array $formats) : static\n+    protected function setFormats(array $formats) : static\n     {\n         $this->formats = $formats;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.07c329d071102d35262375858525d6ad.infection.xml\n\nE......F\n\nTime: 00:00.325, Memory: 30.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookDetails::setFormats() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:103\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:14 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(992)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(992)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 8, Assertions: 16, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    protected function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function setId(int $id) : static\n+    protected function setId(int $id) : static\n     {\n         $this->id = $id;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.df8997e174cdf03b40ab82fae6291c4f.infection.xml\n\n.E...                                                               5 \/ 5 (100%)\n\nTime: 00:00.046, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookFormatListItem::setId() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:112\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    protected function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->title;\n     }\n-    public function setTitle(string $title) : static\n+    protected function setTitle(string $title) : static\n     {\n         $this->title = $title;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.46b5a71afd88c03c8e0997d3a1c6f6c3.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.036, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookFormatListItem::setTitle() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:113\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    protected function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":43},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->description;\n     }\n-    public function setDescription(?string $description) : static\n+    protected function setDescription(?string $description) : static\n     {\n         $this->description = $description;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b9a8d1351481de3b5e2e651eb93fe9a9.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.044, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookFormatListItem::setDescription() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:114\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    protected function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":55},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->comment;\n     }\n-    public function setComment(?string $comment) : static\n+    protected function setComment(?string $comment) : static\n     {\n         $this->comment = $comment;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ea17d4f2cc7c05e6ae06be219e1eb8ad.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.037, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookFormatListItem::setComment() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:115\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    protected function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":67},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->price;\n     }\n-    public function setPrice(float $price) : static\n+    protected function setPrice(float $price) : static\n     {\n         $this->price = $price;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f24c114bcc5c1c079e17e46c8865443f.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.037, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookFormatListItem::setPrice() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:116\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    protected function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":79},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->discountPercent;\n     }\n-    public function setDiscountPercent(?int $discountPercent) : static\n+    protected function setDiscountPercent(?int $discountPercent) : static\n     {\n         $this->discountPercent = $discountPercent;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2a556a51e61ca0cf673125bef3b20985.infection.xml\n\nE....                                                               5 \/ 5 (100%)\n\nTime: 00:00.036, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Model\\BookFormatListItem::setDiscountPercent() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:117\n\nERRORS!\nTests: 5, Assertions: 11, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":18},"diff":"--- Original\n+++ New\n@@ @@\n     )\n     {\n     }\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.419efa83184e54b055fbe13c339356dc.infection.xml\n\n.F\n\nTime: 00:00.312, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that stdClass Object #1669 (\n    'items' => Array &0 [\n        0 => stdClass Object #1668 (\n            'title' => 'test',\n            'slug' => 'test',\n            'image' => 'default.png',\n            'authors' => Array &1 [\n                0 => 'lorem',\n            ],\n            'publicationDate' => '2023-12-12T00:00:00+00:00',\n        ),\n    ],\n) matches JSON schema.\n[items[0].id] The property id is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:21\n\nFAILURES!\nTests: 2, Assertions: 4, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    protected function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n         $this->id = $id;\n         return $this;\n     }\n-    public function getTitle() : string\n+    protected function getTitle() : string\n     {\n         return $this->title;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.54b686a293ffe899b843b63a9506c24e.infection.xml\n\n..F\n\nTime: 00:00.287, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that stdClass Object #1999 (\n    'items' => Array &0 [\n        0 => stdClass Object #1998 (\n            'id' => 997,\n            'slug' => 'test',\n            'image' => 'default.png',\n            'authors' => Array &1 [\n                0 => 'lorem',\n            ],\n            'publicationDate' => '2023-12-12T00:00:00+00:00',\n        ),\n    ],\n) matches JSON schema.\n[items[0].title] The property title is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:21\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    protected function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n         $this->title = $title;\n         return $this;\n     }\n-    public function getSlug() : string\n+    protected function getSlug() : string\n     {\n         return $this->slug;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ca1d3f0bb8c6b9ceb5c6fcb355353c91.infection.xml\n\n..F\n\nTime: 00:00.312, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that stdClass Object #1999 (\n    'items' => Array &0 [\n        0 => stdClass Object #1998 (\n            'id' => 1000,\n            'title' => 'test',\n            'image' => 'default.png',\n            'authors' => Array &1 [\n                0 => 'lorem',\n            ],\n            'publicationDate' => '2023-12-12T00:00:00+00:00',\n        ),\n    ],\n) matches JSON schema.\n[items[0].slug] The property slug is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:21\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    protected function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n         $this->slug = $slug;\n         return $this;\n     }\n-    public function getImage() : string\n+    protected function getImage() : string\n     {\n         return $this->image;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b3e42879c4c69f460f8c2b954d8ecc07.infection.xml\n\n..F\n\nTime: 00:00.299, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that stdClass Object #1999 (\n    'items' => Array &0 [\n        0 => stdClass Object #1998 (\n            'id' => 1003,\n            'title' => 'test',\n            'slug' => 'test',\n            'authors' => Array &1 [\n                0 => 'lorem',\n            ],\n            'publicationDate' => '2023-12-12T00:00:00+00:00',\n        ),\n    ],\n) matches JSON schema.\n[items[0].image] The property image is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:21\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    protected function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":69},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return string[]\n      *\/\n-    public function getAuthors() : array\n+    protected function getAuthors() : array\n     {\n         return $this->authors;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.06f0c1ab6aa587c9ee99dc0fad9d4784.infection.xml\n\n..F\n\nTime: 00:00.281, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that stdClass Object #1999 (\n    'items' => Array &0 [\n        0 => stdClass Object #1998 (\n            'id' => 1006,\n            'title' => 'test',\n            'slug' => 'test',\n            'image' => 'default.png',\n            'publicationDate' => '2023-12-12T00:00:00+00:00',\n        ),\n    ],\n) matches JSON schema.\n[items[0].authors] The property authors is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:21\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    protected function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":84},"diff":"--- Original\n+++ New\n@@ @@\n         $this->authors = $authors;\n         return $this;\n     }\n-    public function getPublicationDate() : string\n+    protected function getPublicationDate() : string\n     {\n         return $this->publicationDate;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4a319da1eac28f4c5602376f4451d1e0.infection.xml\n\n..F\n\nTime: 00:00.281, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that stdClass Object #1999 (\n    'items' => Array &0 [\n        0 => stdClass Object #1998 (\n            'id' => 1009,\n            'title' => 'test',\n            'slug' => 'test',\n            'image' => 'default.png',\n            'authors' => Array &1 [\n                0 => 'lorem',\n            ],\n        ),\n    ],\n) matches JSON schema.\n[items[0].publicationDate] The property publicationDate is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:21\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookListRecommendationResponse\n{\n    \/**\n     * @param RecommendedBook[] $items\n     *\/\n    public function __construct(private array $items)\n    {\n    }\n    \/**\n     * @return RecommendedBook[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookListRecommendationResponse\n{\n    \/**\n     * @param RecommendedBook[] $items\n     *\/\n    public function __construct(private array $items)\n    {\n    }\n    \/**\n     * @return RecommendedBook[]\n     *\/\n    protected function getItems() : array\n    {\n        return $this->items;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListRecommendationResponse.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return RecommendedBook[]\n      *\/\n-    public function getItems() : array\n+    protected function getItems() : array\n     {\n         return $this->items;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1ee5fc21cc5f3b2a567b548fdc084aa2.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.333, Memory: 32.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that Array &0 [] matches JSON schema.\n[] Array value found, but an object is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:185\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookListResponse\n{\n    \/**\n     * @param BookListItem[] $items\n     *\/\n    public function __construct(private array $items)\n    {\n    }\n    \/**\n     * @return BookListItem[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class BookListResponse\n{\n    \/**\n     * @param BookListItem[] $items\n     *\/\n    public function __construct(private array $items)\n    {\n    }\n    \/**\n     * @return BookListItem[]\n     *\/\n    protected function getItems() : array\n    {\n        return $this->items;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListResponse.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return BookListItem[]\n      *\/\n-    public function getItems() : array\n+    protected function getItems() : array\n     {\n         return $this->items;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9cdbd4c33d2678c093c56a49cd4ed1f3.infection.xml\n\n..F\n\nTime: 00:00.285, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that Array &0 [] matches JSON schema.\n[] Array value found, but an object is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:21\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nreadonly class ErrorResponse\n{\n    public function __construct(private string $message, private mixed $details = null)\n    {\n    }\n    public function getMessage() : string\n    {\n        return $this->message;\n    }\n    #[OA\\Property(type: 'object', oneOf: [new OA\\Schema(ref: new Model(type: ErrorDebugDetails::class))])]\n    public function getDetails() : mixed\n    {\n        return $this->details;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nreadonly class ErrorResponse\n{\n    public function __construct(private string $message, private mixed $details = null)\n    {\n    }\n    protected function getMessage() : string\n    {\n        return $this->message;\n    }\n    #[OA\\Property(type: 'object', oneOf: [new OA\\Schema(ref: new Model(type: ErrorDebugDetails::class))])]\n    public function getDetails() : mixed\n    {\n        return $this->details;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ErrorResponse.php","originalStartLine":14},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $message, private mixed $details = null)\n     {\n     }\n-    public function getMessage() : string\n+    protected function getMessage() : string\n     {\n         return $this->message;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.313e2cd6d7149ab6e51617271875ff2a.infection.xml\n\nF\n\nTime: 00:00.244, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that stdClass Object #1176 (\n    'details' => null,\n) matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to <text> at JSON path '$.message'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nreadonly class ErrorResponse\n{\n    public function __construct(private string $message, private mixed $details = null)\n    {\n    }\n    public function getMessage() : string\n    {\n        return $this->message;\n    }\n    #[OA\\Property(type: 'object', oneOf: [new OA\\Schema(ref: new Model(type: ErrorDebugDetails::class))])]\n    public function getDetails() : mixed\n    {\n        return $this->details;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nreadonly class ErrorResponse\n{\n    public function __construct(private string $message, private mixed $details = null)\n    {\n    }\n    public function getMessage() : string\n    {\n        return $this->message;\n    }\n    #[OA\\Property(type: 'object', oneOf: [new OA\\Schema(ref: new Model(type: ErrorDebugDetails::class))])]\n    protected function getDetails() : mixed\n    {\n        return $this->details;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ErrorResponse.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n         return $this->message;\n     }\n     #[OA\\Property(type: 'object', oneOf: [new OA\\Schema(ref: new Model(type: ErrorDebugDetails::class))])]\n-    public function getDetails() : mixed\n+    protected function getDetails() : mixed\n     {\n         return $this->details;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1e96cfd27267d410d9d4be3556b0917c.infection.xml\n\nF\n\nTime: 00:00.257, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that stdClass Object #1176 (\n    'message' => 'This value should be of type unknown.\\n\nThis value should not be blank.\\n\nThis value should not be blank.',\n) matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model\\Recommendation;\n\nclass RecommendationItem\n{\n    public function __construct(private int $id)\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model\\Recommendation;\n\nclass RecommendationItem\n{\n    public function __construct(private int $id)\n    {\n    }\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Recommendation\/RecommendationItem.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private int $id)\n     {\n     }\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a028ea84696338843cf4ead8f2c99caa.infection.xml\n\n...EE...F                                                           9 \/ 9 (100%)\n\nTime: 00:00.339, Memory: 34.50 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Model\\Recommendation\\RecommendationItem::getId() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:57\n\/app\/src\/Service\/BookService.php:55\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Model\\Recommendation\\RecommendationItem::getId() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:57\n\/app\/src\/Service\/BookService.php:55\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:04 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Service\\\\BookService->App\\\\Service\\\\{closure}(Object(App\\\\Model\\\\Recommendation\\\\RecommendationItem))\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(55): array_map(Object(Closure), Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(935)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(935)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 9, Assertions: 15, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model\\Recommendation;\n\nreadonly class RecommendationResponse\n{\n    public function __construct(\n        private int $id,\n        private int $ts,\n        \/** @var RecommendationItem[] *\/\n        private array $recommendations\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTs() : int\n    {\n        return $this->ts;\n    }\n    \/**\n     * @return RecommendationItem[]\n     *\/\n    public function getRecommendations() : array\n    {\n        return $this->recommendations;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model\\Recommendation;\n\nreadonly class RecommendationResponse\n{\n    public function __construct(\n        private int $id,\n        private int $ts,\n        \/** @var RecommendationItem[] *\/\n        private array $recommendations\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTs() : int\n    {\n        return $this->ts;\n    }\n    \/**\n     * @return RecommendationItem[]\n     *\/\n    protected function getRecommendations() : array\n    {\n        return $this->recommendations;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Recommendation\/RecommendationResponse.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return RecommendationItem[]\n      *\/\n-    public function getRecommendations() : array\n+    protected function getRecommendations() : array\n     {\n         return $this->recommendations;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.534acf1ccaa55c01552f23551bb94c14.infection.xml\n\n...EE...F                                                           9 \/ 9 (100%)\n\nTime: 00:00.364, Memory: 34.50 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Model\\Recommendation\\RecommendationResponse::getRecommendations() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:59\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Model\\Recommendation\\RecommendationResponse::getRecommendations() from scope App\\Service\\BookService\n\n\/app\/src\/Service\/BookService.php:59\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:04 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(939)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(939)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 9, Assertions: 15, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    protected function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/RecommendedBook.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function setId(int $id) : static\n+    protected function setId(int $id) : static\n     {\n         $this->id = $id;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b2c0d83dac1a812d8183c49869ccb2b8.infection.xml\n\n...EE...F                                                           9 \/ 9 (100%)\n\nTime: 00:00.333, Memory: 34.50 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Model\\RecommendedBook::setId() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:31\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Model\\RecommendedBook::setId() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:31\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:20 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Mapper\\\\BookMapper::mapRecommendations(Object(App\\\\Entity\\\\Book))\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(63): array_map(Array, Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1024)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1024)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 9, Assertions: 15, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    protected function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/RecommendedBook.php","originalStartLine":29},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->title;\n     }\n-    public function setTitle(string $title) : static\n+    protected function setTitle(string $title) : static\n     {\n         $this->title = $title;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.555c1521341901183f45c926f40868ce.infection.xml\n\n...EE...F                                                           9 \/ 9 (100%)\n\nTime: 00:00.358, Memory: 34.50 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Model\\RecommendedBook::setTitle() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:32\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Model\\RecommendedBook::setTitle() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:32\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:21 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Mapper\\\\BookMapper::mapRecommendations(Object(App\\\\Entity\\\\Book))\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(63): array_map(Array, Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1032)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1032)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 9, Assertions: 15, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    protected function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/RecommendedBook.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->slug;\n     }\n-    public function setSlug(string $slug) : static\n+    protected function setSlug(string $slug) : static\n     {\n         $this->slug = $slug;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4cca17e702fcb35418887658b248305a.infection.xml\n\n...EE...F                                                           9 \/ 9 (100%)\n\nTime: 00:00.354, Memory: 34.50 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Model\\RecommendedBook::setSlug() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:33\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Model\\RecommendedBook::setSlug() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:33\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:22 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Mapper\\\\BookMapper::mapRecommendations(Object(App\\\\Entity\\\\Book))\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(63): array_map(Array, Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1040)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1040)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 9, Assertions: 15, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    public function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass RecommendedBook\n{\n    private int $id;\n    private string $title;\n    private string $slug;\n    private string $description;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getDescription() : string\n    {\n        return $this->description;\n    }\n    protected function setDescription(string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/RecommendedBook.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->description;\n     }\n-    public function setDescription(string $description) : static\n+    protected function setDescription(string $description) : static\n     {\n         $this->description = $description;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b748720ad1db68b61a45ed11f67b1af5.infection.xml\n\n...EE...F                                                           9 \/ 9 (100%)\n\nTime: 00:00.351, Memory: 34.50 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Model\\RecommendedBook::setDescription() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:34\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Model\\RecommendedBook::setDescription() from scope App\\Mapper\\BookMapper\n\n\/app\/src\/Mapper\/BookMapper.php:34\n\/app\/src\/Service\/BookService.php:63\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:23 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 [internal function]: App\\\\Mapper\\\\BookMapper::mapRecommendations(Object(App\\\\Entity\\\\Book))\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(63): array_map(Array, Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1048)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1048)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 9, Assertions: 15, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n     private string $author;\n     private int $rating;\n     private string $createdAt;\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.23b767386a3478b14dab5eb5f5ae0913.infection.xml\n\nF\n\nTime: 00:00.283, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #1335 (\n    'items' => Array &0 [\n        0 => stdClass Object #1334 (\n            'content' => 'test',\n            'author' => 'test',\n            'rating' => 4,\n            'createdAt' => '2023-12-05T17:03:23+00:00',\n        ),\n    ],\n    'rating' => 4,\n    'page' => 1,\n    'pages' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[items[0].id] The property id is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    protected function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":18},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function setId(int $id) : static\n+    protected function setId(int $id) : static\n     {\n         $this->id = $id;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5428c483dcc800ee27462fb9114f4fad.infection.xml\n\n...F\n\nTime: 00:00.346, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:24 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1053, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1053, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    protected function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n         $this->id = $id;\n         return $this;\n     }\n-    public function getContent() : string\n+    protected function getContent() : string\n     {\n         return $this->content;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.117c0928cf9d5ecd576a9f20e89cfc2f.infection.xml\n\n.F\n\nTime: 00:00.290, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #1683 (\n    'items' => Array &0 [\n        0 => stdClass Object #1682 (\n            'id' => 219,\n            'author' => 'test',\n            'rating' => 4,\n            'createdAt' => '2023-12-05T17:03:24+00:00',\n        ),\n    ],\n    'rating' => 4,\n    'page' => 1,\n    'pages' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[items[0].content] The property content is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 2, Assertions: 4, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    protected function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->content;\n     }\n-    public function setContent(string $content) : static\n+    protected function setContent(string $content) : static\n     {\n         $this->content = $content;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ad63605897dad56d3247d17f41cd450a.infection.xml\n\nF\n\nTime: 00:00.275, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:25 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1056, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1056, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    protected function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n         $this->content = $content;\n         return $this;\n     }\n-    public function getAuthor() : string\n+    protected function getAuthor() : string\n     {\n         return $this->author;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.eec12d3337db851d491bed9962db9cd1.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.341, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #2361 (\n    'items' => Array &0 [\n        0 => stdClass Object #2360 (\n            'id' => 221,\n            'content' => 'test',\n            'rating' => 4,\n            'createdAt' => '2023-12-05T17:03:25+00:00',\n        ),\n    ],\n    'rating' => 4,\n    'page' => 1,\n    'pages' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[items[0].author] The property author is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    protected function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->author;\n     }\n-    public function setAuthor(string $author) : static\n+    protected function setAuthor(string $author) : static\n     {\n         $this->author = $author;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0ffca07b1ad287ddea855acca2fbfebd.infection.xml\n\n..F\n\nTime: 00:00.321, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:26 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1063, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1063, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    protected function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n         $this->author = $author;\n         return $this;\n     }\n-    public function getRating() : int\n+    protected function getRating() : int\n     {\n         return $this->rating;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b5900f1f65d32879a6a3bdd33d75175a.infection.xml\n\n.F\n\nTime: 00:00.309, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #1683 (\n    'items' => Array &0 [\n        0 => stdClass Object #1682 (\n            'id' => 223,\n            'content' => 'test',\n            'author' => 'test',\n            'createdAt' => '2023-12-05T17:03:26+00:00',\n        ),\n    ],\n    'rating' => 4,\n    'page' => 1,\n    'pages' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[items[0].rating] The property rating is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 2, Assertions: 4, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    protected function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->rating;\n     }\n-    public function setRating(int $rating) : static\n+    protected function setRating(int $rating) : static\n     {\n         $this->rating = $rating;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1548a43569553e31bcf3c32e135b6710.infection.xml\n\nF\n\nTime: 00:00.261, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:27 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1066, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1066, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    protected function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":61},"diff":"--- Original\n+++ New\n@@ @@\n         $this->rating = $rating;\n         return $this;\n     }\n-    public function getCreatedAt() : string\n+    protected function getCreatedAt() : string\n     {\n         return $this->createdAt;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7fbae49c8c7c8090118356776b2badfe.infection.xml\n\nF\n\nTime: 00:00.288, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #1335 (\n    'items' => Array &0 [\n        0 => stdClass Object #1334 (\n            'id' => 225,\n            'content' => 'test',\n            'author' => 'test',\n            'rating' => 4,\n        ),\n    ],\n    'rating' => 4,\n    'page' => 1,\n    'pages' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[items[0].createdAt] The property createdAt is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass Review\n{\n    private int $id;\n    private string $content;\n    private string $author;\n    private int $rating;\n    private string $createdAt;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getCreatedAt() : string\n    {\n        return $this->createdAt;\n    }\n    protected function setCreatedAt(string $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Review.php","originalStartLine":66},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->createdAt;\n     }\n-    public function setCreatedAt(string $createdAt) : static\n+    protected function setCreatedAt(string $createdAt) : static\n     {\n         $this->createdAt = $createdAt;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f898b66075eb1467da6aa1a303d3d09e.infection.xml\n\n..F\n\nTime: 00:00.305, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:27 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(36): App\\\\Service\\\\ReviewService->map(Object(App\\\\Entity\\\\Review))\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1070, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1070, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    protected function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":18},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return Review[]\n      *\/\n-    public function getItems() : array\n+    protected function getItems() : array\n     {\n         return $this->items;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3913fa20cfd22c2d08e50ae097101b40.infection.xml\n\n.F\n\nTime: 00:00.305, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #1670 (\n    'rating' => 4,\n    'page' => 1,\n    'pages' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[items] The property items is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 2, Assertions: 4, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    protected function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param Review[] $items\n      *\/\n-    public function setItems(array $items) : static\n+    protected function setItems(array $items) : static\n     {\n         $this->items = $items;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.87eb56a2b45df78608eabe9d24db0ca8.infection.xml\n\nF\n\nTime: 00:00.295, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:28 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1073, 1)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1073, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    protected function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n         $this->items = $items;\n         return $this;\n     }\n-    public function getRating() : float\n+    protected function getRating() : float\n     {\n         return $this->rating;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.49ac957307be62f74a27c2beced81fb6.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.324, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #2361 (\n    'items' => Array &0 [\n        0 => stdClass Object #2360 (\n            'id' => 229,\n            'content' => 'test',\n            'author' => 'test',\n            'rating' => 4,\n            'createdAt' => '2023-12-05T17:03:29+00:00',\n        ),\n    ],\n    'page' => 1,\n    'pages' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[rating] The property rating is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    protected function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->rating;\n     }\n-    public function setRating(float $rating) : static\n+    protected function setRating(float $rating) : static\n     {\n         $this->rating = $rating;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e9916275c67cfbe577a3d64e255d13ee.infection.xml\n\n.F\n\nTime: 00:00.321, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:29 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1079, 1)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1079, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    protected function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":45},"diff":"--- Original\n+++ New\n@@ @@\n         $this->rating = $rating;\n         return $this;\n     }\n-    public function getPage() : int\n+    protected function getPage() : int\n     {\n         return $this->page;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1e0eca8aa0e5cb945804c271ca390c2a.infection.xml\n\nF\n\nTime: 00:00.294, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #1335 (\n    'items' => Array &0 [\n        0 => stdClass Object #1334 (\n            'id' => 231,\n            'content' => 'test',\n            'author' => 'test',\n            'rating' => 4,\n            'createdAt' => '2023-12-05T17:03:30+00:00',\n        ),\n    ],\n    'rating' => 4,\n    'pages' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[page] The property page is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    protected function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":50},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->page;\n     }\n-    public function setPage(int $page) : static\n+    protected function setPage(int $page) : static\n     {\n         $this->page = $page;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e1b53713a02ebea9fc79933914c5fda5.infection.xml\n\n...F\n\nTime: 00:00.331, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:30 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1084, 1)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1084, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    protected function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n         $this->page = $page;\n         return $this;\n     }\n-    public function getPages() : int\n+    protected function getPages() : int\n     {\n         return $this->pages;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5d9693bfbc5e909dc42a99da75ea79f0.infection.xml\n\n..F\n\nTime: 00:00.309, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #2013 (\n    'items' => Array &0 [\n        0 => stdClass Object #2012 (\n            'id' => 233,\n            'content' => 'test',\n            'author' => 'test',\n            'rating' => 4,\n            'createdAt' => '2023-12-05T17:03:31+00:00',\n        ),\n    ],\n    'rating' => 4,\n    'page' => 1,\n    'perPage' => 5,\n    'total' => 1,\n) matches JSON schema.\n[pages] The property pages is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    protected function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":62},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->pages;\n     }\n-    public function setPages(int $pages) : static\n+    protected function setPages(int $pages) : static\n     {\n         $this->pages = $pages;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2346f4b10384a32f2704560d45d8b0c0.infection.xml\n\n.F\n\nTime: 00:00.357, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:31 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1089, 1)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1089, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    protected function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":69},"diff":"--- Original\n+++ New\n@@ @@\n         $this->pages = $pages;\n         return $this;\n     }\n-    public function getPerPage() : int\n+    protected function getPerPage() : int\n     {\n         return $this->perPage;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.489683a12868a7c4216534ef18b9a86c.infection.xml\n\nF\n\nTime: 00:00.319, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #1335 (\n    'items' => Array &0 [\n        0 => stdClass Object #1334 (\n            'id' => 235,\n            'content' => 'test',\n            'author' => 'test',\n            'rating' => 4,\n            'createdAt' => '2023-12-05T17:03:32+00:00',\n        ),\n    ],\n    'rating' => 4,\n    'page' => 1,\n    'pages' => 1,\n    'total' => 1,\n) matches JSON schema.\n[perPage] The property perPage is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    protected function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":74},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->perPage;\n     }\n-    public function setPerPage(int $perPage) : static\n+    protected function setPerPage(int $perPage) : static\n     {\n         $this->perPage = $perPage;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3398604622064fca55702a4d8dd0982e.infection.xml\n\n...F\n\nTime: 00:00.342, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:32 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1094, 1)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1094, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    protected function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":81},"diff":"--- Original\n+++ New\n@@ @@\n         $this->perPage = $perPage;\n         return $this;\n     }\n-    public function getTotal() : int\n+    protected function getTotal() : int\n     {\n         return $this->total;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4e0327590caf7f46384e5d7214592074.infection.xml\n\n.F\n\nTime: 00:00.297, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that stdClass Object #1683 (\n    'items' => Array &0 [\n        0 => stdClass Object #1682 (\n            'id' => 237,\n            'content' => 'test',\n            'author' => 'test',\n            'rating' => 4,\n            'createdAt' => '2023-12-05T17:03:33+00:00',\n        ),\n    ],\n    'rating' => 4,\n    'page' => 1,\n    'pages' => 1,\n    'perPage' => 5,\n) matches JSON schema.\n[total] The property total is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookControllerTest.php:98\n\nFAILURES!\nTests: 2, Assertions: 4, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass ReviewPage\n{\n    \/** @var Review[] *\/\n    private array $items;\n    private float $rating;\n    private int $page;\n    private int $pages;\n    private int $perPage;\n    private int $total;\n    \/**\n     * @return Review[]\n     *\/\n    public function getItems() : array\n    {\n        return $this->items;\n    }\n    \/**\n     * @param Review[] $items\n     *\/\n    public function setItems(array $items) : static\n    {\n        $this->items = $items;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getPage() : int\n    {\n        return $this->page;\n    }\n    public function setPage(int $page) : static\n    {\n        $this->page = $page;\n        return $this;\n    }\n    public function getPages() : int\n    {\n        return $this->pages;\n    }\n    public function setPages(int $pages) : static\n    {\n        $this->pages = $pages;\n        return $this;\n    }\n    public function getPerPage() : int\n    {\n        return $this->perPage;\n    }\n    public function setPerPage(int $perPage) : static\n    {\n        $this->perPage = $perPage;\n        return $this;\n    }\n    public function getTotal() : int\n    {\n        return $this->total;\n    }\n    protected function setTotal(int $total) : static\n    {\n        $this->total = $total;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ReviewPage.php","originalStartLine":86},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->total;\n     }\n-    public function setTotal(int $total) : static\n+    protected function setTotal(int $total) : static\n     {\n         $this->total = $total;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.003acebbce07d5ab0a7684041874f3be.infection.xml\n\nF\n\nTime: 00:00.275, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:33 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1097, 1)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1097, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    protected function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     #[Assert\\Length(min: 6, max: 20)]\n     #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n     private string $confirmPassword;\n-    public function getEmail() : string\n+    protected function getEmail() : string\n     {\n         return $this->email;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e86f6869102fa02c6d8d4cce34895563.infection.xml\n\nEF\n\nTime: 00:00.038, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::getEmail() from scope App\\Service\\SignUpService\n\n\/app\/src\/Service\/SignUpService.php:26\n\/app\/tests\/Service\/SignUpServiceTest.php:89\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUpUserAlreadyExist\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\UserAlreadyExistException\". Message was: \"Call to protected method App\\Model\\SignUpRequest::getEmail() from scope App\\Service\\SignUpService\" at\n\/app\/src\/Service\/SignUpService.php:26\n\/app\/tests\/Service\/SignUpServiceTest.php:49\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    protected function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->email;\n     }\n-    public function setEmail(string $email) : static\n+    protected function setEmail(string $email) : static\n     {\n         $this->email = $email;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e17b1b877e4fa7294d0c82db2f928ae6.infection.xml\n\nEF\n\nTime: 00:00.038, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::setEmail() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:90\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUpUserAlreadyExist\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\UserAlreadyExistException\". Message was: \"Call to protected method App\\Model\\SignUpRequest::setEmail() from scope App\\Tests\\Service\\SignUpServiceTest\" at\n\/app\/tests\/Service\/SignUpServiceTest.php:49\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    protected function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n         $this->email = $email;\n         return $this;\n     }\n-    public function getFirstName() : string\n+    protected function getFirstName() : string\n     {\n         return $this->firstName;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3810f8ed728168a05b22ca293ce90dd6.infection.xml\n\nE.F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.304, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::getFirstName() from scope App\\Service\\SignUpService\n\n\/app\/src\/Service\/SignUpService.php:34\n\/app\/tests\/Service\/SignUpServiceTest.php:89\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:34 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    protected function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":45},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->firstName;\n     }\n-    public function setFirstName(string $firstName) : static\n+    protected function setFirstName(string $firstName) : static\n     {\n         $this->firstName = $firstName;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f604c0ca7534a2c2e018cb00acf98503.infection.xml\n\nE.F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.269, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::setFirstName() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:92\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 422 Unprocessable Content\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:34 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"This value should not be blank.\",\"details\":null}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    protected function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n         $this->firstName = $firstName;\n         return $this;\n     }\n-    public function getLastname() : string\n+    protected function getLastname() : string\n     {\n         return $this->lastname;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.af00c967ececb013aee58cbc4224fe7b.infection.xml\n\nE.F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.293, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::getLastname() from scope App\\Service\\SignUpService\n\n\/app\/src\/Service\/SignUpService.php:33\n\/app\/tests\/Service\/SignUpServiceTest.php:89\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:35 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    protected function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->lastname;\n     }\n-    public function setLastname(string $lastname) : static\n+    protected function setLastname(string $lastname) : static\n     {\n         $this->lastname = $lastname;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7d2bdb0a10398bc125d9ef3d45989afe.infection.xml\n\nE.F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.279, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::setLastname() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:91\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 422 Unprocessable Content\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:35 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"This value should not be blank.\",\"details\":null}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    protected function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":64},"diff":"--- Original\n+++ New\n@@ @@\n         $this->lastname = $lastname;\n         return $this;\n     }\n-    public function getPassword() : string\n+    protected function getPassword() : string\n     {\n         return $this->password;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b80a80576e8002a2364b87970f4cda5b.infection.xml\n\nE.F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.276, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::getPassword() from scope App\\Service\\SignUpService\n\n\/app\/src\/Service\/SignUpService.php:37\n\/app\/tests\/Service\/SignUpServiceTest.php:89\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:36 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(741): Symfony\\\\Component\\\\Validator\\\\Constraints\\\\AbstractComparisonValidator->validate('testTest1', Object(Symfony\\\\Component\\\\Validator\\\\Constraints\\\\EqualTo))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(586): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validateInGroup('testTest1', '000000000000053...', Object(Symfony\\\\Component\\\\Validator\\\\Mapping\\\\PropertyMetadata), 'Default', Object(Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContext))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(499): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validateGenericNode('testTest1', Object(App\\\\Model\\\\SignUpRequest), '000000000000053...', Object(Symfony\\\\Component\\\\Validator\\\\Mapping\\\\PropertyMetadata), 'confirmPassword', Array, NULL, 1, Object(Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContext))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(298): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validateClassNode(Object(App\\\\Model\\\\SignUpRequest), '000000000000053...', Object(Symfony\\\\Component\\\\Validator\\\\Mapping\\\\ClassMetadata), '', Array, NULL, 1, Object(Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContext))\\n#4 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(128): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validateObject(Object(App\\\\Model\\\\SignUpRequest), '', Array, 1, Object(Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContext))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveValidator.php(82): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validate(Object(App\\\\Model\\\\SignUpRequest), NULL, Array)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/ArgumentResolver\\\/RequestPayloadValueResolver.php(123): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveValidator->validate(Object(App\\\\Model\\\\SignUpRequest), NULL, NULL)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent))\\n#10 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#11 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(176): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#12 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#13 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#14 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#15 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#16 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#17 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#21 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#22 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#23 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#24 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#25 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#26 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#27 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#28 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#29 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    protected function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":69},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->password;\n     }\n-    public function setPassword(string $password) : static\n+    protected function setPassword(string $password) : static\n     {\n         $this->password = $password;\n         return $this;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.63ebc62a464f047cc5860f9e50fb173f.infection.xml\n\nE.F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.284, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::setPassword() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:93\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:36 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/property-access\\\/PropertyAccessor.php(112): Symfony\\\\Component\\\\PropertyAccess\\\\PropertyAccessor->readProperty(Array, 'password', false)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Constraints\\\/AbstractComparisonValidator.php(56): Symfony\\\\Component\\\\PropertyAccess\\\\PropertyAccessor->getValue(Object(App\\\\Model\\\\SignUpRequest), 'password')\\n#2 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(741): Symfony\\\\Component\\\\Validator\\\\Constraints\\\\AbstractComparisonValidator->validate('testTest1', Object(Symfony\\\\Component\\\\Validator\\\\Constraints\\\\EqualTo))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(586): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validateInGroup('testTest1', '000000000000053...', Object(Symfony\\\\Component\\\\Validator\\\\Mapping\\\\PropertyMetadata), 'Default', Object(Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContext))\\n#4 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(499): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validateGenericNode('testTest1', Object(App\\\\Model\\\\SignUpRequest), '000000000000053...', Object(Symfony\\\\Component\\\\Validator\\\\Mapping\\\\PropertyMetadata), 'confirmPassword', Array, NULL, 1, Object(Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContext))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(298): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validateClassNode(Object(App\\\\Model\\\\SignUpRequest), '000000000000053...', Object(Symfony\\\\Component\\\\Validator\\\\Mapping\\\\ClassMetadata), '', Array, NULL, 1, Object(Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContext))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveContextualValidator.php(128): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validateObject(Object(App\\\\Model\\\\SignUpRequest), '', Array, 1, Object(Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContext))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/validator\\\/Validator\\\/RecursiveValidator.php(82): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveContextualValidator->validate(Object(App\\\\Model\\\\SignUpRequest), NULL, Array)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Controller\\\/ArgumentResolver\\\/RequestPayloadValueResolver.php(123): Symfony\\\\Component\\\\Validator\\\\Validator\\\\RecursiveValidator->validate(Object(App\\\\Model\\\\SignUpRequest), NULL, NULL)\\n#9 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#10 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#11 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent))\\n#12 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#13 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(176): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#14 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#15 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#16 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#17 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#18 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#19 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#21 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#22 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#23 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#24 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#25 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#26 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#27 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#28 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#29 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#30 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#31 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    protected function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":81},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->confirmPassword;\n     }\n-    public function setConfirmPassword(string $confirmPassword) : static\n+    protected function setConfirmPassword(string $confirmPassword) : static\n     {\n         $this->confirmPassword = $confirmPassword;\n         return $this;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.afa2b5226f83789657ed4291dd69f404.infection.xml\n\nE.F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.288, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nError: Call to protected method App\\Model\\SignUpRequest::setConfirmPassword() from scope App\\Tests\\Service\\SignUpServiceTest\n\n\/app\/tests\/Service\/SignUpServiceTest.php:94\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 422 Unprocessable Content\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:36 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"This value should not be blank.\",\"details\":null}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nreadonly class SubscriberRequest\n{\n    public function __construct(#[Assert\\NotBlank] #[Assert\\Email] public string $email, #[Assert\\NotBlank] #[Assert\\IsTrue] public bool $agreed)\n    {\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function isAgreed() : bool\n    {\n        return $this->agreed;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nreadonly class SubscriberRequest\n{\n    public function __construct(#[Assert\\NotBlank] #[Assert\\Email] public string $email, #[Assert\\NotBlank] #[Assert\\IsTrue] public bool $agreed)\n    {\n    }\n    protected function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function isAgreed() : bool\n    {\n        return $this->agreed;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SubscriberRequest.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(#[Assert\\NotBlank] #[Assert\\Email] public string $email, #[Assert\\NotBlank] #[Assert\\IsTrue] public bool $agreed)\n     {\n     }\n-    public function getEmail() : string\n+    protected function getEmail() : string\n     {\n         return $this->email;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.646be2328070d905531ec49964ff8a3c.infection.xml\n\nEF\n\nTime: 00:00.035, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribe\nError: Call to protected method App\\Model\\SubscriberRequest::getEmail() from scope App\\Service\\SubscriberService\n\n\/app\/src\/Service\/SubscriberService.php:21\n\/app\/tests\/Service\/SubscriberServiceTest.php:58\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribeAlreadyExist\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\SubscriberFoundException\". Message was: \"Call to protected method App\\Model\\SubscriberRequest::getEmail() from scope App\\Service\\SubscriberService\" at\n\/app\/src\/Service\/SubscriberService.php:21\n\/app\/tests\/Service\/SubscriberServiceTest.php:41\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<BookCategory>\n *\n * @method BookCategory|null find($id, $lockMode = null, $lockVersion = null)\n * @method BookCategory|null findOneBy(array $criteria, array $orderBy = null)\n * @method BookCategory[]    findAll()\n * @method BookCategory[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookCategoryRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, BookCategory::class);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<BookCategory>\n *\n * @method BookCategory|null find($id, $lockMode = null, $lockVersion = null)\n * @method BookCategory|null findOneBy(array $criteria, array $orderBy = null)\n * @method BookCategory[]    findAll()\n * @method BookCategory[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookCategoryRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Repository\/BookCategoryRepository.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(ManagerRegistry $registry)\n     {\n-        parent::__construct($registry, BookCategory::class);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.91c7bc313d3c52a244b0153362a8a21a.infection.xml\n\nF\n\nTime: 00:00.247, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:37 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookCategoryService.php(19): Doctrine\\\\ORM\\\\EntityRepository->findBy(Array, Array)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookCategoryController.php(24): App\\\\Service\\\\BookCategoryService->findAll()\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookCategoryController->index()\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookCategoryControllerTest.php(15): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest->testIndex()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        \n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/BookRepository.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(ManagerRegistry $registry)\n     {\n-        parent::__construct($registry, Book::class);\n+        \n     }\n     \/**\n      * @return Book[]","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b1886fc27511822b4a52838758517ee0.infection.xml\n\nEF\n\nTime: 00:00.319, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nError: Call to a member function createQuery() on null\n\n\/app\/src\/Repository\/BookRepository.php:27\n\/app\/tests\/Repository\/BookRepositoryTest.php:38\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:38 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Repository\\\/BookRepository.php(38): Doctrine\\\\ORM\\\\EntityRepository->findBy(Array)\\n#1 \\\/app\\\/src\\\/Service\\\/BookService.php(63): App\\\\Repository\\\\BookRepository->findBooksByIds(Array)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1103)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1103)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    3x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    protected function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/BookRepository.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @return Book[]\n      *\/\n-    public function findByCategory(int $id) : array\n+    protected function findByCategory(int $id) : array\n     {\n         $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n         $query->setParameter('categoryId', $id);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.80d913f692d74a1a67141686cf50d469.infection.xml\n\nE.F\n\nTime: 00:00.275, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nDoctrine\\ORM\\Repository\\Exception\\InvalidMagicMethodCall: Entity 'App\\Entity\\Book' has no field 'category'. You can therefore not call 'findByCategory' on the entities' repository.\n\n\/app\/vendor\/doctrine\/orm\/lib\/Doctrine\/ORM\/Repository\/Exception\/InvalidMagicMethodCall.php:17\n\/app\/vendor\/doctrine\/orm\/lib\/Doctrine\/ORM\/EntityRepository.php:361\n\/app\/vendor\/doctrine\/orm\/lib\/Doctrine\/ORM\/EntityRepository.php:272\n\/app\/tests\/Repository\/BookRepositoryTest.php:38\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:38 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/EntityRepository.php(361): Doctrine\\\\ORM\\\\Repository\\\\Exception\\\\InvalidMagicMethodCall::becauseFieldNotFoundIn('App\\\\\\\\Entity\\\\\\\\Book', 'category', 'findByCategory')\\n#1 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/EntityRepository.php(272): Doctrine\\\\ORM\\\\EntityRepository->resolveMagicCall('findBy', 'Category', Array)\\n#2 \\\/app\\\/src\\\/Service\\\/BookService.php(49): Doctrine\\\\ORM\\\\EntityRepository->__call('findByCategory', Array)\\n#3 \\\/app\\\/src\\\/Controller\\\/BookController.php(31): App\\\\Service\\\\BookService->findBooksByCategory(391)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByCategory(391)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(17): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByCategory()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:20\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    3x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        \n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/BookRepository.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     public function findByCategory(int $id) : array\n     {\n         $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n-        $query->setParameter('categoryId', $id);\n+        \n         return $query->getResult();\n     }\n     \/**","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ee7ebfaa4d4669e089c6dbbefe5b0917.infection.xml\n\nE..F\n\nTime: 00:00.356, Memory: 32.50 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Repository\\BookRepositoryTest::testFindByCategory\nDoctrine\\ORM\\Query\\QueryException: Too few parameters: the query defines 1 parameters but you only bound 0\n\n\/app\/vendor\/doctrine\/orm\/lib\/Doctrine\/ORM\/Query\/QueryException.php:94\n\/app\/vendor\/doctrine\/orm\/lib\/Doctrine\/ORM\/Query.php:310\n\/app\/vendor\/doctrine\/orm\/lib\/Doctrine\/ORM\/AbstractQuery.php:1212\n\/app\/vendor\/doctrine\/orm\/lib\/Doctrine\/ORM\/AbstractQuery.php:1166\n\/app\/vendor\/doctrine\/orm\/lib\/Doctrine\/ORM\/AbstractQuery.php:901\n\/app\/src\/Repository\/BookRepository.php:29\n\/app\/tests\/Repository\/BookRepositoryTest.php:38\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByCategory\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:38 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/Query.php(310): Doctrine\\\\ORM\\\\Query\\\\QueryException::tooFewParameters(1, 0)\\n#1 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/AbstractQuery.php(1212): Doctrine\\\\ORM\\\\Query->_doExecute()\\n#2 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/AbstractQuery.php(1166): Doctrine\\\\ORM\\\\AbstractQuery->executeIgnoreQueryCache(NULL, 1)\\n#3 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/AbstractQuery.php(901): Doctrine\\\\ORM\\\\AbstractQuery->execute(NULL, 1)\\n#4 \\\/app\\\/src\\\/Repository\\\/BookRepository.php(29): Doctrine\\\\ORM\\\\AbstractQuery->getResult()\\n#5 \\\/app\\\/src\\\/Service\\\/BookService.php(49): App\\\\Repository\\\\BookRepository->findByCategory(389)\\n#6 \\\/app\\\/src\\\/Controller\\\/BookController.php(31): App\\\\Service\\\\BookService->findBooksByCategory(389)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByCategory(389)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#9 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#10 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#11 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#12 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#13 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(17): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByCategory()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#21 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#22 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#23 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#24 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#25 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:20\n\nERRORS!\nTests: 4, Assertions: 5, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    3x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookRepositoryTest::setUp from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookRepositoryTest::testFindByCategory from App\\Tests\\Repository\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    public function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Book>\n *\n * @method Book|null find($id, $lockMode = null, $lockVersion = null)\n * @method Book|null findOneBy(array $criteria, array $orderBy = null)\n * @method Book[]    findAll()\n * @method Book[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Book::class);\n    }\n    \/**\n     * @return Book[]\n     *\/\n    public function findByCategory(int $id) : array\n    {\n        $query = $this->getEntityManager()->createQuery('SELECT b FROM App\\\\Entity\\\\Book b WHERE :categoryId MEMBER OF b.categories');\n        $query->setParameter('categoryId', $id);\n        return $query->getResult();\n    }\n    \/**\n     * @param int[] $ids\n     *\n     * @return Book[]\n     *\/\n    protected function findBooksByIds(array $ids) : array\n    {\n        return $this->findBy(['id' => $ids]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/BookRepository.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n      *\n      * @return Book[]\n      *\/\n-    public function findBooksByIds(array $ids) : array\n+    protected function findBooksByIds(array $ids) : array\n     {\n         return $this->findBy(['id' => $ids]);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.de448e755ccdbb9c8f5dd7588bd54559.infection.xml\n\n..F\n\nTime: 00:00.346, Memory: 32.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:39 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(63): Doctrine\\\\ORM\\\\EntityRepository->__call('findBooksByIds', Array)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1125)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1125)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        \n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/ReviewRepository.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(ManagerRegistry $registry)\n     {\n-        parent::__construct($registry, Review::class);\n+        \n     }\n     \/**\n      * @throws NonUniqueResultException","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.d38cd0affd78171f2ff9bc5ca08e4fd7.infection.xml\n\nF\n\nTime: 00:00.259, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:40 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(31): App\\\\Repository\\\\ReviewRepository->getPageByBookId(1126, 0, 5)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1126, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1126, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    protected function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/ReviewRepository.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n      * @throws NonUniqueResultException\n      * @throws NoResultException\n      *\/\n-    public function getBookTotalRatingSum(int $id) : int\n+    protected function getBookTotalRatingSum(int $id) : int\n     {\n         return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.60de5f3bcc83d392c993a5431f961536.infection.xml\n\n..F\n\nTime: 00:00.307, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:41 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/RatingService.php(15): Doctrine\\\\ORM\\\\EntityRepository->__call('getBookTotalRat...', Array)\\n#1 \\\/app\\\/src\\\/Service\\\/ReviewService.php(40): App\\\\Service\\\\RatingService->calcReview(1133, 1)\\n#2 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1133, 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1133, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    protected function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/ReviewRepository.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n     }\n-    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n+    protected function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n     {\n         $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n         return new Paginator(query: $query, fetchJoinCollection: false);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.29d465632ce5c4f2ec7453bcb941d8ab.infection.xml\n\nF\n\nTime: 00:00.299, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:42 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(31): Doctrine\\\\ORM\\\\EntityRepository->__call('getPageByBookId', Array, id: 1140, offset: 0, limit: 5)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1140, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1140, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"NewObject","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        return new Paginator(query: $query, fetchJoinCollection: false);\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Review;\nuse Countable;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Traversable;\n\/**\n * @extends ServiceEntityRepository<Review>\n *\n * @method Review|null find($id, $lockMode = null, $lockVersion = null)\n * @method Review|null findOneBy(array $criteria, array $orderBy = null)\n * @method Review[]    findAll()\n * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass ReviewRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Review::class);\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookTotalRatingSum(int $id) : int\n    {\n        return (int) $this->getEntityManager()->createQuery(dql: 'SELECT SUM(r.rating) FROM App\\\\Entity\\\\Review r WHERE r.book = :id')->setParameter(key: 'id', value: $id)->getSingleScalarResult();\n    }\n    public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n    {\n        $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n        new Paginator(query: $query, fetchJoinCollection: false);\n        return null;\n    }\n    public function countByBook(int $id) : int\n    {\n        return $this->count(['book' => $id]);\n    }\n}","originalFilePath":"\/app\/src\/Repository\/ReviewRepository.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     public function getPageByBookId(int $id, int $offset, int $limit) : Countable&Traversable\n     {\n         $query = $this->getEntityManager()->createQuery(dql: 'SELECT r FROM App\\\\Entity\\\\Review r WHERE r.book = :id ORDER BY r.createdAt DESC ')->setParameter(key: 'id', value: $id)->setFirstResult($offset)->setMaxResults($limit);\n-        return new Paginator(query: $query, fetchJoinCollection: false);\n+        new Paginator(query: $query, fetchJoinCollection: false);\n+        return null;\n     }\n     public function countByBook(int $id) : int\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e51232bd9536aeaba37989a0fb4f5125.infection.xml\n\n.F\n\nTime: 00:00.280, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:42 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/ReviewService.php(31): App\\\\Repository\\\\ReviewRepository->getPageByBookId(1139, 0, 5)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(56): App\\\\Service\\\\ReviewService->getReviewPageByBookId(1139, 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1139, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Subscriber;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Subscriber>\n *\n * @method Subscriber|null find($id, $lockMode = null, $lockVersion = null)\n * @method Subscriber|null findOneBy(array $criteria, array $orderBy = null)\n * @method Subscriber[]    findAll()\n * @method Subscriber[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass SubscriberRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Subscriber::class);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Subscriber;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<Subscriber>\n *\n * @method Subscriber|null find($id, $lockMode = null, $lockVersion = null)\n * @method Subscriber|null findOneBy(array $criteria, array $orderBy = null)\n * @method Subscriber[]    findAll()\n * @method Subscriber[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass SubscriberRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Repository\/SubscriberRepository.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(ManagerRegistry $registry)\n     {\n-        parent::__construct($registry, Subscriber::class);\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.fdaa93c9f1b8cc3ffebe5fdf441e9fac.infection.xml\n\nF\n\nTime: 00:00.262, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribe\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:44 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/SubscriberService.php(21): Doctrine\\\\ORM\\\\EntityRepository->findOneBy(Array)\\n#1 \\\/app\\\/src\\\/Controller\\\/SubscriberController.php(28): App\\\\Service\\\\SubscriberService->subscribe(Object(App\\\\Model\\\\SubscriberRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\SubscriberController->subscribe(Object(App\\\\Model\\\\SubscriberRequest))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/SubscriberControllerTest.php(12): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\SubscriberControllerTest->testSubscribe()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\SubscriberControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/SubscriberControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        \n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Repository\/UserRepository.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(ManagerRegistry $registry)\n     {\n-        parent::__construct($registry, User::class);\n+        \n     }\n     public function existByEmail(string $email) : bool\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2649b2b831aaf91d5c7570167af6a021.infection.xml\n\n.F\n\nTime: 00:00.260, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:44 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Security\\\/JWTUserProvider.php(50): Doctrine\\\\ORM\\\\EntityRepository->findOneBy(Array)\\n#1 \\\/app\\\/src\\\/Security\\\/JWTUserProvider.php(37): App\\\\Security\\\\JWTUserProvider->getUser('email', 'test@gmail.com')\\n#2 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Passport\\\/Badge\\\/UserBadge.php(87): App\\\\Security\\\\JWTUserProvider->loadUserByIdentifier('test@gmail.com')\\n#3 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Passport\\\/Passport.php(56): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Badge\\\\UserBadge->getUser()\\n#4 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/EventListener\\\/UserCheckerListener.php(42): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Passport->getUser()\\n#5 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\EventListener\\\\UserCheckerListener->preCheckCredentials(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...')\\n#9 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(180): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent))\\n#10 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(158): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticator(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#11 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(140): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticators(Array, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#12 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AuthenticatorManagerListener.php(40): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->authenticateRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#13 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticatorManagerListener.php(66): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#14 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/WrappedLazyListener.php(46): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#15 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AbstractListener.php(26): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\WrappedLazyListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#16 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/TraceableFirewallListener.php(83): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AbstractListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#17 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall.php(95): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\TraceableFirewallListener->callListeners(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), Object(Generator))\\n#18 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall->onKernelRequest(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#19 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#20 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#21 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#22 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(157): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#23 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#24 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#25 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#26 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#27 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#28 \\\/app\\\/tests\\\/AbstractControllerTestCase.php(56): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array, Array, Array, '{\\\"username\\\":\\\"te...')\\n#29 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(18): App\\\\Tests\\\\AbstractControllerTestCase->auth('test@gmail.com', 'testTest')\\n#30 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#31 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#32 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#33 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#34 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#35 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#36 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#37 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#38 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#39 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#40 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#41 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/AbstractControllerTestCase.php:63\n\/app\/tests\/Controller\/AdminControllerTest.php:18\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (5)\n\n  3x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    protected function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Repository\/UserRepository.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         parent::__construct($registry, User::class);\n     }\n-    public function existByEmail(string $email) : bool\n+    protected function existByEmail(string $email) : bool\n     {\n         return !empty($this->findBy(['email' => $email]));\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9308cd4fcd536cf1abe04964ab23363f.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.249, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:45 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/SignUpService.php(26): Doctrine\\\\ORM\\\\EntityRepository->__call('existByEmail', Array)\\n#1 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy([]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Repository\/UserRepository.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function existByEmail(string $email) : bool\n     {\n-        return !empty($this->findBy(['email' => $email]));\n+        return !empty($this->findBy([]));\n     }\n     public function getUser(int $userId) : User\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.545ea546ff089faccf19d3a5fe87b5dc.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.270, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 409 Conflict\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:44 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"User already exist\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Repository\/UserRepository.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function existByEmail(string $email) : bool\n     {\n-        return !empty($this->findBy(['email' => $email]));\n+        return empty($this->findBy(['email' => $email]));\n     }\n     public function getUser(int $userId) : User\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.481f67b42cc13b8a28bb58da7f604857.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.280, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AuthControllerTest::testSignUp\nFailed asserting that the Response is successful.\nHTTP\/1.1 409 Conflict\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:45 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"User already exist\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/AuthController.php(32): App\\\\Service\\\\SignUpService->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AuthController->signUp(Object(App\\\\Model\\\\SignUpRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/AuthControllerTest.php(11): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AuthControllerTest->testSignUp()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AuthControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AuthControllerTest.php:21\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AuthControllerTest::testSignUp from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AuthControllerTest::testSignUp from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    protected function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Repository\/UserRepository.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return !empty($this->findBy(['email' => $email]));\n     }\n-    public function getUser(int $userId) : User\n+    protected function getUser(int $userId) : User\n     {\n         $user = $this->find(['id' => $userId]);\n         if (!$user) {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.679ec22823d8addc9d099c9fa300609a.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.289, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:46 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/RoleService.php(28): Doctrine\\\\ORM\\\\EntityRepository->__call('getUser', Array)\\n#1 \\\/app\\\/src\\\/Service\\\/RoleService.php(23): App\\\\Service\\\\RoleService->grantRole(139, 'ROLE_AUTHOR')\\n#2 \\\/app\\\/src\\\/Controller\\\/AdminController.php(24): App\\\\Service\\\\RoleService->grantAuthor(139)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AdminController->grantAuthor(139)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(20): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AdminControllerTest.php:22\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find([]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Repository\/UserRepository.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getUser(int $userId) : User\n     {\n-        $user = $this->find(['id' => $userId]);\n+        $user = $this->find([]);\n         if (!$user) {\n             throw new UserNotFoundException('User not found');\n         }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.da1204f6dae84bd7ca890a7069789226.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.277, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:46 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/EntityManager.php(462): Doctrine\\\\ORM\\\\Exception\\\\MissingIdentifierField::fromFieldAndClass('id', 'App\\\\\\\\Entity\\\\\\\\User')\\n#1 \\\/app\\\/vendor\\\/doctrine\\\/orm\\\/lib\\\/Doctrine\\\/ORM\\\/EntityRepository.php(197): Doctrine\\\\ORM\\\\EntityManager->find('App\\\\\\\\Entity\\\\\\\\User', Array, NULL, NULL)\\n#2 \\\/app\\\/src\\\/Repository\\\/UserRepository.php(29): Doctrine\\\\ORM\\\\EntityRepository->find(Array)\\n#3 \\\/app\\\/src\\\/Service\\\/RoleService.php(28): App\\\\Repository\\\\UserRepository->getUser(135)\\n#4 \\\/app\\\/src\\\/Service\\\/RoleService.php(23): App\\\\Service\\\\RoleService->grantRole(135, 'ROLE_AUTHOR')\\n#5 \\\/app\\\/src\\\/Controller\\\/AdminController.php(24): App\\\\Service\\\\RoleService->grantAuthor(135)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AdminController->grantAuthor(135)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#9 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#10 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#11 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#12 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(20): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...')\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#21 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#22 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#23 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#24 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AdminControllerTest.php:22\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if ($user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Repository\/UserRepository.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n     public function getUser(int $userId) : User\n     {\n         $user = $this->find(['id' => $userId]);\n-        if (!$user) {\n+        if ($user) {\n             throw new UserNotFoundException('User not found');\n         }\n         return $user;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.82232bd7c41da44a7fa00520e3a1da68.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.281, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 404 Not Found\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:46 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"User not found\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/RoleService.php(28): App\\\\Repository\\\\UserRepository->getUser(137)\\n#1 \\\/app\\\/src\\\/Service\\\/RoleService.php(23): App\\\\Service\\\\RoleService->grantRole(137, 'ROLE_AUTHOR')\\n#2 \\\/app\\\/src\\\/Controller\\\/AdminController.php(24): App\\\\Service\\\\RoleService->grantAuthor(137)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AdminController->grantAuthor(137)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(20): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...')\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#20 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#21 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AdminControllerTest.php:22\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    protected function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":43},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param string[] $payload\n      *\/\n-    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n+    protected function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n     {\n         return $this->getUser('id', $payload['id']);\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2e2b0f52b0e356e0fe75096b02e8a983.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.264, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:47 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/lexik\\\/jwt-authentication-bundle\\\/Security\\\/Authenticator\\\/JWTAuthenticator.php(132): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Authenticator\\\\JWTAuthenticator->loadUser(Array, 'test@gmail.com')\\n#1 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Passport\\\/Badge\\\/UserBadge.php(87): Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Authenticator\\\\JWTAuthenticator->Lexik\\\\Bundle\\\\JWTAuthenticationBundle\\\\Security\\\\Authenticator\\\\{closure}('test@gmail.com')\\n#2 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Passport\\\/Passport.php(56): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Badge\\\\UserBadge->getUser()\\n#3 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/EventListener\\\/UserCheckerListener.php(42): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Passport\\\\Passport->getUser()\\n#4 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\EventListener\\\\UserCheckerListener->preCheckCredentials(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'Symfony\\\\\\\\Compone...', Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent), 'Symfony\\\\\\\\Compone...')\\n#8 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(180): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Event\\\\CheckPassportEvent))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(158): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticator(Object(Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticator), Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authentication\\\/AuthenticatorManager.php(140): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->executeAuthenticators(Array, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#11 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AuthenticatorManagerListener.php(40): Symfony\\\\Component\\\\Security\\\\Http\\\\Authentication\\\\AuthenticatorManager->authenticateRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#12 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Authenticator\\\/Debug\\\/TraceableAuthenticatorManagerListener.php(66): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#13 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/WrappedLazyListener.php(46): Symfony\\\\Component\\\\Security\\\\Http\\\\Authenticator\\\\Debug\\\\TraceableAuthenticatorManagerListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#14 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall\\\/AbstractListener.php(26): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\WrappedLazyListener->authenticate(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#15 \\\/app\\\/vendor\\\/symfony\\\/security-bundle\\\/Debug\\\/TraceableFirewallListener.php(83): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall\\\\AbstractListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#16 \\\/app\\\/vendor\\\/symfony\\\/security-http\\\/Firewall.php(95): Symfony\\\\Bundle\\\\SecurityBundle\\\\Debug\\\\TraceableFirewallListener->callListeners(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), Object(Generator))\\n#17 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\Security\\\\Http\\\\Firewall->onKernelRequest(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#18 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#19 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.request', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent))\\n#20 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#21 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(157): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent), 'kernel.request')\\n#22 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#23 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#24 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#25 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#26 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#27 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(20): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...')\\n#28 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#29 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#30 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#31 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#32 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#33 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#34 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#35 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#36 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#37 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#38 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#39 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AdminControllerTest.php:22\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":50},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function getUser(string $key, string|int $value) : UserInterface\n     {\n-        $user = $this->userRepository->findOneBy([$key => $value]);\n+        $user = $this->userRepository->findOneBy([]);\n         if (null === $user) {\n             $e = new UserNotFoundException('User with id not found');\n             $e->setUserIdentifier($value);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e04f04a3534c9163aa4282ffa25654b4.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:01.136, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 401 Unauthorized\nCache-Control:    no-cache, private\nContent-Type:     application\/json\nDate:             Tue, 05 Dec 2023 17:03:48 GMT\nWww-Authenticate: Bearer\nX-Robots-Tag:     noindex\n\n{\"code\":401,\"message\":\"Invalid credentials.\"}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/AbstractControllerTestCase.php:63\n\/app\/tests\/Controller\/AdminControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Identical","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null !== $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     private function getUser(string $key, string|int $value) : UserInterface\n     {\n         $user = $this->userRepository->findOneBy([$key => $value]);\n-        if (null === $user) {\n+        if (null !== $user) {\n             $e = new UserNotFoundException('User with id not found');\n             $e->setUserIdentifier($value);\n             throw $e;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.09df0822afbbef351cbb45864742f1c7.infection.xml\n\nF                                                                   1 \/ 1 (100%)\n\nTime: 00:00.260, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 401 Unauthorized\nCache-Control:    no-cache, private\nContent-Type:     application\/json\nDate:             Tue, 05 Dec 2023 17:03:48 GMT\nWww-Authenticate: Bearer\nX-Robots-Tag:     noindex\n\n{\"code\":401,\"message\":\"Invalid credentials.\"}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/AbstractControllerTestCase.php:63\n\/app\/tests\/Controller\/AdminControllerTest.php:18\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\BookCategory;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\Common\\Collections\\Criteria;\nclass BookCategoryService\n{\n    public function __construct(private BookCategoryRepository $bookCategoryRepository)\n    {\n    }\n    public function findAll() : BookCategoryListResponse\n    {\n        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n        $items = array_map(callback: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        }, array: $categories);\n        return new BookCategoryListResponse(items: $items);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\BookCategory;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\Common\\Collections\\Criteria;\nclass BookCategoryService\n{\n    public function __construct(private BookCategoryRepository $bookCategoryRepository)\n    {\n    }\n    protected function findAll() : BookCategoryListResponse\n    {\n        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n        $items = array_map(callback: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        }, array: $categories);\n        return new BookCategoryListResponse(items: $items);\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookCategoryService.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private BookCategoryRepository $bookCategoryRepository)\n     {\n     }\n-    public function findAll() : BookCategoryListResponse\n+    protected function findAll() : BookCategoryListResponse\n     {\n         $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n         $items = array_map(callback: function (BookCategory $bookCategory) {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.38578a58cba5d55964a4d7601c683f44.infection.xml\n\nEF                                                                  2 \/ 2 (100%)\n\nTime: 00:00.258, Memory: 26.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nError: Call to protected method App\\Service\\BookCategoryService::findAll() from scope App\\Tests\\Service\\BookCategoryServiceTest\n\n\/app\/tests\/Service\/BookCategoryServiceTest.php:34\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:01 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookCategoryController->index()\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/tests\\\/Controller\\\/BookCategoryControllerTest.php(15): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#7 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest->testIndex()\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookCategoryControllerTest))\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#17 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#18 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:18\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\BookCategory;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\Common\\Collections\\Criteria;\nclass BookCategoryService\n{\n    public function __construct(private BookCategoryRepository $bookCategoryRepository)\n    {\n    }\n    public function findAll() : BookCategoryListResponse\n    {\n        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n        $items = array_map(callback: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        }, array: $categories);\n        return new BookCategoryListResponse(items: $items);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\BookCategory;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\Common\\Collections\\Criteria;\nclass BookCategoryService\n{\n    public function __construct(private BookCategoryRepository $bookCategoryRepository)\n    {\n    }\n    public function findAll() : BookCategoryListResponse\n    {\n        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: []);\n        $items = array_map(callback: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        }, array: $categories);\n        return new BookCategoryListResponse(items: $items);\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookCategoryService.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function findAll() : BookCategoryListResponse\n     {\n-        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n+        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: []);\n         $items = array_map(callback: function (BookCategory $bookCategory) {\n             return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n         }, array: $categories);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e92b5c763341c09086315339751071ab.infection.xml\n\nF\n\nTime: 00:00.040, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nExpectation failed for method name is \"findBy\" when invoked 1 time\nParameter 1 for invocation Doctrine\\ORM\\EntityRepository::findBy([], [], null, null) does not match expected value.\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    'title' => 'ASC'\n )\n\n\/app\/src\/Service\/BookCategoryService.php:17\n\/app\/tests\/Service\/BookCategoryServiceTest.php:34\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/BookCategoryServiceTest.php:21\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1, Risky: 1."},{"mutator":{"mutatorName":"UnwrapArrayMap","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\BookCategory;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\Common\\Collections\\Criteria;\nclass BookCategoryService\n{\n    public function __construct(private BookCategoryRepository $bookCategoryRepository)\n    {\n    }\n    public function findAll() : BookCategoryListResponse\n    {\n        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n        $items = array_map(callback: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        }, array: $categories);\n        return new BookCategoryListResponse(items: $items);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\BookCategory;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\Common\\Collections\\Criteria;\nclass BookCategoryService\n{\n    public function __construct(private BookCategoryRepository $bookCategoryRepository)\n    {\n    }\n    public function findAll() : BookCategoryListResponse\n    {\n        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n        $items = $categories;\n        return new BookCategoryListResponse(items: $items);\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookCategoryService.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     public function findAll() : BookCategoryListResponse\n     {\n         $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n-        $items = array_map(callback: function (BookCategory $bookCategory) {\n-            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n-        }, array: $categories);\n+        $items = $categories;\n         return new BookCategoryListResponse(items: $items);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3c25ac4296150089179119994df73b6b.infection.xml\n\n.F                                                                  2 \/ 2 (100%)\n\nTime: 00:00.268, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookCategoryServiceTest::testFindAll\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n App\\Model\\BookCategoryListResponse Object (\n     'items' => Array (\n-        0 => App\\Model\\BookCategoryListItem Object #774 (\n+        0 => App\\Entity\\BookCategory Object #967 (\n             'id' => 1,\n             'title' => 'test',\n             'slug' => 'test',\n\n\/app\/tests\/Service\/BookCategoryServiceTest.php:34\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"NewObject","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\BookCategory;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\Common\\Collections\\Criteria;\nclass BookCategoryService\n{\n    public function __construct(private BookCategoryRepository $bookCategoryRepository)\n    {\n    }\n    public function findAll() : BookCategoryListResponse\n    {\n        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n        $items = array_map(callback: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        }, array: $categories);\n        return new BookCategoryListResponse(items: $items);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\BookCategory;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Repository\\BookCategoryRepository;\nuse Doctrine\\Common\\Collections\\Criteria;\nclass BookCategoryService\n{\n    public function __construct(private BookCategoryRepository $bookCategoryRepository)\n    {\n    }\n    public function findAll() : BookCategoryListResponse\n    {\n        $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n        $items = array_map(callback: function (BookCategory $bookCategory) {\n            new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n            return null;\n        }, array: $categories);\n        return new BookCategoryListResponse(items: $items);\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookCategoryService.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $categories = $this->bookCategoryRepository->findBy(criteria: [], orderBy: ['title' => Criteria::ASC]);\n         $items = array_map(callback: function (BookCategory $bookCategory) {\n-            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n+            new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n+            return null;\n         }, array: $categories);\n         return new BookCategoryListResponse(items: $items);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.96f5b91076740f9d3a75e5a7b509c347.infection.xml\n\nF\n\nTime: 00:00.239, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookCategoryControllerTest::testIndex\nFailed asserting that stdClass Object #1163 (\n    'items' => Array &0 [\n        0 => null,\n        1 => null,\n        2 => null,\n        3 => null,\n        4 => null,\n    ],\n) matches JSON schema.\n[items[0]] NULL value found, but an object is required\n[items[1]] NULL value found, but an object is required\n[items[2]] NULL value found, but an object is required\n[items[3]] NULL value found, but an object is required\n[items[4]] NULL value found, but an object is required\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:124\n\/app\/tests\/Controller\/BookCategoryControllerTest.php:19\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    protected function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n     {\n     }\n-    public function findBooksByCategory(int $categoryId) : BookListResponse\n+    protected function findBooksByCategory(int $categoryId) : BookListResponse\n     {\n         $category = $this->bookCategoryRepository->find($categoryId);\n         if (!$category) {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.31053e11c2368ebd7441d7bd0e8a6e88.infection.xml\n\n.F\n\nTime: 00:00.038, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategoryNotFound\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\BookCategoryNotFoundException\". Message was: \"Call to protected method App\\Service\\BookService::findBooksByCategory() from scope App\\Tests\\Service\\BookServiceTest\" at\n\/app\/tests\/Service\/BookServiceTest.php:48\n.\n\nFAILURES!\nTests: 2, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if ($category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n     public function findBooksByCategory(int $categoryId) : BookListResponse\n     {\n         $category = $this->bookCategoryRepository->find($categoryId);\n-        if (!$category) {\n+        if ($category) {\n             throw new BookCategoryNotFoundException();\n         }\n         return new BookListResponse(array_map(callback: function (Book $book) {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7d412eab3fca4246a8a4ca847e2149b1.infection.xml\n\n.EF\n\nTime: 00:00.037, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nApp\\Exception\\BookCategoryNotFoundException: Book category not found\n\n\/app\/src\/Service\/BookService.php:33\n\/app\/tests\/Service\/BookServiceTest.php:104\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategoryNotFound\nFailed asserting that exception of type \"App\\Exception\\BookCategoryNotFoundException\" is thrown.\n\nERRORS!\nTests: 3, Assertions: 4, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $category = $this->bookCategoryRepository->find($categoryId);\n         if (!$category) {\n-            throw new BookCategoryNotFoundException();\n+            new BookCategoryNotFoundException();\n         }\n         return new BookListResponse(array_map(callback: function (Book $book) {\n             return BookMapper::map($book, BookListItem::class);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.720eb2e51458f2be42bf6b94b466ab07.infection.xml\n\n..F\n\nTime: 00:00.036, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategoryNotFound\nFailed asserting that exception of type \"App\\Exception\\BookCategoryNotFoundException\" is thrown.\n\nFAILURES!\nTests: 3, Assertions: 7, Failures: 1."},{"mutator":{"mutatorName":"UnwrapArrayMap","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse($this->bookRepository->findByCategory($categoryId));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":45},"diff":"--- Original\n+++ New\n@@ @@\n         if (!$category) {\n             throw new BookCategoryNotFoundException();\n         }\n-        return new BookListResponse(array_map(callback: function (Book $book) {\n-            return BookMapper::map($book, BookListItem::class);\n-        }, array: $this->bookRepository->findByCategory($categoryId)));\n+        return new BookListResponse($this->bookRepository->findByCategory($categoryId));\n     }\n     public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1717b35d39594086d35e3865db3693b5.infection.xml\n\n.F\n\nTime: 00:00.038, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByCategory\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n App\\Model\\BookListResponse Object (\n     'items' => Array (\n-        0 => App\\Model\\BookListItem Object #547 (\n+        0 => App\\Entity\\Book Object #712 (\n             'id' => 100,\n             'title' => 'test',\n             'slug' => 'test',\n@@ @@\n             'authors' => Array &0 [\n                 0 => 'lorem',\n             ],\n-            'publicationDate' => '2023-12-12T00:00:00+00:00',\n+            'isbn' => '1234',\n+            'description' => 'test description',\n+            'publicationDate' => DateTime Object #101 (\n+                'date' => '2023-12-12 00:00:00.000000',\n+                'timezone_type' => 3,\n+                'timezone' => 'UTC',\n+            ),\n+            'categories' => Doctrine\\Common\\Collections\\ArrayCollection Object #666 (\n+                'elements' => Array &1 [\n+                    0 => 'android',\n+                ],\n+            ),\n+            'formats' => Doctrine\\Common\\Collections\\ArrayCollection Object #656 (\n+                'elements' => Array &2 [],\n+            ),\n+            'reviews' => Doctrine\\Common\\Collections\\ArrayCollection Object #654 (\n+                'elements' => Array &3 [],\n+            ),\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:93\n\nFAILURES!\nTests: 2, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    protected function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n             return BookMapper::map($book, BookListItem::class);\n         }, array: $this->bookRepository->findByCategory($categoryId)));\n     }\n-    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n+    protected function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n     {\n         $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n             return $recommendationItem->getId();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bb78493525ecce6131fcd293031014a7.infection.xml\n\n...EE..F\n\nTime: 00:00.292, Memory: 30.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nError: Call to protected method App\\Service\\BookService::findBooksByRecommendations() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nError: Call to protected method App\\Service\\BookService::findBooksByRecommendations() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:03 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1170)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#7 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#17 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#18 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 8, Assertions: 13, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"UnwrapArrayMap","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations();\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":55},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n     {\n-        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n-            return $recommendationItem->getId();\n-        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n+        $ids = $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations();\n         return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n     }\n     \/**","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9aca8a3d62b7efe50f1662545a2b3e40.infection.xml\n\n...F\n\nTime: 00:00.042, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nExpectation failed for method name is \"findBooksByIds\" when invoked 1 time\nParameter 0 for invocation App\\Repository\\BookRepository::findBooksByIds([...]): array does not match expected value.\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 => 5\n+    0 => App\\Model\\Recommendation\\RecommendationItem Object (...)\n )\n\n\/app\/src\/Service\/BookService.php:42\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/BookServiceTest.php:206\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1, Risky: 1."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map(['mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":63},"diff":"--- Original\n+++ New\n@@ @@\n         $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n             return $recommendationItem->getId();\n         }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n-        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n+        return new BookListRecommendationResponse(array_map(['mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n     }\n     \/**\n      * @throws NonUniqueResultException","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4d90cfc466dc3e9ee7c180fa301d766a.infection.xml\n\n...EEF\n\nTime: 00:00.311, Memory: 30.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nTypeError: array_map(): Argument #1 ($callback) must be a valid callback or null, array callback must have exactly two members\n\n\/app\/src\/Service\/BookService.php:44\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n2) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #1\nTypeError: array_map(): Argument #1 ($callback) must be a valid callback or null, array callback must have exactly two members\n\n\/app\/src\/Service\/BookService.php:44\n\/app\/tests\/Service\/BookServiceTest.php:252\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:02 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(44): array_map(Array, Array)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1167)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1167)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nERRORS!\nTests: 6, Assertions: 9, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"UnwrapArrayMap","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse($this->bookRepository->findBooksByIds($ids));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":63},"diff":"--- Original\n+++ New\n@@ @@\n         $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n             return $recommendationItem->getId();\n         }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n-        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n+        return new BookListRecommendationResponse($this->bookRepository->findBooksByIds($ids));\n     }\n     \/**\n      * @throws NonUniqueResultException","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ca5d0cf5403f6e46408cca7dfe00fb06.infection.xml\n\n...F\n\nTime: 00:00.041, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\BookServiceTest::testFindBooksByRecommendations with data set #0\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n App\\Model\\BookListRecommendationResponse Object (\n     'items' => Array (\n-        0 => App\\Model\\RecommendedBook Object #546 (\n+        0 => App\\Entity\\Book Object #109 (\n             'id' => 5,\n             'title' => 'test',\n             'slug' => 'test',\n+            'image' => 'test',\n+            'authors' => Array &0 [\n+                0 => 'lorem',\n+            ],\n+            'isbn' => '1234',\n             'description' => 'short description',\n+            'publicationDate' => DateTime Object #542 (\n+                'date' => '2023-12-12 00:00:00.000000',\n+                'timezone_type' => 3,\n+                'timezone' => 'UTC',\n+            ),\n+            'categories' => Doctrine\\Common\\Collections\\ArrayCollection Object #548 (\n+                'elements' => Array &1 [],\n+            ),\n+            'formats' => Doctrine\\Common\\Collections\\ArrayCollection Object #716 (\n+                'elements' => Array &2 [],\n+            ),\n+            'reviews' => Doctrine\\Common\\Collections\\ArrayCollection Object #663 (\n+                'elements' => Array &3 [],\n+            ),\n         )\n     )\n )\n\n\/app\/tests\/Service\/BookServiceTest.php:262\n\nFAILURES!\nTests: 4, Assertions: 9, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    protected function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":71},"diff":"--- Original\n+++ New\n@@ @@\n      * @throws NonUniqueResultException\n      * @throws NoResultException\n      *\/\n-    public function getBookById(int $id) : BookDetails\n+    protected function getBookById(int $id) : BookDetails\n     {\n         $book = $this->bookRepository->find($id);\n         if (!$book) {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0ad41b7fd19912a428b31a3c70381a58.infection.xml\n\nE.....F\n\nTime: 00:00.303, Memory: 30.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nError: Call to protected method App\\Service\\BookService::getBookById() from scope App\\Tests\\Service\\BookServiceTest\n\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:04 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(1173)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#7 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#17 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#18 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 7, Assertions: 14, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if ($book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":75},"diff":"--- Original\n+++ New\n@@ @@\n     public function getBookById(int $id) : BookDetails\n     {\n         $book = $this->bookRepository->find($id);\n-        if (!$book) {\n+        if ($book) {\n             throw new BookNotFoundException();\n         }\n         $reviews = $this->reviewRepository->countByBook($id);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a1af813ee75233b0c6bc0a254123cb82.infection.xml\n\nE....F\n\nTime: 00:00.276, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\BookServiceTest::testGetBookById\nApp\\Exception\\BookNotFoundException: Book not found\n\n\/app\/src\/Service\/BookService.php:54\n\/app\/tests\/Service\/BookServiceTest.php:177\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 404 Not Found\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:03 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Book not found\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(1171)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(1171)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nERRORS!\nTests: 6, Assertions: 12, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nreadonly class ExceptionMapping\n{\n    public function __construct(private int $code, private bool $hidden, private bool $loggable)\n    {\n    }\n    public function getCode() : int\n    {\n        return $this->code;\n    }\n    public function isHidden() : bool\n    {\n        return $this->hidden;\n    }\n    public function isLoggable() : bool\n    {\n        return $this->loggable;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nreadonly class ExceptionMapping\n{\n    public function __construct(private int $code, private bool $hidden, private bool $loggable)\n    {\n    }\n    protected function getCode() : int\n    {\n        return $this->code;\n    }\n    public function isHidden() : bool\n    {\n        return $this->hidden;\n    }\n    public function isLoggable() : bool\n    {\n        return $this->loggable;\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMapping.php","originalStartLine":14},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private int $code, private bool $hidden, private bool $loggable)\n     {\n     }\n-    public function getCode() : int\n+    protected function getCode() : int\n     {\n         return $this->code;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.30083f8d6761f4c59d20e62a8e231386.infection.xml\n\n.EE.E.E                                                             7 \/ 7 (100%)\n\nTime: 00:00.264, Memory: 28.00 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveSubClass\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::getCode() from scope App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:43\n\n2) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::getCode() from scope App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:33\n\n3) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::getCode() from scope App\\Tests\\Listener\\ApiExceptionListenerTest\n\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:29\n\n4) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::getCode() from scope App\\Listener\\ApiExceptionListener\n\n\/app\/src\/Listener\/ApiExceptionListener.php:42\n\/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php:116\n\/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php:220\n\/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php:56\n\/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php:139\n\/app\/vendor\/symfony\/http-kernel\/HttpKernel.php:239\n\/app\/vendor\/symfony\/http-kernel\/HttpKernel.php:91\n\/app\/vendor\/symfony\/http-kernel\/Kernel.php:197\n\/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php:65\n\/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php:171\n\/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php:403\n\/app\/tests\/Controller\/SubscriberControllerTest.php:23\n\nERRORS!\nTests: 7, Assertions: 3, Errors: 4.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nreadonly class ExceptionMapping\n{\n    public function __construct(private int $code, private bool $hidden, private bool $loggable)\n    {\n    }\n    public function getCode() : int\n    {\n        return $this->code;\n    }\n    public function isHidden() : bool\n    {\n        return $this->hidden;\n    }\n    public function isLoggable() : bool\n    {\n        return $this->loggable;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nreadonly class ExceptionMapping\n{\n    public function __construct(private int $code, private bool $hidden, private bool $loggable)\n    {\n    }\n    public function getCode() : int\n    {\n        return $this->code;\n    }\n    protected function isHidden() : bool\n    {\n        return $this->hidden;\n    }\n    public function isLoggable() : bool\n    {\n        return $this->loggable;\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMapping.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->code;\n     }\n-    public function isHidden() : bool\n+    protected function isHidden() : bool\n     {\n         return $this->hidden;\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5e23fb34f96e9dc28225415116408dd3.infection.xml\n\nE...EE.                                                             7 \/ 7 (100%)\n\nTime: 00:00.310, Memory: 28.00 MB\n\nThere were 3 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::isHidden() from scope App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:34\n\n2) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::isHidden() from scope App\\Listener\\ApiExceptionListener\n\n\/app\/src\/Listener\/ApiExceptionListener.php:52\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:48\n\n3) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::isHidden() from scope App\\Listener\\ApiExceptionListener\n\n\/app\/src\/Listener\/ApiExceptionListener.php:52\n\/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php:116\n\/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php:220\n\/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php:56\n\/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php:139\n\/app\/vendor\/symfony\/http-kernel\/HttpKernel.php:239\n\/app\/vendor\/symfony\/http-kernel\/HttpKernel.php:91\n\/app\/vendor\/symfony\/http-kernel\/Kernel.php:197\n\/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php:65\n\/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php:171\n\/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php:403\n\/app\/tests\/Controller\/SubscriberControllerTest.php:23\n\nERRORS!\nTests: 7, Assertions: 5, Errors: 3.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nreadonly class ExceptionMapping\n{\n    public function __construct(private int $code, private bool $hidden, private bool $loggable)\n    {\n    }\n    public function getCode() : int\n    {\n        return $this->code;\n    }\n    public function isHidden() : bool\n    {\n        return $this->hidden;\n    }\n    public function isLoggable() : bool\n    {\n        return $this->loggable;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nreadonly class ExceptionMapping\n{\n    public function __construct(private int $code, private bool $hidden, private bool $loggable)\n    {\n    }\n    public function getCode() : int\n    {\n        return $this->code;\n    }\n    public function isHidden() : bool\n    {\n        return $this->hidden;\n    }\n    protected function isLoggable() : bool\n    {\n        return $this->loggable;\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMapping.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->hidden;\n     }\n-    public function isLoggable() : bool\n+    protected function isLoggable() : bool\n     {\n         return $this->loggable;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.957374689decb8b7f385c3c623b788d5.infection.xml\n\n..E.EE.                                                             7 \/ 7 (100%)\n\nTime: 00:00.292, Memory: 28.00 MB\n\nThere were 3 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::isLoggable() from scope App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:35\n\n2) App\\Tests\\Listener\\ApiExceptionListenerTest::testNone500MappingWithHiddenMessage\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::isLoggable() from scope App\\Listener\\ApiExceptionListener\n\n\/app\/src\/Listener\/ApiExceptionListener.php:42\n\/app\/tests\/Listener\/ApiExceptionListenerTest.php:48\n\n3) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMapping::isLoggable() from scope App\\Listener\\ApiExceptionListener\n\n\/app\/src\/Listener\/ApiExceptionListener.php:42\n\/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php:116\n\/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php:220\n\/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php:56\n\/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php:139\n\/app\/vendor\/symfony\/http-kernel\/HttpKernel.php:239\n\/app\/vendor\/symfony\/http-kernel\/HttpKernel.php:91\n\/app\/vendor\/symfony\/http-kernel\/Kernel.php:197\n\/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php:65\n\/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php:171\n\/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php:403\n\/app\/tests\/Controller\/SubscriberControllerTest.php:23\n\nERRORS!\nTests: 7, Assertions: 6, Errors: 3.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Foreach_","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach (array() as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function __construct(array $mappings)\n     {\n-        foreach ($mappings as $classKey => $mapping) {\n+        foreach (array() as $classKey => $mapping) {\n             if (empty($mapping['code'])) {\n                 throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n             }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a21cdd1e97eba34e31656e184ad3bcda.infection.xml\n\nE.EF\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:33\n\n2) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveSubClass\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:43\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveThrowsExceptionOnEmptyCode\nFailed asserting that exception of type \"InvalidArgumentException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 2, Errors: 2, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         foreach ($mappings as $classKey => $mapping) {\n             if (empty($mapping['code'])) {\n-                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n+                new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n             }\n             $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n         }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.541de9fb53684e0ae5ddb8089f087271.infection.xml\n\n...\nWarning: Undefined array key \"code\" in \/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php on line 19\nF                                                                4 \/ 4 (100%)\n\nTime: 00:00.020, Memory: 10.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveThrowsExceptionOnEmptyCode\nFailed asserting that exception of type \"TypeError\" matches expected exception \"InvalidArgumentException\". Message was: \"App\\Service\\ExceptionHandler\\ExceptionMappingResolver::addMapping(): Argument #2 ($code) must be of type int, null given, called in \/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php on line 19\" at\n\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php:33\n\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php:19\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:18\n.\n\nFAILURES!\nTests: 4, Assertions: 6, Failures: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            \n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n             if (empty($mapping['code'])) {\n                 throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n             }\n-            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n+            \n         }\n     }\n     public function resolve(string $throwableClass) : ?ExceptionMapping","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e69da5bfe1cd895c02134ba0f0d13648.infection.xml\n\n.EE....F\n\nTime: 00:00.333, Memory: 30.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveSubClass\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:43\n\n2) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:33\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that the Response status code is 422.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:52 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(176): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/SubscriberControllerTest.php(23): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\SubscriberControllerTest->testSubscribeNotAgreed()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\SubscriberControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:38\n\/app\/tests\/Controller\/SubscriberControllerTest.php:31\n\nERRORS!\nTests: 8, Assertions: 8, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  4x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n    1x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n    1x in BookCategoryControllerTest::testIndex from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? true, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n             if (empty($mapping['code'])) {\n                 throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n             }\n-            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n+            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? true, loggable: $mapping['loggable'] ?? false);\n         }\n     }\n     public function resolve(string $throwableClass) : ?ExceptionMapping","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4588c83f2941b941efcb2d4525710d4e.infection.xml\n\nF\n\nTime: 00:00.020, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nFailed asserting that true is false.\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:34\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? true);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n             if (empty($mapping['code'])) {\n                 throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n             }\n-            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n+            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? true);\n         }\n     }\n     public function resolve(string $throwableClass) : ?ExceptionMapping","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5dd067ad8c479d3f11f285b745f2ddb4.infection.xml\n\n..F\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nFailed asserting that true is false.\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:35\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1."},{"mutator":{"mutatorName":"Coalesce","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: false ?? $mapping['loggable']);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n             if (empty($mapping['code'])) {\n                 throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n             }\n-            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n+            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: false ?? $mapping['loggable']);\n         }\n     }\n     public function resolve(string $throwableClass) : ?ExceptionMapping","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0365919a6432f7f1dfacc835f1a04782.infection.xml\n\n....F\n\nTime: 00:00.264, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that stdClass Object #1357 (\n    'message' => 'This value should be of type unknown.\\n\nThis value should not be blank.\\n\nThis value should not be blank.',\n    'details' => stdClass Object #1358 (\n        'trace' => '#0 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php(116): Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#1 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(220): Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener->__invoke(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher))\\n\n#2 \/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php(56): Symfony\\Component\\EventDispatcher\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent))\\n\n#3 \/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php(139): Symfony\\Component\\EventDispatcher\\EventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#4 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(176): Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcher->dispatch(Object(Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent), 'kernel.controll...')\\n\n#5 \/app\/vendor\/symfony\/http-kernel\/HttpKernel.php(76): Symfony\\Component\\HttpKernel\\HttpKernel->handleRaw(Object(Symfony\\Component\\HttpFoundation\\Request), 1)\\n\n#6 \/app\/vendor\/symfony\/http-kernel\/Kernel.php(197): Symfony\\Component\\HttpKernel\\HttpKernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#7 \/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php(65): Symfony\\Component\\HttpKernel\\Kernel->handle(Object(Symfony\\Component\\HttpFoundation\\Request), 1, true)\\n\n#8 \/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php(171): Symfony\\Component\\HttpKernel\\HttpKernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#9 \/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php(403): Symfony\\Bundle\\FrameworkBundle\\KernelBrowser->doRequest(Object(Symfony\\Component\\HttpFoundation\\Request))\\n\n#10 \/app\/tests\/Controller\/SubscriberControllerTest.php(23): Symfony\\Component\\BrowserKit\\AbstractBrowser->request('POST', 'http:\/\/localhos...', Array)\\n\n#11 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(1114): App\\Tests\\Controller\\SubscriberControllerTest->testSubscribeNotAgreed()\\n\n#12 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(653): PHPUnit\\Framework\\TestCase->runTest()\\n\n#13 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestRunner.php(103): PHPUnit\\Framework\\TestCase->runBare()\\n\n#14 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestCase.php(489): PHPUnit\\Framework\\TestRunner->run(Object(App\\Tests\\Controller\\SubscriberControllerTest))\\n\n#15 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestCase->run()\\n\n#16 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#17 \/app\/vendor\/phpunit\/phpunit\/src\/Framework\/TestSuite.php(340): PHPUnit\\Framework\\TestSuite->run()\\n\n#18 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/TestRunner.php(63): PHPUnit\\Framework\\TestSuite->run()\\n\n#19 \/app\/vendor\/phpunit\/phpunit\/src\/TextUI\/Application.php(189): PHPUnit\\TextUI\\TestRunner->run(Object(PHPUnit\\TextUI\\Configuration\\Configuration), Object(PHPUnit\\Runner\\ResultCache\\DefaultResultCache), Object(PHPUnit\\Framework\\TestSuite))\\n\n#20 \/app\/vendor\/phpunit\/phpunit\/phpunit(99): PHPUnit\\TextUI\\Application->run(Array)\\n\n#21 \/app\/vendor\/bin\/phpunit(122): include('\/app\/vendor\/php...')\\n\n#22 {main}',\n    ),\n) matches is equal to <text> at JSON path '$.message' and matches is equal to {enable export of objects to see this value} at JSON path '$.details'.\n\nmatches is equal to {enable export of objects to see this value} at JSON path '$.details'\n\n\/app\/vendor\/helmich\/phpunit-json-assert\/src\/JsonAssertions.php:111\n\/app\/tests\/Controller\/SubscriberControllerTest.php:32\n\nFAILURES!\nTests: 5, Assertions: 8, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    protected function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n             $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n         }\n     }\n-    public function resolve(string $throwableClass) : ?ExceptionMapping\n+    protected function resolve(string $throwableClass) : ?ExceptionMapping\n     {\n         $foundMapping = null;\n         foreach ($this->mappings as $classKey => $mapping) {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.53ef66dc1a260f10fa69f2a145d2d5a2.infection.xml\n\nEEE.E.                                                              6 \/ 6 (100%)\n\nTime: 00:00.270, Memory: 28.00 MB\n\nThere were 4 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMappingResolver::resolve() from scope App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:31\n\n2) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveToNullWhenNotFound\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMappingResolver::resolve() from scope App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:25\n\n3) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveSubClass\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMappingResolver::resolve() from scope App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:41\n\n4) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nError: Call to protected method App\\Service\\ExceptionHandler\\ExceptionMappingResolver::resolve() from scope App\\Listener\\ApiExceptionListener\n\n\/app\/src\/Listener\/ApiExceptionListener.php:36\n\/app\/vendor\/symfony\/event-dispatcher\/Debug\/WrappedListener.php:116\n\/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php:220\n\/app\/vendor\/symfony\/event-dispatcher\/EventDispatcher.php:56\n\/app\/vendor\/symfony\/event-dispatcher\/Debug\/TraceableEventDispatcher.php:139\n\/app\/vendor\/symfony\/http-kernel\/HttpKernel.php:239\n\/app\/vendor\/symfony\/http-kernel\/HttpKernel.php:91\n\/app\/vendor\/symfony\/http-kernel\/Kernel.php:197\n\/app\/vendor\/symfony\/http-kernel\/HttpKernelBrowser.php:65\n\/app\/vendor\/symfony\/framework-bundle\/KernelBrowser.php:171\n\/app\/vendor\/symfony\/browser-kit\/AbstractBrowser.php:403\n\/app\/tests\/Controller\/SubscriberControllerTest.php:23\n\nERRORS!\nTests: 6, Assertions: 2, Errors: 4.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Foreach_","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach (array() as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n     public function resolve(string $throwableClass) : ?ExceptionMapping\n     {\n         $foundMapping = null;\n-        foreach ($this->mappings as $classKey => $mapping) {\n+        foreach (array() as $classKey => $mapping) {\n             if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                 $foundMapping = $mapping;\n                 break;","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b1d5742eee35ebd5db21117860262c93.infection.xml\n\n.EE..F                                                              6 \/ 6 (100%)\n\nTime: 00:00.286, Memory: 28.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveSubClass\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:43\n\n2) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:33\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that the Response status code is 422.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:55 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(176): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/SubscriberControllerTest.php(23): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\SubscriberControllerTest->testSubscribeNotAgreed()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\SubscriberControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:38\n\/app\/tests\/Controller\/SubscriberControllerTest.php:31\n\nERRORS!\nTests: 6, Assertions: 4, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Identical","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass !== $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $foundMapping = null;\n         foreach ($this->mappings as $classKey => $mapping) {\n-            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n+            if ($throwableClass !== $classKey || is_subclass_of($throwableClass, $classKey)) {\n                 $foundMapping = $mapping;\n                 break;\n             }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.28014d37dbae09a067cc4b635e5ea143.infection.xml\n\n..E.F\n\nTime: 00:00.255, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:33\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that the Response status code is 422.\nHTTP\/1.1 404 Not Found\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:52 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Not Found\",\"details\":null}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:38\n\/app\/tests\/Controller\/SubscriberControllerTest.php:31\n\nERRORS!\nTests: 5, Assertions: 4, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalOr","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey && is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $foundMapping = null;\n         foreach ($this->mappings as $classKey => $mapping) {\n-            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n+            if ($throwableClass === $classKey && is_subclass_of($throwableClass, $classKey)) {\n                 $foundMapping = $mapping;\n                 break;\n             }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.56eab7293568dcc6ad062772f9c8ed17.infection.xml\n\n.EE..F                                                              6 \/ 6 (100%)\n\nTime: 00:00.275, Memory: 28.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:33\n\n2) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveSubClass\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:43\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that the Response status code is 422.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:53 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/WrappedListener.php(116): Symfony\\\\Component\\\\HttpKernel\\\\Controller\\\\ArgumentResolver\\\\RequestPayloadValueResolver->onKernelControllerArguments(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(220): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\WrappedListener->__invoke(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Debug\\\\TraceableEventDispatcher))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/EventDispatcher.php(56): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->callListeners(Array, 'kernel.controll...', Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent))\\n#3 \\\/app\\\/vendor\\\/symfony\\\/event-dispatcher\\\/Debug\\\/TraceableEventDispatcher.php(139): Symfony\\\\Component\\\\EventDispatcher\\\\EventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(176): Symfony\\\\Component\\\\EventDispatcher\\\\Debug\\\\TraceableEventDispatcher->dispatch(Object(Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\ControllerArgumentsEvent), 'kernel.controll...')\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#7 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#8 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#9 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#10 \\\/app\\\/tests\\\/Controller\\\/SubscriberControllerTest.php(23): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\SubscriberControllerTest->testSubscribeNotAgreed()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\SubscriberControllerTest))\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#19 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#20 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#21 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#22 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:38\n\/app\/tests\/Controller\/SubscriberControllerTest.php:31\n\nERRORS!\nTests: 6, Assertions: 4, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalOrAllSubExprNegation","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if (!($throwableClass === $classKey) || !is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $foundMapping = null;\n         foreach ($this->mappings as $classKey => $mapping) {\n-            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n+            if (!($throwableClass === $classKey) || !is_subclass_of($throwableClass, $classKey)) {\n                 $foundMapping = $mapping;\n                 break;\n             }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.fcfad576354c8d710fc606dd5f6847e7.infection.xml\n\n....F\n\nTime: 00:00.244, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that the Response status code is 422.\nHTTP\/1.1 404 Not Found\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:53 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Not Found\",\"details\":null}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:38\n\/app\/tests\/Controller\/SubscriberControllerTest.php:31\n\nFAILURES!\nTests: 5, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalOrNegation","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if (!($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey))) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $foundMapping = null;\n         foreach ($this->mappings as $classKey => $mapping) {\n-            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n+            if (!($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey))) {\n                 $foundMapping = $mapping;\n                 break;\n             }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7b247cd2e23091ab20eaa1c3b200e8cf.infection.xml\n\n.EE.F\n\nTime: 00:00.254, Memory: 28.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveClassItself\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:33\n\n2) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveSubClass\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:43\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that the Response status code is 422.\nHTTP\/1.1 404 Not Found\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:54 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Not Found\",\"details\":null}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:38\n\/app\/tests\/Controller\/SubscriberControllerTest.php:31\n\nERRORS!\nTests: 5, Assertions: 3, Errors: 2, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"LogicalOrSingleSubExprNegation","originalSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\ExceptionHandler;\n\nuse InvalidArgumentException;\nclass ExceptionMappingResolver\n{\n    \/** @var ExceptionMapping[] *\/\n    private array $mappings = [];\n    \/**\n     * @param array<string, array{code: int, hidden?: bool, loggable?: bool}> $mappings\n     *\/\n    public function __construct(array $mappings)\n    {\n        foreach ($mappings as $classKey => $mapping) {\n            if (empty($mapping['code'])) {\n                throw new InvalidArgumentException(sprintf('Code is mandatory for class %s', $classKey));\n            }\n            $this->addMapping(class: $classKey, code: $mapping['code'], hidden: $mapping['hidden'] ?? false, loggable: $mapping['loggable'] ?? false);\n        }\n    }\n    public function resolve(string $throwableClass) : ?ExceptionMapping\n    {\n        $foundMapping = null;\n        foreach ($this->mappings as $classKey => $mapping) {\n            if ($throwableClass === $classKey || !is_subclass_of($throwableClass, $classKey)) {\n                $foundMapping = $mapping;\n                break;\n            }\n        }\n        return $foundMapping;\n    }\n    private function addMapping(string $class, int $code, bool $hidden, bool $loggable) : void\n    {\n        $this->mappings[$class] = new ExceptionMapping(code: $code, hidden: $hidden, loggable: $loggable);\n    }\n}","originalFilePath":"\/app\/src\/Service\/ExceptionHandler\/ExceptionMappingResolver.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $foundMapping = null;\n         foreach ($this->mappings as $classKey => $mapping) {\n-            if ($throwableClass === $classKey || is_subclass_of($throwableClass, $classKey)) {\n+            if ($throwableClass === $classKey || !is_subclass_of($throwableClass, $classKey)) {\n                 $foundMapping = $mapping;\n                 break;\n             }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ef160ed38a7ecba0a2037711ca7492c8.infection.xml\n\nE...F\n\nTime: 00:00.246, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\ExceptionHandler\\ExceptionMappingResolverTest::testResolveSubClass\nError: Call to a member function getCode() on null\n\n\/app\/tests\/Service\/ExceptionHandler\/ExceptionMappingResolverTest.php:43\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribeNotAgreed\nFailed asserting that the Response status code is 422.\nHTTP\/1.1 404 Not Found\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:54 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Not Found\",\"details\":null}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:38\n\/app\/tests\/Controller\/SubscriberControllerTest.php:31\n\nERRORS!\nTests: 5, Assertions: 6, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    protected function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","originalFilePath":"\/app\/src\/Service\/RatingService.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly ReviewRepository $reviewRepository)\n     {\n     }\n-    public function calcReview(int $id, int $total) : float\n+    protected function calcReview(int $id, int $total) : float\n     {\n         return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.41a5144c38a850a8de28e10c0428c860.infection.xml\n\nF\n\nTime: 00:00.258, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:06 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(1185)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(1185)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"GreaterThan","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total >= 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","originalFilePath":"\/app\/src\/Service\/RatingService.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function calcReview(int $id, int $total) : float\n     {\n-        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n+        return $total >= 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.027d9024b72a2089fa46d10333fe272f.infection.xml\n\nF\n\nTime: 00:00.257, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:04 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(104): App\\\\Service\\\\RatingService->calcReview(1174, 0)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(1174)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(1174)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"GreaterThanNegotiation","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total <= 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","originalFilePath":"\/app\/src\/Service\/RatingService.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function calcReview(int $id, int $total) : float\n     {\n-        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n+        return $total <= 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.62b15df8ff4ff08ec64d935560538394.infection.xml\n\n.F\n\nTime: 00:00.290, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBookById\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:04 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(104): App\\\\Service\\\\RatingService->calcReview(1176, 0)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(47): App\\\\Service\\\\BookService->getBookById(1176)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksById(1176)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(142): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBookById()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:145\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Division","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) * $total : 0;\n    }\n}","originalFilePath":"\/app\/src\/Service\/RatingService.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function calcReview(int $id, int $total) : float\n     {\n-        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n+        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) * $total : 0;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.8c4355a338c9c798c2b04d5012212861.infection.xml\n\n.....F\n\nTime: 00:00.335, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\RatingServiceTest::testCalcReview with data set #0\nFailed asserting that 500.0 matches expected 1.25.\n\n\/app\/tests\/Service\/RatingServiceTest.php:40\n\nFAILURES!\nTests: 6, Assertions: 11, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : -1;\n    }\n}","originalFilePath":"\/app\/src\/Service\/RatingService.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function calcReview(int $id, int $total) : float\n     {\n-        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n+        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : -1;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f301de29e9ac96c64908cc63dce50692.infection.xml\n\n....F\n\nTime: 00:00.327, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\RatingServiceTest::testCalcReviewZeroTotal\nFailed asserting that -1.0 matches expected 0.\n\n\/app\/tests\/Service\/RatingServiceTest.php:50\n\nFAILURES!\nTests: 5, Assertions: 9, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 1;\n    }\n}","originalFilePath":"\/app\/src\/Service\/RatingService.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function calcReview(int $id, int $total) : float\n     {\n-        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n+        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 1;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.56236936bb5e39359f395eb04100940f.infection.xml\n\nF\n\nTime: 00:00.029, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\RatingServiceTest::testCalcReviewZeroTotal\nFailed asserting that 1.0 matches expected 0.\n\n\/app\/tests\/Service\/RatingServiceTest.php:50\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Ternary","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\ReviewRepository;\nclass RatingService\n{\n    public function __construct(private readonly ReviewRepository $reviewRepository)\n    {\n    }\n    public function calcReview(int $id, int $total) : float\n    {\n        return $total > 0 ? 0 : $this->reviewRepository->getBookTotalRatingSum($id) \/ $total;\n    }\n}","originalFilePath":"\/app\/src\/Service\/RatingService.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function calcReview(int $id, int $total) : float\n     {\n-        return $total > 0 ? $this->reviewRepository->getBookTotalRatingSum($id) \/ $total : 0;\n+        return $total > 0 ? 0 : $this->reviewRepository->getBookTotalRatingSum($id) \/ $total;\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c4cb8e898458b3418975e053c6fe2271.infection.xml\n\nF\n\nTime: 00:00.029, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\RatingServiceTest::testCalcReviewZeroTotal\nApp\\Repository\\ReviewRepository::getBookTotalRatingSum(1): int was not expected to be called.\n\n\/app\/src\/Service\/RatingService.php:13\n\/app\/tests\/Service\/RatingServiceTest.php:50\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\RatingServiceTest::testCalcReviewZeroTotal\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/RatingServiceTest.php:46\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1, Risky: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    protected function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n      * @throws RecommendationAccessDeniedException\n      * @throws RecommendationRequestException\n      *\/\n-    public function getRecommendationByBookId(int $id) : RecommendationResponse\n+    protected function getRecommendationByBookId(int $id) : RecommendationResponse\n     {\n         try {\n             $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.58bd1374fef2d3f6461f54a15d621f09.infection.xml\n\nF\n\nTime: 00:00.249, Memory: 26.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:59 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1166)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1166)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Concat","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: $id . '\/api\/v1\/book\/' . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     public function getRecommendationByBookId(int $id) : RecommendationResponse\n     {\n         try {\n-            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n+            $response = $this->recommendationClient->request(method: 'GET', url: $id . '\/api\/v1\/book\/' . '\/recommendations');\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ccbcdbfa94153e586553648e98720a5d.infection.xml\n\n..F\n\nTime: 00:00.300, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:56 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(59): App\\\\Service\\\\Recommendation\\\\RecommendationService->getRecommendationByBookId(1155)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1155)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1155)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     public function getRecommendationByBookId(int $id) : RecommendationResponse\n     {\n         try {\n-            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n+            $response = $this->recommendationClient->request(method: 'GET', url: $id . '\/recommendations');\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9f8b7be53f948a21f51ea845b7f53c82.infection.xml\n\nF\n\nTime: 00:00.269, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:56 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(59): App\\\\Service\\\\Recommendation\\\\RecommendationService->getRecommendationByBookId(1156)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1156)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1156)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1.\n\nRemaining indirect deprecation notices (6)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     public function getRecommendationByBookId(int $id) : RecommendationResponse\n     {\n         try {\n-            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n+            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . '\/recommendations');\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.27f408bf2b4390707e887a17476eaca8.infection.xml\n\n...F\n\nTime: 00:00.374, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:57 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(59): App\\\\Service\\\\Recommendation\\\\RecommendationService->getRecommendationByBookId(1160)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1160)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1160)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testReview from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Concat","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . '\/recommendations' . $id);\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     public function getRecommendationByBookId(int $id) : RecommendationResponse\n     {\n         try {\n-            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n+            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . '\/recommendations' . $id);\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.76968feb43ad7955204802dc8192b30f.infection.xml\n\n..F\n\nTime: 00:00.311, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:57 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(59): App\\\\Service\\\\Recommendation\\\\RecommendationService->getRecommendationByBookId(1163)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1163)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1163)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 3, Assertions: 5, Failures: 1.\n\nRemaining indirect deprecation notices (8)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  3x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id);\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     public function getRecommendationByBookId(int $id) : RecommendationResponse\n     {\n         try {\n-            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n+            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id);\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2657705425c8f97e5ef4fa3563d37a00.infection.xml\n\n.F\n\nTime: 00:00.281, Memory: 30.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testBooksByRecommendations\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:03:58 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Service\\\/BookService.php(59): App\\\\Service\\\\Recommendation\\\\RecommendationService->getRecommendationByBookId(1165)\\n#1 \\\/app\\\/src\\\/Controller\\\/BookController.php(39): App\\\\Service\\\\BookService->findBooksByRecommendations(1165)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->booksByRecommendations(1165)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#6 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#8 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(181): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testBooksByRecommendations()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#18 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#19 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#20 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:184\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller"},{"mutator":{"mutatorName":"InstanceOf_","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if (false && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();\n-            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n+            if (false && Response::HTTP_FORBIDDEN === $statusCode) {\n                 throw new RecommendationAccessDeniedException();\n             }\n             throw new RecommendationRequestException($exception->getMessage(), $exception);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6122649b38cd9d5f7862f0d8cffd94b1.infection.xml\n\nF\n\nTime: 00:00.030, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\Recommendation\\RecommendationServiceTest::testGetRecommendationByBookId with data set #0\nFailed asserting that exception of type \"App\\Exception\\RecommendationRequestException\" matches expected exception \"App\\Exception\\RecommendationAccessDeniedException\". Message was: \"HTTP 403 returned for \"https:\/\/example.com\/api\/v1\/book\/1\/recommendations\".\" at\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:168\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:45\n\/app\/src\/Service\/Recommendation\/RecommendationService.php:27\n\/app\/tests\/Service\/Recommendation\/RecommendationServiceTest.php:44\n.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Identical","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN !== $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();\n-            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n+            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN !== $statusCode) {\n                 throw new RecommendationAccessDeniedException();\n             }\n             throw new RecommendationRequestException($exception->getMessage(), $exception);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0ffaa275f2783e3e703d8a26ba7bf4d2.infection.xml\n\nF\n\nTime: 00:00.032, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\Recommendation\\RecommendationServiceTest::testGetRecommendationByBookId with data set #0\nFailed asserting that exception of type \"App\\Exception\\RecommendationRequestException\" matches expected exception \"App\\Exception\\RecommendationAccessDeniedException\". Message was: \"HTTP 403 returned for \"https:\/\/example.com\/api\/v1\/book\/1\/recommendations\".\" at\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:168\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:45\n\/app\/src\/Service\/Recommendation\/RecommendationService.php:27\n\/app\/tests\/Service\/Recommendation\/RecommendationServiceTest.php:44\n.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"LogicalAndAllSubExprNegation","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if (!$exception instanceof ClientException && !(Response::HTTP_FORBIDDEN === $statusCode)) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();\n-            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n+            if (!$exception instanceof ClientException && !(Response::HTTP_FORBIDDEN === $statusCode)) {\n                 throw new RecommendationAccessDeniedException();\n             }\n             throw new RecommendationRequestException($exception->getMessage(), $exception);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7984877ce0642cee17e4dfd4a95823fc.infection.xml\n\nF\n\nTime: 00:00.029, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\Recommendation\\RecommendationServiceTest::testGetRecommendationByBookId with data set #0\nFailed asserting that exception of type \"App\\Exception\\RecommendationRequestException\" matches expected exception \"App\\Exception\\RecommendationAccessDeniedException\". Message was: \"HTTP 403 returned for \"https:\/\/example.com\/api\/v1\/book\/1\/recommendations\".\" at\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:168\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:45\n\/app\/src\/Service\/Recommendation\/RecommendationService.php:27\n\/app\/tests\/Service\/Recommendation\/RecommendationServiceTest.php:44\n.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"LogicalAndNegation","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if (!($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode)) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n             return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();\n-            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n+            if (!($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode)) {\n                 throw new RecommendationAccessDeniedException();\n             }\n             throw new RecommendationRequestException($exception->getMessage(), $exception);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.00185558746a60206ad8283453a2cfb0.infection.xml\n\nF\n\nTime: 00:00.030, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\Recommendation\\RecommendationServiceTest::testGetRecommendationByBookId with data set #0\nFailed asserting that exception of type \"App\\Exception\\RecommendationRequestException\" matches expected exception \"App\\Exception\\RecommendationAccessDeniedException\". Message was: \"HTTP 403 returned for \"https:\/\/example.com\/api\/v1\/book\/1\/recommendations\".\" at\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:168\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:45\n\/app\/src\/Service\/Recommendation\/RecommendationService.php:27\n\/app\/tests\/Service\/Recommendation\/RecommendationServiceTest.php:44\n.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n         } catch (Throwable $exception) {\n             $statusCode = $exception->getCode();\n             if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n-                throw new RecommendationAccessDeniedException();\n+                new RecommendationAccessDeniedException();\n             }\n             throw new RecommendationRequestException($exception->getMessage(), $exception);\n         }\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.66cdbf69f4f5b47edc3a5b91e4cf8970.infection.xml\n\nF\n\nTime: 00:00.030, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\Recommendation\\RecommendationServiceTest::testGetRecommendationByBookId with data set #0\nFailed asserting that exception of type \"App\\Exception\\RecommendationRequestException\" matches expected exception \"App\\Exception\\RecommendationAccessDeniedException\". Message was: \"HTTP 403 returned for \"https:\/\/example.com\/api\/v1\/book\/1\/recommendations\".\" at\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:168\n\/app\/vendor\/symfony\/http-client\/Response\/CommonResponseTrait.php:45\n\/app\/src\/Service\/Recommendation\/RecommendationService.php:27\n\/app\/tests\/Service\/Recommendation\/RecommendationServiceTest.php:44\n.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            throw new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service\\Recommendation;\n\nuse App\\Exception\\RecommendationAccessDeniedException;\nuse App\\Exception\\RecommendationRequestException;\nuse App\\Model\\Recommendation\\RecommendationResponse;\nuse Symfony\\Component\\HttpClient\\Exception\\ClientException;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Throwable;\nclass RecommendationService\n{\n    public function __construct(private HttpClientInterface $recommendationClient, private SerializerInterface $serializer)\n    {\n    }\n    \/**\n     * @throws RecommendationAccessDeniedException\n     * @throws RecommendationRequestException\n     *\/\n    public function getRecommendationByBookId(int $id) : RecommendationResponse\n    {\n        try {\n            $response = $this->recommendationClient->request(method: 'GET', url: '\/api\/v1\/book\/' . $id . '\/recommendations');\n            return $this->serializer->deserialize(data: $response->getContent(), type: RecommendationResponse::class, format: JsonEncoder::FORMAT);\n        } catch (Throwable $exception) {\n            $statusCode = $exception->getCode();\n            if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                throw new RecommendationAccessDeniedException();\n            }\n            new RecommendationRequestException($exception->getMessage(), $exception);\n        }\n    }\n}","originalFilePath":"\/app\/src\/Service\/Recommendation\/RecommendationService.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n             if ($exception instanceof ClientException && Response::HTTP_FORBIDDEN === $statusCode) {\n                 throw new RecommendationAccessDeniedException();\n             }\n-            throw new RecommendationRequestException($exception->getMessage(), $exception);\n+            new RecommendationRequestException($exception->getMessage(), $exception);\n         }\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c913cfca9f840b5a0cf08f4cb40b0556.infection.xml\n\n.F                                                                  2 \/ 2 (100%)\n\nTime: 00:00.031, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\Recommendation\\RecommendationServiceTest::testGetRecommendationByBookId with data set #1\nFailed asserting that exception of type \"TypeError\" matches expected exception \"App\\Exception\\RecommendationRequestException\". Message was: \"App\\Service\\Recommendation\\RecommendationService::getRecommendationByBookId(): Return value must be of type App\\Model\\Recommendation\\RecommendationResponse, none returned\" at\n\/app\/src\/Service\/Recommendation\/RecommendationService.php:35\n\/app\/tests\/Service\/Recommendation\/RecommendationServiceTest.php:44\n.\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    protected function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n      * @throws NoResultException\n      * @throws Exception\n      *\/\n-    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n+    protected function getReviewPageByBookId(int $id, int $page) : ReviewPage\n     {\n         $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n         $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ac4842c084c997f664f2560c5ab1d98d.infection.xml\n\n.F\n\nTime: 00:00.268, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\BookControllerTest::testReview\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:12 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\BookController->reviews(1231, Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/tests\\\/Controller\\\/BookControllerTest.php(94): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('GET', 'http:\\\/\\\/localhos...')\\n#7 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\BookControllerTest->testReview()\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\BookControllerTest))\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#17 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#18 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/BookControllerTest.php:97\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (7)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 0, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n     {\n-        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n+        $offset = max($page - 0, 0) * self::PAGE_LIMIT;\n         $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n         $total = count($paginator);\n         $items = [];","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e0a18b68f37273ceaad4578b058847bf.infection.xml\n\n.......F\n\nTime: 00:00.333, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nExpectation failed for method name is \"getPageByBookId\" when invoked 1 time\nParameter 1 for invocation App\\Repository\\ReviewRepository::getPageByBookId(1, 5, 5): Countable&Traversable does not match expected value.\nFailed asserting that 5 matches expected 0.\n\n\/app\/src\/Service\/ReviewService.php:26\n\/app\/tests\/Service\/ReviewServiceTest.php:98\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/ReviewServiceTest.php:66\n\nFAILURES!\nTests: 8, Assertions: 17, Failures: 1, Risky: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Minus","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page + 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n     {\n-        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n+        $offset = max($page + 1, 0) * self::PAGE_LIMIT;\n         $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n         $total = count($paginator);\n         $items = [];","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3e0b6ac7b8f5ed794f672fa764f7922d.infection.xml\n\n....F\n\nTime: 00:00.344, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdInvalidPage with data set #0\nExpectation failed for method name is \"getPageByBookId\" when invoked 1 time\nParameter 1 for invocation App\\Repository\\ReviewRepository::getPageByBookId(1, 5, 5): Countable&Traversable does not match expected value.\nFailed asserting that 5 matches expected 0.\n\n\/app\/src\/Service\/ReviewService.php:26\n\/app\/tests\/Service\/ReviewServiceTest.php:60\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdInvalidPage with data set #0\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/ReviewServiceTest.php:44\n\nFAILURES!\nTests: 5, Assertions: 8, Failures: 1, Risky: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, -1) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n     {\n-        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n+        $offset = max($page - 1, -1) * self::PAGE_LIMIT;\n         $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n         $total = count($paginator);\n         $items = [];","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.8a48a6f084d06eede3d99becc4baaccb.infection.xml\n\n....F\n\nTime: 00:00.329, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdInvalidPage with data set #0\nExpectation failed for method name is \"getPageByBookId\" when invoked 1 time\nParameter 1 for invocation App\\Repository\\ReviewRepository::getPageByBookId(1, -5, 5): Countable&Traversable does not match expected value.\nFailed asserting that -5 matches expected 0.\n\n\/app\/src\/Service\/ReviewService.php:26\n\/app\/tests\/Service\/ReviewServiceTest.php:60\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdInvalidPage with data set #0\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/ReviewServiceTest.php:44\n\nFAILURES!\nTests: 5, Assertions: 8, Failures: 1, Risky: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 1) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n      *\/\n     public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n     {\n-        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n+        $offset = max($page - 1, 1) * self::PAGE_LIMIT;\n         $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n         $total = count($paginator);\n         $items = [];","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3211b9c5b3ef1fd6242c2f967b9424bb.infection.xml\n\n....F\n\nTime: 00:00.328, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdInvalidPage with data set #0\nExpectation failed for method name is \"getPageByBookId\" when invoked 1 time\nParameter 1 for invocation App\\Repository\\ReviewRepository::getPageByBookId(1, 5, 5): Countable&Traversable does not match expected value.\nFailed asserting that 5 matches expected 0.\n\n\/app\/src\/Service\/ReviewService.php:26\n\/app\/tests\/Service\/ReviewServiceTest.php:60\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdInvalidPage with data set #0\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/ReviewServiceTest.php:44\n\nFAILURES!\nTests: 5, Assertions: 8, Failures: 1, Risky: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Foreach_","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach (array() as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n         $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n         $total = count($paginator);\n         $items = [];\n-        foreach ($paginator as $item) {\n+        foreach (array() as $item) {\n             $items[] = $this->map($item);\n         }\n         return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.34a065346a23397e6bb75901d7d08330.infection.xml\n\n.......F\n\nTime: 00:00.333, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n App\\Model\\ReviewPage Object (\n     'items' => Array (\n-        0 => App\\Model\\Review Object (...)\n     )\n     'rating' => 4.0\n     'page' => 1\n\n\/app\/tests\/Service\/ReviewServiceTest.php:98\n\nFAILURES!\nTests: 8, Assertions: 18, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Division","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total * self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n         foreach ($paginator as $item) {\n             $items[] = $this->map($item);\n         }\n-        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n+        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total * self::PAGE_LIMIT))->setItems($items);\n     }\n     public function map(Review $review) : ReviewModel\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.60109a4df019e1264722d3f7af7ee072.infection.xml\n\n.......F\n\nTime: 00:00.339, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'items' => [...]\n     'rating' => 4.0\n     'page' => 1\n-    'pages' => 1\n+    'pages' => 5\n     'perPage' => 5\n     'total' => 1\n )\n\n\/app\/tests\/Service\/ReviewServiceTest.php:98\n\nFAILURES!\nTests: 8, Assertions: 18, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"RoundingFamily","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) floor($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n         foreach ($paginator as $item) {\n             $items[] = $this->map($item);\n         }\n-        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n+        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) floor($total \/ self::PAGE_LIMIT))->setItems($items);\n     }\n     public function map(Review $review) : ReviewModel\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1bf6e38c8c1e0f918a55c7172c66e26e.infection.xml\n\n.......F\n\nTime: 00:00.400, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'items' => [...]\n     'rating' => 4.0\n     'page' => 1\n-    'pages' => 1\n+    'pages' => 0\n     'perPage' => 5\n     'total' => 1\n )\n\n\/app\/tests\/Service\/ReviewServiceTest.php:98\n\nFAILURES!\nTests: 8, Assertions: 18, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller"},{"mutator":{"mutatorName":"RoundingFamily","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Review;\nuse App\\Model\\Review as ReviewModel;\nuse App\\Model\\ReviewPage;\nuse App\\Repository\\ReviewRepository;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nuse Exception;\nclass ReviewService\n{\n    private const PAGE_LIMIT = 5;\n    public function __construct(private readonly ReviewRepository $reviewRepository, private readonly RatingService $ratingService)\n    {\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     * @throws Exception\n     *\/\n    public function getReviewPageByBookId(int $id, int $page) : ReviewPage\n    {\n        $offset = max($page - 1, 0) * self::PAGE_LIMIT;\n        $paginator = $this->reviewRepository->getPageByBookId(id: $id, offset: $offset, limit: self::PAGE_LIMIT);\n        $total = count($paginator);\n        $items = [];\n        foreach ($paginator as $item) {\n            $items[] = $this->map($item);\n        }\n        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) round($total \/ self::PAGE_LIMIT))->setItems($items);\n    }\n    public function map(Review $review) : ReviewModel\n    {\n        return (new ReviewModel())->setId($review->getId())->setRating($review->getRating())->setCreatedAt($review->getCreatedAt()->format(DATE_ATOM))->setAuthor($review->getAuthor())->setContent($review->getContent());\n    }\n}","originalFilePath":"\/app\/src\/Service\/ReviewService.php","originalStartLine":44},"diff":"--- Original\n+++ New\n@@ @@\n         foreach ($paginator as $item) {\n             $items[] = $this->map($item);\n         }\n-        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) ceil($total \/ self::PAGE_LIMIT))->setItems($items);\n+        return (new ReviewPage())->setRating($this->ratingService->calcReview($id, $total))->setTotal($total)->setPage($page)->setPerPage(self::PAGE_LIMIT)->setPages((int) round($total \/ self::PAGE_LIMIT))->setItems($items);\n     }\n     public function map(Review $review) : ReviewModel\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ed354f955dda95d5b921dd052e3f4036.infection.xml\n\n.......F\n\nTime: 00:00.359, Memory: 34.50 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\ReviewServiceTest::testGetReviewPageByBookIdSuccess with data set #0\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'items' => [...]\n     'rating' => 4.0\n     'page' => 1\n-    'pages' => 1\n+    'pages' => 0\n     'perPage' => 5\n     'total' => 1\n )\n\n\/app\/tests\/Service\/ReviewServiceTest.php:98\n\nFAILURES!\nTests: 8, Assertions: 18, Failures: 1.\n\nRemaining indirect deprecation notices (9)\n\n  5x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    5x in BookControllerTest::testBookById from App\\Tests\\Controller\n\n  4x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in BookControllerTest::testBookById from App\\Tests\\Controller\n    1x in BookControllerTest::testReview from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByRecommendations from App\\Tests\\Controller\n    1x in BookControllerTest::testBooksByCategory from App\\Tests\\Controller"},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    protected function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/RoleService.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n     {\n     }\n-    public function grantAdmin(int $userId) : void\n+    protected function grantAdmin(int $userId) : void\n     {\n         $this->grantRole($userId, 'ROLE_ADMIN');\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5508ad96c51df7ca6782145ab6135fcb.infection.xml\n\nE.                                                                  2 \/ 2 (100%)\n\nTime: 00:00.032, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\RoleServiceTest::testGrantAdmin\nError: Call to protected method App\\Service\\RoleService::grantAdmin() from scope App\\Tests\\Service\\RoleServiceTest\n\n\/app\/tests\/Service\/RoleServiceTest.php:34\n\nERRORS!\nTests: 2, Assertions: 3, Errors: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        \n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/RoleService.php","originalStartLine":18},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function grantAdmin(int $userId) : void\n     {\n-        $this->grantRole($userId, 'ROLE_ADMIN');\n+        \n     }\n     public function grantAuthor(int $userId) : void\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7f482a709fb57c756fcdda99a30ba224.infection.xml\n\n.E                                                                  2 \/ 2 (100%)\n\nTime: 00:00.034, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\RoleServiceTest::testGrantAdmin\nError: Typed property App\\Entity\\User::$roles must not be accessed before initialization\n\n\/app\/src\/Entity\/User.php:92\n\/app\/tests\/Service\/RoleServiceTest.php:36\n\nERRORS!\nTests: 2, Assertions: 3, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    protected function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/RoleService.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $this->grantRole($userId, 'ROLE_ADMIN');\n     }\n-    public function grantAuthor(int $userId) : void\n+    protected function grantAuthor(int $userId) : void\n     {\n         $this->grantRole($userId, 'ROLE_AUTHOR');\n     }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.29117258ad1bddb521af21f41c2b00cd.infection.xml\n\n.EF                                                                 3 \/ 3 (100%)\n\nTime: 00:00.289, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\RoleServiceTest::testGrantAuthor\nError: Call to protected method App\\Service\\RoleService::grantAuthor() from scope App\\Tests\\Service\\RoleServiceTest\n\n\/app\/tests\/Service\/RoleServiceTest.php:41\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\AdminControllerTest::testGrantAuthor\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:14 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\AdminController->grantAuthor(154)\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/tests\\\/Controller\\\/AdminControllerTest.php(20): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...')\\n#7 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\AdminControllerTest->testGrantAuthor()\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\AdminControllerTest))\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#17 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#18 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/AdminControllerTest.php:22\n\nERRORS!\nTests: 3, Assertions: 5, Errors: 1, Failures: 1.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        \n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/RoleService.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function grantAuthor(int $userId) : void\n     {\n-        $this->grantRole($userId, 'ROLE_AUTHOR');\n+        \n     }\n     private function grantRole(int $userId, string $role) : void\n     {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ffcf88a1ed3b2ae045df1ffc48d2bec4.infection.xml\n\nE..                                                                 3 \/ 3 (100%)\n\nTime: 00:00.298, Memory: 28.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\RoleServiceTest::testGrantAuthor\nError: Typed property App\\Entity\\User::$roles must not be accessed before initialization\n\n\/app\/src\/Entity\/User.php:92\n\/app\/tests\/Service\/RoleServiceTest.php:43\n\nERRORS!\nTests: 3, Assertions: 5, Errors: 1.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/RoleService.php","originalStartLine":29},"diff":"--- Original\n+++ New\n@@ @@\n     private function grantRole(int $userId, string $role) : void\n     {\n         $user = $this->userRepository->getUser($userId);\n-        $user->setRoles([$role]);\n+        $user->setRoles([]);\n         $this->entityManager->persist($user);\n         $this->entityManager->flush();\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b779aa4a1d7001efe2e4c4fbda3ba7d5.infection.xml\n\nF\n\nTime: 00:00.036, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\RoleServiceTest::testGrantAdmin\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 => 'ROLE_ADMIN'\n )\n\n\/app\/tests\/Service\/RoleServiceTest.php:36\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        \n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/RoleService.php","originalStartLine":29},"diff":"--- Original\n+++ New\n@@ @@\n     private function grantRole(int $userId, string $role) : void\n     {\n         $user = $this->userRepository->getUser($userId);\n-        $user->setRoles([$role]);\n+        \n         $this->entityManager->persist($user);\n         $this->entityManager->flush();\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.df59d22150794e694d9a7eac48ce4253.infection.xml\n\nEE.                                                                 3 \/ 3 (100%)\n\nTime: 00:00.293, Memory: 28.00 MB\n\nThere were 2 errors:\n\n1) App\\Tests\\Service\\RoleServiceTest::testGrantAuthor\nError: Typed property App\\Entity\\User::$roles must not be accessed before initialization\n\n\/app\/src\/Entity\/User.php:92\n\/app\/tests\/Service\/RoleServiceTest.php:43\n\n2) App\\Tests\\Service\\RoleServiceTest::testGrantAdmin\nError: Typed property App\\Entity\\User::$roles must not be accessed before initialization\n\n\/app\/src\/Entity\/User.php:92\n\/app\/tests\/Service\/RoleServiceTest.php:36\n\nERRORS!\nTests: 3, Assertions: 2, Errors: 2.\n\nRemaining indirect deprecation notices (4)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller\n\n  2x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    2x in AdminControllerTest::testGrantAuthor from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class RoleService\n{\n    public function __construct(private UserRepository $userRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function grantAdmin(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_ADMIN');\n    }\n    public function grantAuthor(int $userId) : void\n    {\n        $this->grantRole($userId, 'ROLE_AUTHOR');\n    }\n    private function grantRole(int $userId, string $role) : void\n    {\n        $user = $this->userRepository->getUser($userId);\n        $user->setRoles([$role]);\n        $this->entityManager->persist($user);\n        \n    }\n}","originalFilePath":"\/app\/src\/Service\/RoleService.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n         $user = $this->userRepository->getUser($userId);\n         $user->setRoles([$role]);\n         $this->entityManager->persist($user);\n-        $this->entityManager->flush();\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.408ca915a1785363a3117e238504e69e.infection.xml\n\nF\n\nTime: 00:00.039, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\RoleServiceTest::testGrantAuthor\nExpectation failed for method name is \"flush\" when invoked 1 time.\nMethod was expected to be called 1 time, actually called 0 times.\n\nFAILURES!\nTests: 1, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    protected function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","originalFilePath":"\/app\/src\/Service\/SignUpService.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n     {\n     }\n-    public function signUp(SignUpRequest $signUpRequest) : Response\n+    protected function signUp(SignUpRequest $signUpRequest) : Response\n     {\n         if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n             throw new UserAlreadyExistException();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ddca6a5817f1409661f53a55fad25fc5.infection.xml\n\nF\n\nTime: 00:00.035, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUpUserAlreadyExist\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\UserAlreadyExistException\". Message was: \"Call to protected method App\\Service\\SignUpService::signUp() from scope App\\Tests\\Service\\SignUpServiceTest\" at\n\/app\/tests\/Service\/SignUpServiceTest.php:49\n.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"IfNegation","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if (!$this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","originalFilePath":"\/app\/src\/Service\/SignUpService.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function signUp(SignUpRequest $signUpRequest) : Response\n     {\n-        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n+        if (!$this->userRepository->existByEmail($signUpRequest->getEmail())) {\n             throw new UserAlreadyExistException();\n         }\n         $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e4c29f39de98dcb91861c170ff962c2e.infection.xml\n\nEF\n\nTime: 00:00.037, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nApp\\Exception\\UserAlreadyExistException: User already exist\n\n\/app\/src\/Service\/SignUpService.php:21\n\/app\/tests\/Service\/SignUpServiceTest.php:89\n\n--\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUpUserAlreadyExist\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\UserAlreadyExistException\". Message was: \"Typed property App\\Model\\SignUpRequest::$lastname must not be accessed before initialization\" at\n\/app\/src\/Model\/SignUpRequest.php:54\n\/app\/src\/Service\/SignUpService.php:23\n\/app\/tests\/Service\/SignUpServiceTest.php:49\n.\n\nERRORS!\nTests: 2, Assertions: 1, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","originalFilePath":"\/app\/src\/Service\/SignUpService.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     public function signUp(SignUpRequest $signUpRequest) : Response\n     {\n         if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n-            throw new UserAlreadyExistException();\n+            new UserAlreadyExistException();\n         }\n         $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n         $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c3554ac0860716a6975a0c922447798b.infection.xml\n\n.F                                                                  2 \/ 2 (100%)\n\nTime: 00:00.045, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUpUserAlreadyExist\nFailed asserting that exception of type \"Error\" matches expected exception \"App\\Exception\\UserAlreadyExistException\". Message was: \"Typed property App\\Model\\SignUpRequest::$lastname must not be accessed before initialization\" at\n\/app\/src\/Model\/SignUpRequest.php:54\n\/app\/src\/Service\/SignUpService.php:23\n\/app\/tests\/Service\/SignUpServiceTest.php:49\n.\n\nFAILURES!\nTests: 2, Assertions: 6, Failures: 1."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles([])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","originalFilePath":"\/app\/src\/Service\/SignUpService.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n         if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n             throw new UserAlreadyExistException();\n         }\n-        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n+        $user = (new User())->setRoles([])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n         $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n         $this->entityManager->persist($user);\n         $this->entityManager->flush();","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1c16ab0b33a34a0b747c6b42782df24a.infection.xml\n\nF\n\nTime: 00:00.037, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nExpectation failed for method name is \"hashPassword\" when invoked 1 time\nParameter 0 for invocation Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasher::hashPassword(App\\Entity\\User Object (...), 'testTest'): string does not match expected value.\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'firstName' => 'test'\n     'lastname' => 'test'\n     'roles' => Array (\n-        0 => 'ROLE_USER'\n     )\n )\n\n\/app\/src\/Service\/SignUpService.php:24\n\/app\/tests\/Service\/SignUpServiceTest.php:89\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/SignUpServiceTest.php:52\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1, Risky: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        \n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","originalFilePath":"\/app\/src\/Service\/SignUpService.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n             throw new UserAlreadyExistException();\n         }\n         $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n-        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n+        \n         $this->entityManager->persist($user);\n         $this->entityManager->flush();\n         return $this->successHandler->handleAuthenticationSuccess($user);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.efb1a08e2a90f26b25193bcce8e61b2b.infection.xml\n\n.F\n\nTime: 00:00.040, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nExpectation failed for method name is \"persist\" when invoked 1 time\nParameter 0 for invocation Doctrine\\Persistence\\ObjectManager::persist(App\\Entity\\User Object (...)) does not match expected value.\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n     'email' => 'test@gmail.com'\n     'firstName' => 'test'\n     'lastname' => 'test'\n-    'password' => 'hashPassword'\n     'roles' => [...]\n )\n\n\/app\/src\/Service\/SignUpService.php:25\n\/app\/tests\/Service\/SignUpServiceTest.php:89\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/SignUpServiceTest.php:52\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1, Risky: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        \n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","originalFilePath":"\/app\/src\/Service\/SignUpService.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n         $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n-        $this->entityManager->persist($user);\n+        \n         $this->entityManager->flush();\n         return $this->successHandler->handleAuthenticationSuccess($user);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.11040ec6a4970b57d11fa5bb51462fcc.infection.xml\n\n.F\n\nTime: 00:00.038, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nExpectation failed for method name is \"persist\" when invoked 1 time.\nMethod was expected to be called 1 time, actually called 0 times.\n\nFAILURES!\nTests: 2, Assertions: 6, Failures: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserAlreadyExistException;\nuse App\\Model\\SignUpRequest;\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\nreadonly class SignUpService\n{\n    public function __construct(private UserRepository $userRepository, private UserPasswordHasherInterface $passwordHasher, private EntityManagerInterface $entityManager, private AuthenticationSuccessHandler $successHandler)\n    {\n    }\n    public function signUp(SignUpRequest $signUpRequest) : Response\n    {\n        if ($this->userRepository->existByEmail($signUpRequest->getEmail())) {\n            throw new UserAlreadyExistException();\n        }\n        $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n        $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n        $this->entityManager->persist($user);\n        \n        return $this->successHandler->handleAuthenticationSuccess($user);\n    }\n}","originalFilePath":"\/app\/src\/Service\/SignUpService.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n         $user = (new User())->setRoles(['ROLE_USER'])->setEmail($signUpRequest->getEmail())->setLastname($signUpRequest->getLastname())->setFirstName($signUpRequest->getFirstName());\n         $user->setPassword($this->passwordHasher->hashPassword($user, $signUpRequest->getPassword()));\n         $this->entityManager->persist($user);\n-        $this->entityManager->flush();\n+        \n         return $this->successHandler->handleAuthenticationSuccess($user);\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b0bf2fb0137d8da5e6720e88732a0f2c.infection.xml\n\nF\n\nTime: 00:00.040, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SignUpServiceTest::testSignUp\nExpectation failed for method name is \"flush\" when invoked 1 time.\nMethod was expected to be called 1 time, actually called 0 times.\n\nFAILURES!\nTests: 1, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    protected function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/SubscriberService.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n     {\n     }\n-    public function subscribe(SubscriberRequest $subscriberRequest) : void\n+    protected function subscribe(SubscriberRequest $subscriberRequest) : void\n     {\n         $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n         if ($subscriber) {","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0a01641c3d266205dbeb3ef3bda95606.infection.xml\n\n.F\n\nTime: 00:00.251, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribe\nFailed asserting that the Response is successful.\nHTTP\/1.1 500 Internal Server Error\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:19 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Internal Server Error\",\"details\":{\"trace\":\"#0 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\SubscriberController->subscribe(Object(App\\\\Model\\\\SubscriberRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#5 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/tests\\\/Controller\\\/SubscriberControllerTest.php(12): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#7 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\SubscriberControllerTest->testSubscribe()\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\SubscriberControllerTest))\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#17 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#18 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/SubscriberControllerTest.php:18\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (1)\n\n  1x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller"},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' > $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/SubscriberService.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function subscribe(SubscriberRequest $subscriberRequest) : void\n     {\n-        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n+        $subscriber = $this->subscriberRepository->findOneBy(['email' > $subscriberRequest->getEmail()]);\n         if ($subscriber) {\n             throw new SubscriberFoundException();\n         }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.29c09334a88cdcb7bc76c21dbbcf576e.infection.xml\n\nF\n\nTime: 00:00.034, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribe\nExpectation failed for method name is \"findOneBy\" when invoked 1 time\nParameter 0 for invocation Doctrine\\ORM\\EntityRepository::findOneBy([...], null) does not match expected value.\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    'email' => 'test@mail.com'\n+    0 => false\n )\n\n\/app\/src\/Service\/SubscriberService.php:17\n\/app\/tests\/Service\/SubscriberServiceTest.php:58\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribe\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/SubscriberServiceTest.php:44\n\nFAILURES!\nTests: 1, Assertions: 0, Failures: 1, Risky: 1."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy([]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/SubscriberService.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function subscribe(SubscriberRequest $subscriberRequest) : void\n     {\n-        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n+        $subscriber = $this->subscriberRepository->findOneBy([]);\n         if ($subscriber) {\n             throw new SubscriberFoundException();\n         }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0cef58b63eb80c5f185e0d51bf5599fe.infection.xml\n\n..F\n\nTime: 00:00.319, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribeAlreadyExist\nExpectation failed for method name is \"findOneBy\" when invoked 1 time\nParameter 0 for invocation Doctrine\\ORM\\EntityRepository::findOneBy([], null) does not match expected value.\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    'email' => 'test@mail.com'\n )\n\n\/app\/src\/Service\/SubscriberService.php:17\n\/app\/tests\/Service\/SubscriberServiceTest.php:41\n\n--\n\nThere was 1 risky test:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribeAlreadyExist\nThis test did not perform any assertions\n\n\/app\/tests\/Service\/SubscriberServiceTest.php:31\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 1, Risky: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"IfNegation","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if (!$subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/SubscriberService.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n     public function subscribe(SubscriberRequest $subscriberRequest) : void\n     {\n         $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n-        if ($subscriber) {\n+        if (!$subscriber) {\n             throw new SubscriberFoundException();\n         }\n         $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b03d45bb7abd7f3cdcb4692ae2d58540.infection.xml\n\n.F\n\nTime: 00:00.268, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Controller\\SubscriberControllerTest::testSubscribe\nFailed asserting that the Response is successful.\nHTTP\/1.1 400 Bad Request\nCache-Control: no-cache, private\nContent-Type:  application\/json\nDate:          Tue, 05 Dec 2023 17:04:18 GMT\nX-Robots-Tag:  noindex\n\n{\"message\":\"Subscriber already exist!\",\"details\":{\"trace\":\"#0 \\\/app\\\/src\\\/Controller\\\/SubscriberController.php(28): App\\\\Service\\\\SubscriberService->subscribe(Object(App\\\\Model\\\\SubscriberRequest))\\n#1 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(181): App\\\\Controller\\\\SubscriberController->subscribe(Object(App\\\\Model\\\\SubscriberRequest))\\n#2 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernel.php(76): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handleRaw(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1)\\n#3 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/Kernel.php(197): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#4 \\\/app\\\/vendor\\\/symfony\\\/http-kernel\\\/HttpKernelBrowser.php(65): Symfony\\\\Component\\\\HttpKernel\\\\Kernel->handle(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request), 1, true)\\n#5 \\\/app\\\/vendor\\\/symfony\\\/framework-bundle\\\/KernelBrowser.php(171): Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#6 \\\/app\\\/vendor\\\/symfony\\\/browser-kit\\\/AbstractBrowser.php(403): Symfony\\\\Bundle\\\\FrameworkBundle\\\\KernelBrowser->doRequest(Object(Symfony\\\\Component\\\\HttpFoundation\\\\Request))\\n#7 \\\/app\\\/tests\\\/Controller\\\/SubscriberControllerTest.php(12): Symfony\\\\Component\\\\BrowserKit\\\\AbstractBrowser->request('POST', 'http:\\\/\\\/localhos...', Array)\\n#8 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(1114): App\\\\Tests\\\\Controller\\\\SubscriberControllerTest->testSubscribe()\\n#9 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(653): PHPUnit\\\\Framework\\\\TestCase->runTest()\\n#10 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestRunner.php(103): PHPUnit\\\\Framework\\\\TestCase->runBare()\\n#11 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestCase.php(489): PHPUnit\\\\Framework\\\\TestRunner->run(Object(App\\\\Tests\\\\Controller\\\\SubscriberControllerTest))\\n#12 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestCase->run()\\n#13 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#14 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/Framework\\\/TestSuite.php(340): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#15 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/TestRunner.php(63): PHPUnit\\\\Framework\\\\TestSuite->run()\\n#16 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/src\\\/TextUI\\\/Application.php(189): PHPUnit\\\\TextUI\\\\TestRunner->run(Object(PHPUnit\\\\TextUI\\\\Configuration\\\\Configuration), Object(PHPUnit\\\\Runner\\\\ResultCache\\\\DefaultResultCache), Object(PHPUnit\\\\Framework\\\\TestSuite))\\n#17 \\\/app\\\/vendor\\\/phpunit\\\/phpunit\\\/phpunit(99): PHPUnit\\\\TextUI\\\\Application->run(Array)\\n#18 \\\/app\\\/vendor\\\/bin\\\/phpunit(122): include('\\\/app\\\/vendor\\\/php...')\\n#19 {main}\"}}\n\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:142\n\/app\/vendor\/symfony\/framework-bundle\/Test\/BrowserKitAssertionsTrait.php:33\n\/app\/tests\/Controller\/SubscriberControllerTest.php:18\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/SubscriberService.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n         if ($subscriber) {\n-            throw new SubscriberFoundException();\n+            new SubscriberFoundException();\n         }\n         $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n         $this->entityManager->flush();\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.e7e199d31d19d7aff612f2d1435ff3a5.infection.xml\n\nF\n\nTime: 00:00.035, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribeAlreadyExist\nFailed asserting that exception of type \"App\\Exception\\SubscriberFoundException\" is thrown.\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        \n        $this->entityManager->flush();\n    }\n}","originalFilePath":"\/app\/src\/Service\/SubscriberService.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n         if ($subscriber) {\n             throw new SubscriberFoundException();\n         }\n-        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n+        \n         $this->entityManager->flush();\n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ee840ef4d41d1ee04f622807777822da.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.300, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribe\nExpectation failed for method name is \"persist\" when invoked 1 time.\nMethod was expected to be called 1 time, actually called 0 times.\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        $this->entityManager->flush();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Subscriber;\nuse App\\Exception\\SubscriberFoundException;\nuse App\\Model\\SubscriberRequest;\nuse App\\Repository\\SubscriberRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nreadonly class SubscriberService\n{\n    public function __construct(private SubscriberRepository $subscriberRepository, private EntityManagerInterface $entityManager)\n    {\n    }\n    public function subscribe(SubscriberRequest $subscriberRequest) : void\n    {\n        $subscriber = $this->subscriberRepository->findOneBy(['email' => $subscriberRequest->getEmail()]);\n        if ($subscriber) {\n            throw new SubscriberFoundException();\n        }\n        $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n        \n    }\n}","originalFilePath":"\/app\/src\/Service\/SubscriberService.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n             throw new SubscriberFoundException();\n         }\n         $this->entityManager->persist((new Subscriber())->setEmail($subscriberRequest->getEmail()));\n-        $this->entityManager->flush();\n+        \n     }\n }","processOutput":"PHPUnit 10.4.2 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.2.13\nConfiguration: \/tmp\/infection\/phpunitConfiguration.8ada4a96bdfc567b5f1ce6e3511a02b8.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.281, Memory: 28.00 MB\n\nThere was 1 failure:\n\n1) App\\Tests\\Service\\SubscriberServiceTest::testSubscribe\nExpectation failed for method name is \"flush\" when invoked 1 time.\nMethod was expected to be called 1 time, actually called 0 times.\n\nFAILURES!\nTests: 4, Assertions: 7, Failures: 1.\n\nRemaining indirect deprecation notices (3)\n\n  2x: Relying on non-optimal defaults for ID generation is deprecated, and IDENTITY\nresults in SERIAL, which is not recommended.\nInstead, configure identifier generation strategies explicitly through\nconfiguration.\nWe currently recommend \"SEQUENCE\" for \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\", so you should use\n$configuration->setIdentityGenerationPreferences([\n    \"Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform\" => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]); (ClassMetadataFactory.php:751 called by ClassMetadataFactory.php:625, https:\/\/github.com\/doctrine\/orm\/issues\/8893, package doctrine\/orm)\n    1x in SubscriberControllerTest::testSubscribeNotAgreed from App\\Tests\\Controller\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller\n\n  1x: Subscribing to postConnect events is deprecated. Implement a middleware instead. (Connection.php:387 called by Connection.php:1654, https:\/\/github.com\/doctrine\/dbal\/issues\/5784, package doctrine\/dbal)\n    1x in SubscriberControllerTest::testSubscribe from App\\Tests\\Controller"}],"errored":[],"syntaxErrors":[],"uncovered":[{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Command;\n\nuse App\\Service\\RoleService;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n#[AsCommand(name: 'app:make:admin', description: 'Promotes user to be admin')]\nclass MakeAdminCommand extends Command\n{\n    public function __construct(private RoleService $roleService)\n    {\n        parent::__construct();\n    }\n    protected function configure() : void\n    {\n        $this->addArgument('user-id', InputArgument::REQUIRED, 'User id');\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) : int\n    {\n        $this->roleService->grantAdmin((int) $input->getArgument('user-id'));\n        return Command::SUCCESS;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Command;\n\nuse App\\Service\\RoleService;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n#[AsCommand(name: 'app:make:admin', description: 'Promotes user to be admin')]\nclass MakeAdminCommand extends Command\n{\n    public function __construct(private RoleService $roleService)\n    {\n        \n    }\n    protected function configure() : void\n    {\n        $this->addArgument('user-id', InputArgument::REQUIRED, 'User id');\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) : int\n    {\n        $this->roleService->grantAdmin((int) $input->getArgument('user-id'));\n        return Command::SUCCESS;\n    }\n}","originalFilePath":"\/app\/src\/Command\/MakeAdminCommand.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(private RoleService $roleService)\n     {\n-        parent::__construct();\n+        \n     }\n     protected function configure() : void\n     {","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Command;\n\nuse App\\Service\\RoleService;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n#[AsCommand(name: 'app:make:admin', description: 'Promotes user to be admin')]\nclass MakeAdminCommand extends Command\n{\n    public function __construct(private RoleService $roleService)\n    {\n        parent::__construct();\n    }\n    protected function configure() : void\n    {\n        $this->addArgument('user-id', InputArgument::REQUIRED, 'User id');\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) : int\n    {\n        $this->roleService->grantAdmin((int) $input->getArgument('user-id'));\n        return Command::SUCCESS;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Command;\n\nuse App\\Service\\RoleService;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n#[AsCommand(name: 'app:make:admin', description: 'Promotes user to be admin')]\nclass MakeAdminCommand extends Command\n{\n    public function __construct(private RoleService $roleService)\n    {\n        parent::__construct();\n    }\n    protected function configure() : void\n    {\n        \n    }\n    protected function execute(InputInterface $input, OutputInterface $output) : int\n    {\n        $this->roleService->grantAdmin((int) $input->getArgument('user-id'));\n        return Command::SUCCESS;\n    }\n}","originalFilePath":"\/app\/src\/Command\/MakeAdminCommand.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     protected function configure() : void\n     {\n-        $this->addArgument('user-id', InputArgument::REQUIRED, 'User id');\n+        \n     }\n     protected function execute(InputInterface $input, OutputInterface $output) : int\n     {","processOutput":""},{"mutator":{"mutatorName":"CastInt","originalSourceCode":"<?php\n\nnamespace App\\Command;\n\nuse App\\Service\\RoleService;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n#[AsCommand(name: 'app:make:admin', description: 'Promotes user to be admin')]\nclass MakeAdminCommand extends Command\n{\n    public function __construct(private RoleService $roleService)\n    {\n        parent::__construct();\n    }\n    protected function configure() : void\n    {\n        $this->addArgument('user-id', InputArgument::REQUIRED, 'User id');\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) : int\n    {\n        $this->roleService->grantAdmin((int) $input->getArgument('user-id'));\n        return Command::SUCCESS;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Command;\n\nuse App\\Service\\RoleService;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n#[AsCommand(name: 'app:make:admin', description: 'Promotes user to be admin')]\nclass MakeAdminCommand extends Command\n{\n    public function __construct(private RoleService $roleService)\n    {\n        parent::__construct();\n    }\n    protected function configure() : void\n    {\n        $this->addArgument('user-id', InputArgument::REQUIRED, 'User id');\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) : int\n    {\n        $this->roleService->grantAdmin($input->getArgument('user-id'));\n        return Command::SUCCESS;\n    }\n}","originalFilePath":"\/app\/src\/Command\/MakeAdminCommand.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     protected function execute(InputInterface $input, OutputInterface $output) : int\n     {\n-        $this->roleService->grantAdmin((int) $input->getArgument('user-id'));\n+        $this->roleService->grantAdmin($input->getArgument('user-id'));\n         return Command::SUCCESS;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Command;\n\nuse App\\Service\\RoleService;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n#[AsCommand(name: 'app:make:admin', description: 'Promotes user to be admin')]\nclass MakeAdminCommand extends Command\n{\n    public function __construct(private RoleService $roleService)\n    {\n        parent::__construct();\n    }\n    protected function configure() : void\n    {\n        $this->addArgument('user-id', InputArgument::REQUIRED, 'User id');\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) : int\n    {\n        $this->roleService->grantAdmin((int) $input->getArgument('user-id'));\n        return Command::SUCCESS;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Command;\n\nuse App\\Service\\RoleService;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n#[AsCommand(name: 'app:make:admin', description: 'Promotes user to be admin')]\nclass MakeAdminCommand extends Command\n{\n    public function __construct(private RoleService $roleService)\n    {\n        parent::__construct();\n    }\n    protected function configure() : void\n    {\n        $this->addArgument('user-id', InputArgument::REQUIRED, 'User id');\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) : int\n    {\n        \n        return Command::SUCCESS;\n    }\n}","originalFilePath":"\/app\/src\/Command\/MakeAdminCommand.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     protected function execute(InputInterface $input, OutputInterface $output) : int\n     {\n-        $this->roleService->grantAdmin((int) $input->getArgument('user-id'));\n+        \n         return Command::SUCCESS;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 199, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AdminController.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private RoleService $roleService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n+    #[OA\\Response(response: 199, description: 'Grants ROLE_AUTHOR to a user')]\n     #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n     #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n     public function grantAuthor(int $userId) : Response","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 201, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AdminController.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private RoleService $roleService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n+    #[OA\\Response(response: 201, description: 'Grants ROLE_AUTHOR to a user')]\n     #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n     #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n     public function grantAuthor(int $userId) : Response","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 403, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AdminController.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     {\n     }\n     #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n-    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n+    #[OA\\Response(response: 403, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n     #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n     public function grantAuthor(int $userId) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\RoleService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AdminController extends AbstractController\n{\n    public function __construct(private RoleService $roleService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n    #[OA\\Response(response: 405, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n    #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n    public function grantAuthor(int $userId) : Response\n    {\n        $this->roleService->grantAuthor($userId);\n        return new Response('', 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AdminController.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     {\n     }\n     #[OA\\Response(response: 200, description: 'Grants ROLE_AUTHOR to a user')]\n-    #[OA\\Response(response: 404, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n+    #[OA\\Response(response: 405, description: 'User not found', attachables: [new Model(type: ErrorResponse::class)])]\n     #[Route(path: '\/api\/v1\/admin\/grand-author\/{userId}', methods: 'POST')]\n     public function grantAuthor(int $userId) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 199, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AuthController.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly SignUpService $signUpService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n+    #[OA\\Response(response: 199, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n     #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n     #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 201, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AuthController.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly SignUpService $signUpService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n+    #[OA\\Response(response: 201, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n     #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n     #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AuthController.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly SignUpService $signUpService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n+    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'refresh_token', type: 'string')]))]\n     #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n     #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 408, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AuthController.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n     #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n-    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n+    #[OA\\Response(response: 408, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n     public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 410, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AuthController.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n     #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n-    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n+    #[OA\\Response(response: 410, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n     public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 421, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AuthController.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n     #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n     #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n-    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n+    #[OA\\Response(response: 421, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n     public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SignUpRequest;\nuse App\\Service\\SignUpService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass AuthController extends AbstractController\n{\n    public function __construct(private readonly SignUpService $signUpService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n    #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n    #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 423, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n    public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n    {\n        return $this->signUpService->signUp(signUpRequest: $signUpRequest);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/AuthController.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Signs up a user', content: new OA\\JsonContent(properties: [new OA\\Property(property: 'token', type: 'string'), new OA\\Property(property: 'refresh_token', type: 'string')]))]\n     #[OA\\RequestBody(content: new Model(type: SignUpRequest::class))]\n     #[OA\\Response(response: 409, description: 'User already exist', content: new Model(type: ErrorResponse::class))]\n-    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n+    #[OA\\Response(response: 423, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/auth\/signup', name: 'signup', methods: 'POST')]\n     public function signUp(#[MapRequestPayload] SignUpRequest $signUpRequest) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Service\\BookCategoryService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookCategoryController extends AbstractController\n{\n    public function __construct(private readonly BookCategoryService $bookCategoryService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n    #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n    public function index() : Response\n    {\n        return $this->json($this->bookCategoryService->findAll());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Service\\BookCategoryService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookCategoryController extends AbstractController\n{\n    public function __construct(private readonly BookCategoryService $bookCategoryService)\n    {\n    }\n    #[OA\\Response(response: 199, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n    #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n    public function index() : Response\n    {\n        return $this->json($this->bookCategoryService->findAll());\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookCategoryController.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly BookCategoryService $bookCategoryService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n+    #[OA\\Response(response: 199, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n     #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n     public function index() : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Service\\BookCategoryService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookCategoryController extends AbstractController\n{\n    public function __construct(private readonly BookCategoryService $bookCategoryService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n    #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n    public function index() : Response\n    {\n        return $this->json($this->bookCategoryService->findAll());\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookCategoryListResponse;\nuse App\\Service\\BookCategoryService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookCategoryController extends AbstractController\n{\n    public function __construct(private readonly BookCategoryService $bookCategoryService)\n    {\n    }\n    #[OA\\Response(response: 201, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n    #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n    public function index() : Response\n    {\n        return $this->json($this->bookCategoryService->findAll());\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookCategoryController.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly BookCategoryService $bookCategoryService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n+    #[OA\\Response(response: 201, description: 'Return book categories', content: new Model(type: BookCategoryListResponse::class))]\n     #[Route(path: '\/api\/v1\/categories', name: 'categories', methods: 'GET|OPTIONS')]\n     public function index() : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 199, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n+    #[OA\\Response(response: 199, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n     #[OA\\Response(response: 404, description: 'Book category not found')]\n     #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n     public function booksByCategory(int $id) : Response","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 201, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n+    #[OA\\Response(response: 201, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n     #[OA\\Response(response: 404, description: 'Book category not found')]\n     #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n     public function booksByCategory(int $id) : Response","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 403, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     {\n     }\n     #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n-    #[OA\\Response(response: 404, description: 'Book category not found')]\n+    #[OA\\Response(response: 403, description: 'Book category not found')]\n     #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n     public function booksByCategory(int $id) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 405, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     {\n     }\n     #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n-    #[OA\\Response(response: 404, description: 'Book category not found')]\n+    #[OA\\Response(response: 405, description: 'Book category not found')]\n     #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n     public function booksByCategory(int $id) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 199, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->json($this->bookCategoryService->findBooksByCategory($id));\n     }\n-    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n+    #[OA\\Response(response: 199, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n     #[OA\\Response(response: 403, description: 'Access Denied')]\n     #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n     public function booksByRecommendations(int $id) : Response","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 201, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":34},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->json($this->bookCategoryService->findBooksByCategory($id));\n     }\n-    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n+    #[OA\\Response(response: 201, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n     #[OA\\Response(response: 403, description: 'Access Denied')]\n     #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n     public function booksByRecommendations(int $id) : Response","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 402, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n         return $this->json($this->bookCategoryService->findBooksByCategory($id));\n     }\n     #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n-    #[OA\\Response(response: 403, description: 'Access Denied')]\n+    #[OA\\Response(response: 402, description: 'Access Denied')]\n     #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n     public function booksByRecommendations(int $id) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 404, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n         return $this->json($this->bookCategoryService->findBooksByCategory($id));\n     }\n     #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n-    #[OA\\Response(response: 403, description: 'Access Denied')]\n+    #[OA\\Response(response: 404, description: 'Access Denied')]\n     #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n     public function booksByRecommendations(int $id) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 199, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n     }\n-    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n+    #[OA\\Response(response: 199, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n     #[OA\\Response(response: 404, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n     public function booksById(int $id) : Response","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 201, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":42},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n     }\n-    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n+    #[OA\\Response(response: 201, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n     #[OA\\Response(response: 404, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n     public function booksById(int $id) : Response","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 403, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":43},"diff":"--- Original\n+++ New\n@@ @@\n         return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n     }\n     #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n-    #[OA\\Response(response: 404, description: 'Book not found')]\n+    #[OA\\Response(response: 403, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n     public function booksById(int $id) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 405, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":43},"diff":"--- Original\n+++ New\n@@ @@\n         return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n     }\n     #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n-    #[OA\\Response(response: 404, description: 'Book not found')]\n+    #[OA\\Response(response: 405, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n     public function booksById(int $id) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 199, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n         return $this->json($this->bookCategoryService->getBookById($id));\n     }\n     #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n-    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n+    #[OA\\Response(response: 199, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n     #[OA\\Response(response: 404, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n     public function reviews(int $id, Request $request) : Response","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 201, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n         return $this->json($this->bookCategoryService->getBookById($id));\n     }\n     #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n-    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n+    #[OA\\Response(response: 201, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n     #[OA\\Response(response: 404, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n     public function reviews(int $id, Request $request) : Response","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 403, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n     #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n-    #[OA\\Response(response: 404, description: 'Book not found')]\n+    #[OA\\Response(response: 403, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n     public function reviews(int $id, Request $request) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\ReviewPage;\nuse App\\Service\\BookService;\nuse App\\Service\\ReviewService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass BookController extends AbstractController\n{\n    public function __construct(private readonly BookService $bookCategoryService, private readonly ReviewService $reviewService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Return book by category id', content: new Model(type: BookListResponse::class))]\n    #[OA\\Response(response: 404, description: 'Book category not found')]\n    #[Route(path: '\/api\/v1\/books\/category\/{id}', name: 'book_by_category', methods: 'GET|OPTIONS')]\n    public function booksByCategory(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByCategory($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book by recommendations id', content: new Model(type: BookListRecommendationResponse::class))]\n    #[OA\\Response(response: 403, description: 'Access Denied')]\n    #[Route(path: '\/api\/v1\/books\/recommendation\/{id}', name: 'book_by_recommendation', methods: 'GET|OPTIONS')]\n    public function booksByRecommendations(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->findBooksByRecommendations($id));\n    }\n    #[OA\\Response(response: 200, description: 'Return book details information', content: new Model(type: BookDetails::class))]\n    #[OA\\Response(response: 404, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/{id}', name: 'book_by_id', methods: 'GET|OPTIONS')]\n    public function booksById(int $id) : Response\n    {\n        return $this->json($this->bookCategoryService->getBookById($id));\n    }\n    #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n    #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n    #[OA\\Response(response: 405, description: 'Book not found')]\n    #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n    public function reviews(int $id, Request $request) : Response\n    {\n        return $this->json($this->reviewService->getReviewPageByBookId($id, $request->query->get(key: 'page', default: 1)));\n    }\n}","originalFilePath":"\/app\/src\/Controller\/BookController.php","originalStartLine":52},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     #[OA\\Parameter(name: 'page', description: 'Page Number', in: 'query', schema: new OA\\Schema(type: 'integer'))]\n     #[OA\\Response(response: 200, description: 'Return book reviews', content: new Model(type: ReviewPage::class))]\n-    #[OA\\Response(response: 404, description: 'Book not found')]\n+    #[OA\\Response(response: 405, description: 'Book not found')]\n     #[Route(path: '\/api\/v1\/books\/review\/{id}', name: 'reviews', methods: 'GET|OPTIONS')]\n     public function reviews(int $id, Request $request) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 199, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly SubscriberService $subscriberService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n+    #[OA\\Response(response: 199, description: 'Subscribe email to newsletters mailing list')]\n     #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n     #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 201, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private readonly SubscriberService $subscriberService)\n     {\n     }\n-    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n+    #[OA\\Response(response: 201, description: 'Subscribe email to newsletters mailing list')]\n     #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n     #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 399, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n     #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n-    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n+    #[OA\\Response(response: 399, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n     public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 401, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n     #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n-    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n+    #[OA\\Response(response: 401, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n     #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n     public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response","processOutput":""},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 421, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n     #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n     #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n-    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n+    #[OA\\Response(response: 421, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n     public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Model\\ErrorResponse;\nuse App\\Model\\SubscriberRequest;\nuse App\\Service\\SubscriberService;\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\nuse OpenApi\\Attributes as OA;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nclass SubscriberController extends AbstractController\n{\n    public function __construct(private readonly SubscriberService $subscriberService)\n    {\n    }\n    #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n    #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n    #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n    #[OA\\Response(response: 423, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n    #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n    public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n    {\n        $this->subscriberService->subscribe($subscriberRequest);\n        return $this->json(new ErrorResponse(message: 'Subscriber has been created successfully!', details: 'Operation has been completed with no errors'), 201);\n    }\n}","originalFilePath":"\/app\/src\/Controller\/SubscriberController.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     #[OA\\Response(response: 200, description: 'Subscribe email to newsletters mailing list')]\n     #[OA\\RequestBody(content: new Model(type: SubscriberRequest::class))]\n     #[OA\\Response(response: 400, description: 'Return 400 error code if email exist', content: new Model(type: ErrorResponse::class))]\n-    #[OA\\Response(response: 422, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n+    #[OA\\Response(response: 423, description: 'Validation errors', content: new Model(type: ErrorResponse::class))]\n     #[Route(path: '\/api\/v1\/subscribes', name: 'subscribes', methods: 'POST')]\n     public function subscribe(#[MapRequestPayload] SubscriberRequest $subscriberRequest) : Response\n     {","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":16},"diff":"--- Original\n+++ New\n@@ @@\n     public const DEVICES_CATEGORY = 'devices';\n     public function load(ObjectManager $manager) : void\n     {\n-        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n+        $categorise = [static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n         foreach ($categorise as $category) {\n             $manager->persist($category);\n         }","processOutput":""},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY > (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n     public const DEVICES_CATEGORY = 'devices';\n     public function load(ObjectManager $manager) : void\n     {\n-        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n+        $categorise = [static::DEVICES_CATEGORY > (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n         foreach ($categorise as $category) {\n             $manager->persist($category);\n         }","processOutput":""},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY > (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":18},"diff":"--- Original\n+++ New\n@@ @@\n     public const DEVICES_CATEGORY = 'devices';\n     public function load(ObjectManager $manager) : void\n     {\n-        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n+        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY > (new BookCategory())->setTitle('Android')->setSlug('android')];\n         foreach ($categorise as $category) {\n             $manager->persist($category);\n         }","processOutput":""},{"mutator":{"mutatorName":"Foreach_","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach (array() as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     public function load(ObjectManager $manager) : void\n     {\n         $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n-        foreach ($categorise as $category) {\n+        foreach (array() as $category) {\n             $manager->persist($category);\n         }\n         $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            \n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n         foreach ($categorise as $category) {\n-            $manager->persist($category);\n+            \n         }\n         $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n         $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        \n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n         foreach ($categorise as $category) {\n             $manager->persist($category);\n         }\n-        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n+        \n         $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n         $manager->flush();\n         foreach ($categorise as $key => $category) {","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        \n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n             $manager->persist($category);\n         }\n         $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n-        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n+        \n         $manager->flush();\n         foreach ($categorise as $key => $category) {\n             $this->addReference($key, $category);","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        \n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n         $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n-        $manager->flush();\n+        \n         foreach ($categorise as $key => $category) {\n             $this->addReference($key, $category);\n         }\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"Foreach_","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach (array() as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n         $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n         $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n         $manager->flush();\n-        foreach ($categorise as $key => $category) {\n+        foreach (array() as $key => $category) {\n             $this->addReference($key, $category);\n         }\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            $this->addReference($key, $category);\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\BookCategory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookCategoryFixture extends Fixture\n{\n    public const ANDROID_CATEGORY = 'android';\n    public const DEVICES_CATEGORY = 'devices';\n    public function load(ObjectManager $manager) : void\n    {\n        $categorise = [static::DEVICES_CATEGORY => (new BookCategory())->setTitle('Devices')->setSlug('devices'), static::ANDROID_CATEGORY => (new BookCategory())->setTitle('Android')->setSlug('android')];\n        foreach ($categorise as $category) {\n            $manager->persist($category);\n        }\n        $manager->persist((new BookCategory())->setTitle('Data')->setSlug('data'));\n        $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n        $manager->flush();\n        foreach ($categorise as $key => $category) {\n            \n        }\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookCategoryFixture.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n         $manager->persist((new BookCategory())->setTitle('IOS')->setSlug('ios'));\n         $manager->flush();\n         foreach ($categorise as $key => $category) {\n-            $this->addReference($key, $category);\n+            \n         }\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        \n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookFixture.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n         $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n-        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n+        \n         $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n         $manager->flush();\n     }","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookFixture.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n         $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n-        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n+        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n         $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n         $manager->flush();\n     }","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookFixture.php","originalStartLine":28},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n         $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n-        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n+        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([])));\n         $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n         $manager->flush();\n     }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        \n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookFixture.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n         $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n         $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n         $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n-        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n+        \n         $manager->flush();\n     }\n     public function getDependencies() : array","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookFixture.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n         $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n         $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n         $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n-        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n+        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n         $manager->flush();\n     }\n     public function getDependencies() : array","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookFixture.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n         $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n         $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n         $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n-        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n+        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$devicesCategory])));\n         $manager->flush();\n     }\n     public function getDependencies() : array","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        \n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookFixture.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n         $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n         $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n         $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n-        $manager->flush();\n+        \n     }\n     public function getDependencies() : array\n     {","processOutput":""},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [BookCategoryFixture::class];\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\DataFixtures;\n\nuse App\\Entity\\Book;\nuse DateTimeImmutable;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nclass BookFixture extends Fixture implements DependentFixtureInterface\n{\n    public function load(ObjectManager $manager) : void\n    {\n        $androidCategory = $this->getReference(name: BookCategoryFixture::ANDROID_CATEGORY);\n        $devicesCategory = $this->getReference(name: BookCategoryFixture::DEVICES_CATEGORY);\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bot', 'ChatBot'])->setImage('\/public\/default.png')->setIsbn('1234445555')->setDescription('Some Description')->setCategories(new ArrayCollection([$devicesCategory])));\n        $manager->persist((new Book())->setTitle('Lorem Ipsum')->setPublicationDate(new DateTimeImmutable(datetime: '2019-06-08'))->setSlug('lorem')->setAuthors(['Bots', 'ChatBot'])->setImage('\/public\/default1.png')->setCategories(new ArrayCollection([$androidCategory, $devicesCategory])));\n        $manager->flush();\n    }\n    public function getDependencies() : array\n    {\n        return [];\n    }\n}","originalFilePath":"\/app\/src\/DataFixtures\/BookFixture.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function getDependencies() : array\n     {\n-        return [BookCategoryFixture::class];\n+        return [];\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    protected function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":156},"diff":"--- Original\n+++ New\n@@ @@\n         $this->categories = $categories;\n         return $this;\n     }\n-    public function getIsbn() : ?string\n+    protected function getIsbn() : ?string\n     {\n         return $this->isbn;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    protected function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":192},"diff":"--- Original\n+++ New\n@@ @@\n         $this->formats = $formats;\n         return $this;\n     }\n-    public function getReviews() : Collection\n+    protected function getReviews() : Collection\n     {\n         return $this->reviews;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    public function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRepository;\nuse DateTimeInterface;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRepository::class)]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $title;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $slug;\n    #[ORM\\Column(type: 'string', length: 255, nullable: true)]\n    private ?string $image = null;\n    \/** @var string[] *\/\n    #[ORM\\Column(type: 'simple_array', nullable: true)]\n    private ?array $authors = [];\n    #[ORM\\Column(type: 'string', length: 13, nullable: true)]\n    private ?string $isbn = null;\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $description = null;\n    #[ORM\\Column(type: 'date_immutable', nullable: true)]\n    private ?DateTimeInterface $publicationDate = null;\n    \/**\n     * @var Collection<BookCategory>\n     *\/\n    #[ORM\\ManyToMany(targetEntity: BookCategory::class)]\n    #[ORM\\JoinTable(name: 'book_to_book_category')]\n    private Collection $categories;\n    \/**\n     * @var Collection<BookRelationToBookFormat>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: BookRelationToBookFormat::class)]\n    private Collection $formats;\n    \/**\n     * @var Collection<Review>\n     *\/\n    #[ORM\\OneToMany(mappedBy: 'book', targetEntity: Review::class)]\n    private Collection $reviews;\n    public function __construct()\n    {\n        $this->categories = new ArrayCollection();\n        $this->reviews = new ArrayCollection();\n        $this->formats = new ArrayCollection();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : ?string\n    {\n        return $this->image;\n    }\n    public function setImage(?string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]|null\n     *\/\n    public function getAuthors() : ?array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(?array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : ?DateTimeInterface\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(?DateTimeInterface $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    \/**\n     * @return Collection<BookCategory>\n     *\/\n    public function getCategories() : Collection\n    {\n        return $this->categories;\n    }\n    \/**\n     * @return $this\n     *\/\n    public function setCategories(Collection $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    public function getIsbn() : ?string\n    {\n        return $this->isbn;\n    }\n    public function setIsbn(?string $isbn) : static\n    {\n        $this->isbn = $isbn;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getFormats() : Collection\n    {\n        return $this->formats;\n    }\n    public function setFormats(Collection $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n    public function getReviews() : Collection\n    {\n        return $this->reviews;\n    }\n    protected function setReviews(Collection $reviews) : static\n    {\n        $this->reviews = $reviews;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Book.php","originalStartLine":197},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->reviews;\n     }\n-    public function setReviews(Collection $reviews) : static\n+    protected function setReviews(Collection $reviews) : static\n     {\n         $this->reviews = $reviews;\n         return $this;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    protected function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n     #[ORM\\JoinColumn(nullable: false)]\n     private BookFormat $format;\n-    public function getId() : ?int\n+    protected function getId() : ?int\n     {\n         return $this->id;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    protected function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":60},"diff":"--- Original\n+++ New\n@@ @@\n         $this->discountPercent = $discountPercent;\n         return $this;\n     }\n-    public function getBook() : Book\n+    protected function getBook() : Book\n     {\n         return $this->book;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\BookRelationToBookFormatRepository;\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: BookRelationToBookFormatRepository::class)]\nclass BookRelationToBookFormat\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: Types::DECIMAL, precision: 10, scale: 2)]\n    private ?float $price = null;\n    #[ORM\\Column(type: Types::INTEGER)]\n    private ?int $discountPercent = null;\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'formats')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private Book $book;\n    #[ORM\\ManyToOne(targetEntity: BookFormat::class, fetch: 'EAGER')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private BookFormat $format;\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getPrice() : ?float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    protected function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n    public function getFormat() : BookFormat\n    {\n        return $this->format;\n    }\n    public function setFormat(BookFormat $format) : static\n    {\n        $this->format = $format;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/BookRelationToBookFormat.php","originalStartLine":65},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->book;\n     }\n-    public function setBook(Book $book) : static\n+    protected function setBook(Book $book) : static\n     {\n         $this->book = $book;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    protected function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/RefreshToken.php","originalStartLine":85},"diff":"--- Original\n+++ New\n@@ @@\n         $this->valid = $valid;\n         return $this;\n     }\n-    public function getUser() : UserInterface\n+    protected function getUser() : UserInterface\n     {\n         return $this->user;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    protected function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/RefreshToken.php","originalStartLine":97},"diff":"--- Original\n+++ New\n@@ @@\n         $this->user = $user;\n         return $this;\n     }\n-    public function getCreatedAt() : DateTimeImmutable\n+    protected function getCreatedAt() : DateTimeImmutable\n     {\n         return $this->createdAt;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshTokenRepository;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\AbstractRefreshToken;\nuse Gesdinet\\JWTRefreshTokenBundle\\Model\\RefreshTokenInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: RefreshTokenRepository::class)]\nclass RefreshToken extends AbstractRefreshToken\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    protected $id;\n    #[ORM\\Column(type: 'string')]\n    protected $refreshToken;\n    #[ORM\\Column(type: 'string')]\n    protected $username;\n    #[ORM\\Column(type: 'datetime')]\n    protected $valid;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: User::class)]\n    private UserInterface $user;\n    #[ORM\\Column(type: 'date_immutable')]\n    private DateTimeImmutable $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getRefreshToken() : string\n    {\n        return $this->refreshToken;\n    }\n    public function setRefreshToken($refreshToken = null) : static\n    {\n        $this->refreshToken = $refreshToken;\n        return $this;\n    }\n    public function getUsername() : string\n    {\n        return $this->username;\n    }\n    public function setUsername($username) : static\n    {\n        $this->username = $username;\n        return $this;\n    }\n    public function getValid() : ?DateTimeInterface\n    {\n        return $this->valid;\n    }\n    public function setValid($valid) : static\n    {\n        $this->valid = $valid;\n        return $this;\n    }\n    public function getUser() : UserInterface\n    {\n        return $this->user;\n    }\n    public function setUser(UserInterface $user) : static\n    {\n        $this->user = $user;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeImmutable\n    {\n        return $this->createdAt;\n    }\n    protected function setCreatedAt(DateTimeImmutable $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public static function createForUserWithTtl(string $refreshToken, UserInterface $user, int $ttl) : RefreshTokenInterface\n    {\n        \/** @var RefreshToken $model *\/\n        $model = parent::createForUserWithTtl($refreshToken, $user, $ttl);\n        $model->setUser($user);\n        return $model;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/RefreshToken.php","originalStartLine":102},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->createdAt;\n     }\n-    public function setCreatedAt(DateTimeImmutable $createdAt) : static\n+    protected function setCreatedAt(DateTimeImmutable $createdAt) : static\n     {\n         $this->createdAt = $createdAt;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    public function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\ReviewRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: ReviewRepository::class)]\nclass Review\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'integer')]\n    private int $rating;\n    #[ORM\\Column(type: 'text')]\n    private string $content;\n    #[ORM\\Column(type: 'string', length: 255)]\n    private string $author;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\JoinColumn(nullable: false)]\n    #[ORM\\ManyToOne(targetEntity: Book::class, inversedBy: 'reviews')]\n    private Book $book;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : void\n    {\n        $this->createdAt = new DateTimeImmutable();\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getRating() : int\n    {\n        return $this->rating;\n    }\n    public function setRating(int $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getContent() : string\n    {\n        return $this->content;\n    }\n    public function setContent(string $content) : static\n    {\n        $this->content = $content;\n        return $this;\n    }\n    public function getAuthor() : string\n    {\n        return $this->author;\n    }\n    public function setAuthor(string $author) : static\n    {\n        $this->author = $author;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n    protected function getBook() : Book\n    {\n        return $this->book;\n    }\n    public function setBook(Book $book) : static\n    {\n        $this->book = $book;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Review.php","originalStartLine":94},"diff":"--- Original\n+++ New\n@@ @@\n         $this->createdAt = $createdAt;\n         return $this;\n     }\n-    public function getBook() : Book\n+    protected function getBook() : Book\n     {\n         return $this->book;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    protected function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Subscriber.php","originalStartLine":33},"diff":"--- Original\n+++ New\n@@ @@\n         $this->createdAt = new DateTimeImmutable();\n         return $this;\n     }\n-    public function getId() : ?int\n+    protected function getId() : ?int\n     {\n         return $this->id;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    protected function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Subscriber.php","originalStartLine":45},"diff":"--- Original\n+++ New\n@@ @@\n         $this->id = $id;\n         return $this;\n     }\n-    public function getEmail() : string\n+    protected function getEmail() : string\n     {\n         return $this->email;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    protected function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Subscriber.php","originalStartLine":57},"diff":"--- Original\n+++ New\n@@ @@\n         $this->email = $email;\n         return $this;\n     }\n-    public function getCreatedAt() : DateTimeInterface\n+    protected function getCreatedAt() : DateTimeInterface\n     {\n         return $this->createdAt;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    public function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\SubscriberRepository;\nuse DateTimeImmutable;\nuse DateTimeInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\HasLifecycleCallbacks]\n#[ORM\\Entity(repositoryClass: SubscriberRepository::class)]\nclass Subscriber\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n    #[ORM\\Column(type: 'string', length: 100)]\n    private string $email;\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private DateTimeInterface $createdAt;\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue() : static\n    {\n        $this->createdAt = new DateTimeImmutable();\n        return $this;\n    }\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getCreatedAt() : DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n    protected function setCreatedAt(DateTimeInterface $createdAt) : static\n    {\n        $this->createdAt = $createdAt;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/Subscriber.php","originalStartLine":62},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->createdAt;\n     }\n-    public function setCreatedAt(DateTimeInterface $createdAt) : static\n+    protected function setCreatedAt(DateTimeInterface $createdAt) : static\n     {\n         $this->createdAt = $createdAt;\n         return $this;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    protected function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getEmail() : ?string\n+    protected function getEmail() : ?string\n     {\n         return $this->email;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    protected function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":51},"diff":"--- Original\n+++ New\n@@ @@\n         $this->email = $email;\n         return $this;\n     }\n-    public function getFirstName() : ?string\n+    protected function getFirstName() : ?string\n     {\n         return $this->firstName;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Entity;\n\nuse App\\Repository\\UserRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n#[ORM\\Entity(repositoryClass: UserRepository::class)]\n#[ORM\\Table(name: '`user`')]\nclass User implements UserInterface, PasswordAuthenticatedUserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id;\n    \/** @phpstan-ignore-line *\/\n    #[ORM\\Column(length: 150, unique: true)]\n    private string $email;\n    #[ORM\\Column(length: 150)]\n    private ?string $firstName = null;\n    #[ORM\\Column(length: 150)]\n    private ?string $lastname = null;\n    #[ORM\\Column(length: 150)]\n    private string $password;\n    #[ORM\\Column(type: 'simple_array')]\n    private array $roles;\n    \/** @phpstan-ignore-line *\/\n    public function getId() : ?int\n    {\n        return $this->id;\n    }\n    public function getEmail() : ?string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : ?string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(?string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    protected function getLastname() : ?string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(?string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getRoles() : array\n    {\n        return $this->roles;\n    }\n    \/**\n     * @param string[] $roles\n     *\/\n    public function setRoles(array $roles) : static\n    {\n        $this->roles = $roles;\n        return $this;\n    }\n    public function eraseCredentials() : void\n    {\n    }\n    public function getUsername() : string\n    {\n        return $this->email;\n    }\n    public function getUserIdentifier() : string\n    {\n        return $this->email;\n    }\n}","originalFilePath":"\/app\/src\/Entity\/User.php","originalStartLine":63},"diff":"--- Original\n+++ New\n@@ @@\n         $this->firstName = $firstName;\n         return $this;\n     }\n-    public function getLastname() : ?string\n+    protected function getLastname() : ?string\n     {\n         return $this->lastname;\n     }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass BookNotFoundException extends RuntimeException\n{\n    public function __construct(string $message = 'Book not found')\n    {\n        parent::__construct($message);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass BookNotFoundException extends RuntimeException\n{\n    public function __construct(string $message = 'Book not found')\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Exception\/BookNotFoundException.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = 'Book not found')\n     {\n-        parent::__construct($message);\n+        \n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass UserNotFoundException extends RuntimeException\n{\n    public function __construct(string $message = 'User not found')\n    {\n        parent::__construct($message);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Exception;\n\nuse RuntimeException;\nclass UserNotFoundException extends RuntimeException\n{\n    public function __construct(string $message = 'User not found')\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Exception\/UserNotFoundException.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(string $message = 'User not found')\n     {\n-        parent::__construct($message);\n+        \n     }\n }","processOutput":""},{"mutator":{"mutatorName":"TrueValue","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: false, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n         if (!$mapping) {\n-            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n+            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: false, loggable: false);\n         }\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);","processOutput":""},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Listener;\n\nuse App\\Model\\ErrorDebugDetails;\nuse App\\Model\\ErrorResponse;\nuse App\\Service\\ExceptionHandler\\ExceptionMapping;\nuse App\\Service\\ExceptionHandler\\ExceptionMappingResolver;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\nuse Throwable;\nclass ApiExceptionListener\n{\n    public function __construct(private readonly ExceptionMappingResolver $exceptionMappingResolver, private readonly LoggerInterface $logger, private readonly SerializerInterface $serializer, private readonly bool $isDebug)\n    {\n    }\n    public function __invoke(ExceptionEvent $exceptionEvent) : void\n    {\n        $throwable = $exceptionEvent->getThrowable();\n        if ($this->isSecurityException($throwable)) {\n            return;\n        }\n        $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n        if (!$mapping) {\n            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: true);\n        }\n        if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n            $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);\n        }\n        $message = $mapping->isHidden() ? Response::$statusTexts[$mapping->getCode()] : $throwable->getMessage();\n        $details = $this->isDebug && !$mapping->isLoggable() ? new ErrorDebugDetails($throwable->getTraceAsString()) : null;\n        $data = $this->serializer->serialize(data: new ErrorResponse($message, $details), format: JsonEncoder::FORMAT);\n        $exceptionEvent->setResponse(new JsonResponse(data: $data, status: $mapping->getCode(), json: true));\n    }\n    private function isSecurityException(Throwable $throwable) : bool\n    {\n        return $throwable instanceof AuthenticationException;\n    }\n}","originalFilePath":"\/app\/src\/Listener\/ApiExceptionListener.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n         }\n         $mapping = $this->exceptionMappingResolver->resolve(get_class($throwable));\n         if (!$mapping) {\n-            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: false);\n+            $mapping = new ExceptionMapping(code: Response::HTTP_INTERNAL_SERVER_ERROR, hidden: true, loggable: true);\n         }\n         if ($mapping->getCode() >= Response::HTTP_INTERNAL_SERVER_ERROR || $mapping->isLoggable()) {\n             $this->logger->error($throwable->getMessage(), ['trace' => $throwable->getTraceAsString(), 'previous' => null !== $throwable->getPrevious() ? $throwable->getPrevious()->getMessage() : '']);","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    protected function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":29},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function setId(int $id) : static\n+    protected function setId(int $id) : static\n     {\n         $this->id = $id;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    protected function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":41},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->title;\n     }\n-    public function setTitle(string $title) : static\n+    protected function setTitle(string $title) : static\n     {\n         $this->title = $title;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    protected function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":53},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->slug;\n     }\n-    public function setSlug(string $slug) : static\n+    protected function setSlug(string $slug) : static\n     {\n         $this->slug = $slug;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    protected function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":65},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->image;\n     }\n-    public function setImage(string $image) : static\n+    protected function setImage(string $image) : static\n     {\n         $this->image = $image;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    protected function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":83},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param string[] $authors\n      *\/\n-    public function setAuthors(array $authors) : static\n+    protected function setAuthors(array $authors) : static\n     {\n         $this->authors = $authors;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookDetails\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate,\n        private float $rating = 0.0,\n        private int $review = 0,\n        \/** @var BookCategoryListItem[] *\/\n        private array $categories = [],\n        \/** @var BookFormatListItem[] *\/\n        private array $formats = []\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param string[] $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    protected function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n    public function getRating() : float\n    {\n        return $this->rating;\n    }\n    public function setRating(float $rating) : static\n    {\n        $this->rating = $rating;\n        return $this;\n    }\n    public function getReview() : int\n    {\n        return $this->review;\n    }\n    public function setReview(int $review) : static\n    {\n        $this->review = $review;\n        return $this;\n    }\n    \/**\n     * @return BookCategoryListItem[]\n     *\/\n    public function getCategories() : array\n    {\n        return $this->categories;\n    }\n    \/**\n     * @param BookCategoryListItem[] $categories\n     *\/\n    public function setCategories(array $categories) : static\n    {\n        $this->categories = $categories;\n        return $this;\n    }\n    \/**\n     * @return BookFormatListItem[]\n     *\/\n    public function getFormats() : array\n    {\n        return $this->formats;\n    }\n    \/**\n     * @param BookFormatListItem[] $formats\n     *\/\n    public function setFormats(array $formats) : static\n    {\n        $this->formats = $formats;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookDetails.php","originalStartLine":95},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->publicationDate;\n     }\n-    public function setPublicationDate(string $publicationDate) : static\n+    protected function setPublicationDate(string $publicationDate) : static\n     {\n         $this->publicationDate = $publicationDate;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":14},"diff":"--- Original\n+++ New\n@@ @@\n     private ?string $comment;\n     private float $price;\n     private ?int $discountPercent;\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    protected function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n         $this->id = $id;\n         return $this;\n     }\n-    public function getTitle() : string\n+    protected function getTitle() : string\n     {\n         return $this->title;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    protected function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n         $this->title = $title;\n         return $this;\n     }\n-    public function getDescription() : ?string\n+    protected function getDescription() : ?string\n     {\n         return $this->description;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    protected function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":50},"diff":"--- Original\n+++ New\n@@ @@\n         $this->description = $description;\n         return $this;\n     }\n-    public function getComment() : ?string\n+    protected function getComment() : ?string\n     {\n         return $this->comment;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    protected function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":62},"diff":"--- Original\n+++ New\n@@ @@\n         $this->comment = $comment;\n         return $this;\n     }\n-    public function getPrice() : float\n+    protected function getPrice() : float\n     {\n         return $this->price;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    public function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookFormatListItem\n{\n    private int $id;\n    private string $title;\n    private ?string $description;\n    private ?string $comment;\n    private float $price;\n    private ?int $discountPercent;\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getDescription() : ?string\n    {\n        return $this->description;\n    }\n    public function setDescription(?string $description) : static\n    {\n        $this->description = $description;\n        return $this;\n    }\n    public function getComment() : ?string\n    {\n        return $this->comment;\n    }\n    public function setComment(?string $comment) : static\n    {\n        $this->comment = $comment;\n        return $this;\n    }\n    public function getPrice() : float\n    {\n        return $this->price;\n    }\n    public function setPrice(float $price) : static\n    {\n        $this->price = $price;\n        return $this;\n    }\n    protected function getDiscountPercent() : ?int\n    {\n        return $this->discountPercent;\n    }\n    public function setDiscountPercent(?int $discountPercent) : static\n    {\n        $this->discountPercent = $discountPercent;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookFormatListItem.php","originalStartLine":74},"diff":"--- Original\n+++ New\n@@ @@\n         $this->price = $price;\n         return $this;\n     }\n-    public function getDiscountPercent() : ?int\n+    protected function getDiscountPercent() : ?int\n     {\n         return $this->discountPercent;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    protected function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function setId(int $id) : static\n+    protected function setId(int $id) : static\n     {\n         $this->id = $id;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    protected function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->title;\n     }\n-    public function setTitle(string $title) : static\n+    protected function setTitle(string $title) : static\n     {\n         $this->title = $title;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    protected function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":47},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->slug;\n     }\n-    public function setSlug(string $slug) : static\n+    protected function setSlug(string $slug) : static\n     {\n         $this->slug = $slug;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    protected function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":59},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->image;\n     }\n-    public function setImage(string $image) : static\n+    protected function setImage(string $image) : static\n     {\n         $this->image = $image;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    protected function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":77},"diff":"--- Original\n+++ New\n@@ @@\n     \/**\n      * @param array<string> $authors\n      *\/\n-    public function setAuthors(array $authors) : static\n+    protected function setAuthors(array $authors) : static\n     {\n         $this->authors = $authors;\n         return $this;","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    public function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass BookListItem\n{\n    public function __construct(\n        private int $id,\n        private string $title,\n        private string $slug,\n        private string $image,\n        \/** @var string[] *\/\n        private array $authors,\n        private string $publicationDate\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function setId(int $id) : static\n    {\n        $this->id = $id;\n        return $this;\n    }\n    public function getTitle() : string\n    {\n        return $this->title;\n    }\n    public function setTitle(string $title) : static\n    {\n        $this->title = $title;\n        return $this;\n    }\n    public function getSlug() : string\n    {\n        return $this->slug;\n    }\n    public function setSlug(string $slug) : static\n    {\n        $this->slug = $slug;\n        return $this;\n    }\n    public function getImage() : string\n    {\n        return $this->image;\n    }\n    public function setImage(string $image) : static\n    {\n        $this->image = $image;\n        return $this;\n    }\n    \/**\n     * @return string[]\n     *\/\n    public function getAuthors() : array\n    {\n        return $this->authors;\n    }\n    \/**\n     * @param array<string> $authors\n     *\/\n    public function setAuthors(array $authors) : static\n    {\n        $this->authors = $authors;\n        return $this;\n    }\n    public function getPublicationDate() : string\n    {\n        return $this->publicationDate;\n    }\n    protected function setPublicationDate(string $publicationDate) : static\n    {\n        $this->publicationDate = $publicationDate;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/BookListItem.php","originalStartLine":89},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->publicationDate;\n     }\n-    public function setPublicationDate(string $publicationDate) : static\n+    protected function setPublicationDate(string $publicationDate) : static\n     {\n         $this->publicationDate = $publicationDate;\n         return $this;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class ErrorDebugDetails\n{\n    public function __construct(private string $trace)\n    {\n    }\n    public function getTrace() : string\n    {\n        return $this->trace;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nreadonly class ErrorDebugDetails\n{\n    public function __construct(private string $trace)\n    {\n    }\n    protected function getTrace() : string\n    {\n        return $this->trace;\n    }\n}","originalFilePath":"\/app\/src\/Model\/ErrorDebugDetails.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $trace)\n     {\n     }\n-    public function getTrace() : string\n+    protected function getTrace() : string\n     {\n         return $this->trace;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass IdResponse\n{\n    public function __construct(private int $id)\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nclass IdResponse\n{\n    public function __construct(private int $id)\n    {\n    }\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n}","originalFilePath":"\/app\/src\/Model\/IdResponse.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private int $id)\n     {\n     }\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model\\Recommendation;\n\nreadonly class RecommendationResponse\n{\n    public function __construct(\n        private int $id,\n        private int $ts,\n        \/** @var RecommendationItem[] *\/\n        private array $recommendations\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTs() : int\n    {\n        return $this->ts;\n    }\n    \/**\n     * @return RecommendationItem[]\n     *\/\n    public function getRecommendations() : array\n    {\n        return $this->recommendations;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model\\Recommendation;\n\nreadonly class RecommendationResponse\n{\n    public function __construct(\n        private int $id,\n        private int $ts,\n        \/** @var RecommendationItem[] *\/\n        private array $recommendations\n    )\n    {\n    }\n    protected function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTs() : int\n    {\n        return $this->ts;\n    }\n    \/**\n     * @return RecommendationItem[]\n     *\/\n    public function getRecommendations() : array\n    {\n        return $this->recommendations;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Recommendation\/RecommendationResponse.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n     )\n     {\n     }\n-    public function getId() : int\n+    protected function getId() : int\n     {\n         return $this->id;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model\\Recommendation;\n\nreadonly class RecommendationResponse\n{\n    public function __construct(\n        private int $id,\n        private int $ts,\n        \/** @var RecommendationItem[] *\/\n        private array $recommendations\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    public function getTs() : int\n    {\n        return $this->ts;\n    }\n    \/**\n     * @return RecommendationItem[]\n     *\/\n    public function getRecommendations() : array\n    {\n        return $this->recommendations;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model\\Recommendation;\n\nreadonly class RecommendationResponse\n{\n    public function __construct(\n        private int $id,\n        private int $ts,\n        \/** @var RecommendationItem[] *\/\n        private array $recommendations\n    )\n    {\n    }\n    public function getId() : int\n    {\n        return $this->id;\n    }\n    protected function getTs() : int\n    {\n        return $this->ts;\n    }\n    \/**\n     * @return RecommendationItem[]\n     *\/\n    public function getRecommendations() : array\n    {\n        return $this->recommendations;\n    }\n}","originalFilePath":"\/app\/src\/Model\/Recommendation\/RecommendationResponse.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getTs() : int\n+    protected function getTs() : int\n     {\n         return $this->ts;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    public function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nclass SignUpRequest\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Email]\n    private string $email;\n    #[Assert\\NotBlank]\n    private string $firstName;\n    #[Assert\\NotBlank]\n    private string $lastname;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    private string $password;\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 6, max: 20)]\n    #[Assert\\EqualTo(propertyPath: 'password', message: 'This value should be equal to password field.')]\n    private string $confirmPassword;\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function setEmail(string $email) : static\n    {\n        $this->email = $email;\n        return $this;\n    }\n    public function getFirstName() : string\n    {\n        return $this->firstName;\n    }\n    public function setFirstName(string $firstName) : static\n    {\n        $this->firstName = $firstName;\n        return $this;\n    }\n    public function getLastname() : string\n    {\n        return $this->lastname;\n    }\n    public function setLastname(string $lastname) : static\n    {\n        $this->lastname = $lastname;\n        return $this;\n    }\n    public function getPassword() : string\n    {\n        return $this->password;\n    }\n    public function setPassword(string $password) : static\n    {\n        $this->password = $password;\n        return $this;\n    }\n    protected function getConfirmPassword() : string\n    {\n        return $this->confirmPassword;\n    }\n    public function setConfirmPassword(string $confirmPassword) : static\n    {\n        $this->confirmPassword = $confirmPassword;\n        return $this;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SignUpRequest.php","originalStartLine":76},"diff":"--- Original\n+++ New\n@@ @@\n         $this->password = $password;\n         return $this;\n     }\n-    public function getConfirmPassword() : string\n+    protected function getConfirmPassword() : string\n     {\n         return $this->confirmPassword;\n     }","processOutput":""},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nreadonly class SubscriberRequest\n{\n    public function __construct(#[Assert\\NotBlank] #[Assert\\Email] public string $email, #[Assert\\NotBlank] #[Assert\\IsTrue] public bool $agreed)\n    {\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    public function isAgreed() : bool\n    {\n        return $this->agreed;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nreadonly class SubscriberRequest\n{\n    public function __construct(#[Assert\\NotBlank] #[Assert\\Email] public string $email, #[Assert\\NotBlank] #[Assert\\IsTrue] public bool $agreed)\n    {\n    }\n    public function getEmail() : string\n    {\n        return $this->email;\n    }\n    protected function isAgreed() : bool\n    {\n        return $this->agreed;\n    }\n}","originalFilePath":"\/app\/src\/Model\/SubscriberRequest.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->email;\n     }\n-    public function isAgreed() : bool\n+    protected function isAgreed() : bool\n     {\n         return $this->agreed;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\BookFormat;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<BookFormat>\n *\n * @method BookFormat|null find($id, $lockMode = null, $lockVersion = null)\n * @method BookFormat|null findOneBy(array $criteria, array $orderBy = null)\n * @method BookFormat[]    findAll()\n * @method BookFormat[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookFormatRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, BookFormat::class);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\BookFormat;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<BookFormat>\n *\n * @method BookFormat|null find($id, $lockMode = null, $lockVersion = null)\n * @method BookFormat|null findOneBy(array $criteria, array $orderBy = null)\n * @method BookFormat[]    findAll()\n * @method BookFormat[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookFormatRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Repository\/BookFormatRepository.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(ManagerRegistry $registry)\n     {\n-        parent::__construct($registry, BookFormat::class);\n+        \n     }\n }","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\BookRelationToBookFormat;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<BookRelationToBookFormat>\n *\n * @method BookRelationToBookFormat|null find($id, $lockMode = null, $lockVersion = null)\n * @method BookRelationToBookFormat|null findOneBy(array $criteria, array $orderBy = null)\n * @method BookRelationToBookFormat[]    findAll()\n * @method BookRelationToBookFormat[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRelationToBookFormatRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, BookRelationToBookFormat::class);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\BookRelationToBookFormat;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<BookRelationToBookFormat>\n *\n * @method BookRelationToBookFormat|null find($id, $lockMode = null, $lockVersion = null)\n * @method BookRelationToBookFormat|null findOneBy(array $criteria, array $orderBy = null)\n * @method BookRelationToBookFormat[]    findAll()\n * @method BookRelationToBookFormat[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass BookRelationToBookFormatRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        \n    }\n}","originalFilePath":"\/app\/src\/Repository\/BookRelationToBookFormatRepository.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function __construct(ManagerRegistry $registry)\n     {\n-        parent::__construct($registry, BookRelationToBookFormat::class);\n+        \n     }\n }","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            throw new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse App\\Exception\\UserNotFoundException;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\/**\n * @extends ServiceEntityRepository<User>\n *\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n    public function existByEmail(string $email) : bool\n    {\n        return !empty($this->findBy(['email' => $email]));\n    }\n    public function getUser(int $userId) : User\n    {\n        $user = $this->find(['id' => $userId]);\n        if (!$user) {\n            new UserNotFoundException('User not found');\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Repository\/UserRepository.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $user = $this->find(['id' => $userId]);\n         if (!$user) {\n-            throw new UserNotFoundException('User not found');\n+            new UserNotFoundException('User not found');\n         }\n         return $user;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"Identical","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class !== $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function supportsClass(string $class) : bool\n     {\n-        return User::class === $class || is_subclass_of($class, User::class);\n+        return User::class !== $class || is_subclass_of($class, User::class);\n     }\n     public function loadUserByIdentifier(string $identifier) : UserInterface\n     {","processOutput":""},{"mutator":{"mutatorName":"LogicalOr","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class && is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function supportsClass(string $class) : bool\n     {\n-        return User::class === $class || is_subclass_of($class, User::class);\n+        return User::class === $class && is_subclass_of($class, User::class);\n     }\n     public function loadUserByIdentifier(string $identifier) : UserInterface\n     {","processOutput":""},{"mutator":{"mutatorName":"LogicalOrAllSubExprNegation","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return !(User::class === $class) || !is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function supportsClass(string $class) : bool\n     {\n-        return User::class === $class || is_subclass_of($class, User::class);\n+        return !(User::class === $class) || !is_subclass_of($class, User::class);\n     }\n     public function loadUserByIdentifier(string $identifier) : UserInterface\n     {","processOutput":""},{"mutator":{"mutatorName":"LogicalOrNegation","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return !(User::class === $class || is_subclass_of($class, User::class));\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function supportsClass(string $class) : bool\n     {\n-        return User::class === $class || is_subclass_of($class, User::class);\n+        return !(User::class === $class || is_subclass_of($class, User::class));\n     }\n     public function loadUserByIdentifier(string $identifier) : UserInterface\n     {","processOutput":""},{"mutator":{"mutatorName":"LogicalOrSingleSubExprNegation","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || !is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function supportsClass(string $class) : bool\n     {\n-        return User::class === $class || is_subclass_of($class, User::class);\n+        return User::class === $class || !is_subclass_of($class, User::class);\n     }\n     public function loadUserByIdentifier(string $identifier) : UserInterface\n     {","processOutput":""},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            \n            throw $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":54},"diff":"--- Original\n+++ New\n@@ @@\n         $user = $this->userRepository->findOneBy([$key => $value]);\n         if (null === $user) {\n             $e = new UserNotFoundException('User with id not found');\n-            $e->setUserIdentifier($value);\n+            \n             throw $e;\n         }\n         return $user;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            throw $e;\n        }\n        return $user;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Security;\n\nuse App\\Entity\\User;\nuse App\\Repository\\UserRepository;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\User\\PayloadAwareUserProviderInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nreadonly class JWTUserProvider implements PayloadAwareUserProviderInterface\n{\n    public function __construct(private UserRepository $userRepository)\n    {\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByUsernameAndPayload(string $username, array $payload) : ?UserInterface\n    {\n        return null;\n    }\n    public function refreshUser(UserInterface $user) : ?UserInterface\n    {\n        return null;\n    }\n    public function supportsClass(string $class) : bool\n    {\n        return User::class === $class || is_subclass_of($class, User::class);\n    }\n    public function loadUserByIdentifier(string $identifier) : UserInterface\n    {\n        return $this->getUser('email', $identifier);\n    }\n    \/**\n     * @param string[] $payload\n     *\/\n    public function loadUserByIdentifierAndPayload(string $identifier, array $payload) : UserInterface\n    {\n        return $this->getUser('id', $payload['id']);\n    }\n    private function getUser(string $key, string|int $value) : UserInterface\n    {\n        $user = $this->userRepository->findOneBy([$key => $value]);\n        if (null === $user) {\n            $e = new UserNotFoundException('User with id not found');\n            $e->setUserIdentifier($value);\n            $e;\n        }\n        return $user;\n    }\n}","originalFilePath":"\/app\/src\/Security\/JWTUserProvider.php","originalStartLine":56},"diff":"--- Original\n+++ New\n@@ @@\n         if (null === $user) {\n             $e = new UserNotFoundException('User with id not found');\n             $e->setUserIdentifier($value);\n-            throw $e;\n+            $e;\n         }\n         return $user;\n     }\n }","processOutput":""},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":76},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $book = $this->bookRepository->find($id);\n         if (!$book) {\n-            throw new BookNotFoundException();\n+            new BookNotFoundException();\n         }\n         $reviews = $this->reviewRepository->countByBook($id);\n         $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {","processOutput":""},{"mutator":{"mutatorName":"NewObject","originalSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App\\Service;\n\nuse App\\Entity\\Book;\nuse App\\Entity\\BookCategory;\nuse App\\Entity\\BookRelationToBookFormat;\nuse App\\Exception\\BookCategoryNotFoundException;\nuse App\\Exception\\BookNotFoundException;\nuse App\\Mapper\\BookMapper;\nuse App\\Model\\BookCategoryListItem;\nuse App\\Model\\BookDetails;\nuse App\\Model\\BookFormatListItem;\nuse App\\Model\\BookListItem;\nuse App\\Model\\BookListRecommendationResponse;\nuse App\\Model\\BookListResponse;\nuse App\\Model\\Recommendation\\RecommendationItem;\nuse App\\Repository\\BookCategoryRepository;\nuse App\\Repository\\BookRepository;\nuse App\\Repository\\ReviewRepository;\nuse App\\Service\\Recommendation\\RecommendationService;\nuse Doctrine\\ORM\\NonUniqueResultException;\nuse Doctrine\\ORM\\NoResultException;\nreadonly class BookService\n{\n    public function __construct(private BookRepository $bookRepository, private BookCategoryRepository $bookCategoryRepository, private ReviewRepository $reviewRepository, private RatingService $ratingService, private RecommendationService $recommendationService)\n    {\n    }\n    public function findBooksByCategory(int $categoryId) : BookListResponse\n    {\n        $category = $this->bookCategoryRepository->find($categoryId);\n        if (!$category) {\n            throw new BookCategoryNotFoundException();\n        }\n        return new BookListResponse(array_map(callback: function (Book $book) {\n            return BookMapper::map($book, BookListItem::class);\n        }, array: $this->bookRepository->findByCategory($categoryId)));\n    }\n    public function findBooksByRecommendations(int $idBook) : BookListRecommendationResponse\n    {\n        $ids = array_map(callback: function (RecommendationItem $recommendationItem) {\n            return $recommendationItem->getId();\n        }, array: $this->recommendationService->getRecommendationByBookId($idBook)->getRecommendations());\n        return new BookListRecommendationResponse(array_map([BookMapper::class, 'mapRecommendations'], $this->bookRepository->findBooksByIds($ids)));\n    }\n    \/**\n     * @throws NonUniqueResultException\n     * @throws NoResultException\n     *\/\n    public function getBookById(int $id) : BookDetails\n    {\n        $book = $this->bookRepository->find($id);\n        if (!$book) {\n            throw new BookNotFoundException();\n        }\n        $reviews = $this->reviewRepository->countByBook($id);\n        $formats = $book->getFormats()->map(func: function (BookRelationToBookFormat $formatJoin) {\n            return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n        });\n        $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n            new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n            return null;\n        });\n        return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n    }\n}","originalFilePath":"\/app\/src\/Service\/BookService.php","originalStartLine":94},"diff":"--- Original\n+++ New\n@@ @@\n             return (new BookFormatListItem())->setId($formatJoin->getFormat()->getId())->setTitle($formatJoin->getFormat()->getTitle())->setDescription($formatJoin->getFormat()->getDescription())->setComment($formatJoin->getFormat()->getComment())->setPrice($formatJoin->getPrice())->setDiscountPercent($formatJoin->getDiscountPercent());\n         });\n         $categories = $book->getCategories()->map(func: function (BookCategory $bookCategory) {\n-            return new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n+            new BookCategoryListItem(id: $bookCategory->getId(), title: $bookCategory->getTitle(), slug: $bookCategory->getSlug());\n+            return null;\n         });\n         return BookMapper::map($book, BookDetails::class)->setReview($reviews)->setCategories($categories->toArray())->setFormats($formats->toArray())->setRating($this->ratingService->calcReview($id, $reviews));\n     }\n }","processOutput":""}],"ignored":[]}